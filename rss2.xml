<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>小金的学习日志</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>希望现在的自己配得上所期望的生活</description>
    <pubDate>Thu, 16 Mar 2023 07:55:14 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>s</title>
      <link>http://example.com/2023/03/16/s/</link>
      <guid>http://example.com/2023/03/16/s/</guid>
      <pubDate>Thu, 16 Mar 2023 07:40:07 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/2023/03/16/s/image-20230316155513350.png&quot; alt=&quot;image-20230316155513350&quot;&gt;&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/2023/03/16/s/image-20230316155513350.png" alt="image-20230316155513350"></p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/03/16/s/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>通信总线</title>
      <link>http://example.com/2023/02/20/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/</link>
      <guid>http://example.com/2023/02/20/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/</guid>
      <pubDate>Mon, 20 Feb 2023 14:07:08 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;总线协议&quot;&gt;&lt;a href=&quot;#总线协议&quot; class=&quot;headerlink&quot; title=&quot;总线协议&quot;&gt;&lt;/a&gt;总线协议&lt;/h2&gt;&lt;p&gt;并行：同一时间总线能发若干个位数的数据&lt;/p&gt;
&lt;p&gt;串行：同一时间总线只发一位的数据，并一直维持这种传送方式&lt;/p&gt;
&lt;p&gt;单工：A只能给B传送数据&lt;/p&gt;
&lt;p&gt;双工：A可以给B传送数据，也可以从B接受数据&lt;/p&gt;
&lt;p&gt;半双工：接收数据，传送数据不能同时进行&lt;/p&gt;
&lt;p&gt;全双工：接收，传输可以同时进行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;波特率：串口通信速度(BPS)，每秒钟能传送位数的个数&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;串口&quot;&gt;&lt;a href=&quot;#串口&quot; class=&quot;headerlink&quot; title=&quot;串口&quot;&gt;&lt;/a&gt;串口&lt;/h3&gt;&lt;p&gt;串行通信接口(COM)：一次最多可以发送一个字节，发送多个字节必须先发送一个字节停止，再起始发送另一个字节&lt;/p&gt;
&lt;p&gt;其中有公头和母头之分&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;串行：计算机总线或其他数据传送线上，一次只传送一位元数据，并连续进行以上传送方式，防止累计误差的出现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并行：计算机总线或其他数据传送线上，一次传送多位元数据，速度比串行快&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;异步通信：发送数据方与接受数据方的时钟不一样&lt;/p&gt;
&lt;p&gt;同步通信：发送与接受方时钟相同&lt;/p&gt;
&lt;h3 id=&quot;UART&quot;&gt;&lt;a href=&quot;#UART&quot; class=&quot;headerlink&quot; title=&quot;UART&quot;&gt;&lt;/a&gt;UART&lt;/h3&gt;&lt;p&gt;通用异步收发器，串行，异步通用总线，有两条线，一个对外发送，一个对外接受，属于全双工通信线路&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接收器与发送器波特率误差不能超过百分之10&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;帧格式&quot;&gt;&lt;a href=&quot;#帧格式&quot; class=&quot;headerlink&quot; title=&quot;帧格式&quot;&gt;&lt;/a&gt;帧格式&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/2023/02/20/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/image-20230226144803956.png&quot; alt=&quot;image-20230226144803956&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;起始位，数据位，校验位（可有可无），停止位（1或2位）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;检验过程：检测数据位中1的个数，1若为偶数个则校验位为1，只能检查是否有错误，不能修正错误&lt;/p&gt;
&lt;p&gt;校验位加数据位中1的个数为偶数为偶校验，否则为奇校验&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TXD：发送数据口&lt;/li&gt;
&lt;li&gt;RXD：接收数据口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;电气接口不统一，不同器件的高低电平标准不一样&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抗干扰能力差&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据传输距离短&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="总线协议"><a href="#总线协议" class="headerlink" title="总线协议"></a>总线协议</h2><p>并行：同一时间总线能发若干个位数的数据</p><p>串行：同一时间总线只发一位的数据，并一直维持这种传送方式</p><p>单工：A只能给B传送数据</p><p>双工：A可以给B传送数据，也可以从B接受数据</p><p>半双工：接收数据，传送数据不能同时进行</p><p>全双工：接收，传输可以同时进行</p><p><strong>波特率：串口通信速度(BPS)，每秒钟能传送位数的个数</strong></p><h3 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h3><p>串行通信接口(COM)：一次最多可以发送一个字节，发送多个字节必须先发送一个字节停止，再起始发送另一个字节</p><p>其中有公头和母头之分</p><p><strong>串行：计算机总线或其他数据传送线上，一次只传送一位元数据，并连续进行以上传送方式，防止累计误差的出现</strong></p><p><strong>并行：计算机总线或其他数据传送线上，一次传送多位元数据，速度比串行快</strong></p><p>异步通信：发送数据方与接受数据方的时钟不一样</p><p>同步通信：发送与接受方时钟相同</p><h3 id="UART"><a href="#UART" class="headerlink" title="UART"></a>UART</h3><p>通用异步收发器，串行，异步通用总线，有两条线，一个对外发送，一个对外接受，属于全双工通信线路</p><p><strong>接收器与发送器波特率误差不能超过百分之10</strong></p><h4 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h4><p><img src="/2023/02/20/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/image-20230226144803956.png" alt="image-20230226144803956"></p><p><strong>起始位，数据位，校验位（可有可无），停止位（1或2位）</strong></p><p>检验过程：检测数据位中1的个数，1若为偶数个则校验位为1，只能检查是否有错误，不能修正错误</p><p>校验位加数据位中1的个数为偶数为偶校验，否则为奇校验</p><ul><li>TXD：发送数据口</li><li>RXD：接收数据口</li></ul><p>缺点：</p><ul><li><strong>电气接口不统一，不同器件的高低电平标准不一样</strong></li><li><strong>抗干扰能力差</strong></li><li><strong>数据传输距离短</strong></li></ul><span id="more"></span><h3 id="I2C总线协议（先发高位后发低位）"><a href="#I2C总线协议（先发高位后发低位）" class="headerlink" title="I2C总线协议（先发高位后发低位）"></a>I2C总线协议（先发高位后发低位）</h3><p>由两条线构成，一个SCK（串行时钟线），一个SDA（串行数据线）</p><p>特点：</p><ul><li>SDA传输高位先传，一次传8BIT（一个字节），传送一个字节之后接一个ACK&#x2F;NACK位</li><li>支持多主控，但同一时间只有一个主控</li><li>连接到总线的所有从机都有一个独立的7位地址，用来主机识别从机</li><li>总线空闲时需要加上拉电阻使其变为高电平</li><li>SDA与SCK是线与关系，有一个为低电平即都为低电平</li><li>多个主机同时使用总线时，需要仲裁的方式觉得哪个主机使用</li></ul><p>起始信号：</p><ul><li>SCL为高时，SDA从1变为0</li></ul><p>结束信号</p><ul><li>SCL为高时，SDA从变一</li></ul><p><strong>只有当SCL为0时，才会允许主机将要发送的数据写入SDA，SCL为1时，接收器读取数据</strong></p><p><strong>传输完8位数据后，第九位为ACK&#x2F;NACK，代表应答信号和非应答信号</strong></p><p>等数据接收完毕后，主机发送向从机发送一个NACK信号，告诉从机不要再发送信号了，之后再发送一个停止信号，释放总线</p><h4 id="对中断的处理"><a href="#对中断的处理" class="headerlink" title="对中断的处理"></a>对中断的处理</h4><p>从机对中断的处理为，将SCL总线拉低，使其进入等待状态，等准备完毕后，再将SCL拉高，使主机就绪</p><h4 id="主机发送数据流程"><a href="#主机发送数据流程" class="headerlink" title="主机发送数据流程"></a>主机发送数据流程</h4><ol><li>主机检测到主线空闲（SCK,SAD都为高电平），发送一个起始信号</li><li>主机发送一个8位数据（7位地址+R&#x2F;W读写位），<strong>R&#x2F;W位0时位写，R&#x2F;W为1时为读</strong></li><li>从机收到命令后，发送一个ACK（<strong>对SDA拉低代表应答</strong>）</li><li>主机接受之后发送第一个字节数据</li><li>从机受到后继续发送一个ACK</li><li>直到主机发送到最后一个字节时，并且受到从机ACK后，发送一个停止信号，结束通信</li></ol><h4 id="主机接受数据流程"><a href="#主机接受数据流程" class="headerlink" title="主机接受数据流程"></a>主机接受数据流程</h4><ol><li>主机开始发送信号，发送命令字节（7位地址+R&#x2F;W位&#x3D;1）</li><li>从机接收信号，发送一个字节数据</li><li>主机收到一个字节数据，发送一个ack</li><li>直到接收到最后一个数据，主机向从机发一个NACK（表示上一个字节接收完毕，下一个字节不要再发了），从机接收到信号之后停止传送数据</li><li>主机再发送一个停止信号，结束信号，退出总线</li></ol><h4 id="主机的仲裁流程"><a href="#主机的仲裁流程" class="headerlink" title="主机的仲裁流程"></a>主机的仲裁流程</h4><p>主机通过检测自身的SDA信号是否与总线SDA信号相同，来判断是否发生总线冲突，第一个使SDA从高电平跳至低电平的主机获得总线控</p><p>制权</p><h3 id="I2C时钟同步"><a href="#I2C时钟同步" class="headerlink" title="I2C时钟同步"></a>I2C时钟同步</h3><p><strong>SCL线的低电平周期与线路器件中低电平最长的周期相等</strong></p><p><strong>SCL线的高电平由高电平时钟周期最短的器件保持</strong></p><h4 id="相关硬件知识"><a href="#相关硬件知识" class="headerlink" title="相关硬件知识"></a>相关硬件知识</h4><ul><li>I2C总线相当于OD(开漏)，因为输出为高阻态，所以要加上拉电平将其拉到高电平确定输出</li><li>上拉电阻的最小值由上拉源确定，上拉电阻的最大值由总线电容决定</li></ul><p><img src="/2023/02/20/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/image-20230226013807179.png" alt="image-20230226013807179"></p><p><img src="/2023/02/20/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/image-20230226013824207.png" alt="image-20230226013824207"></p><ul><li>I2C总线串联保护电阻，抑制干扰脉冲进入电路，选值一般都很小</li></ul><h3 id="RS232"><a href="#RS232" class="headerlink" title="RS232"></a>RS232</h3><p>再UART协议的基准上，对其做了相应的电器标准</p><ul><li>规定采用标准的连接器，对每个引脚的作用，以及信号的电平做了规定</li></ul><p>规定的逻辑电平</p><ul><li>高电平：-5V ~  -15V为逻辑电平1</li><li>低电平:   5V  ~  15V为逻辑电平0</li></ul><p>缺点”</p><ul><li>接口的信号电平值比较高，容易烧毁芯片，又因为与TTL电平不兼容，所以要接232电平转换芯片</li><li>通信速度比较低，无法应用在高速场合</li><li>易产生共模干扰，抗噪声比较弱</li><li>传输距离比较短</li></ul><p><img src="/2023/02/20/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/image-20230316204559533.png" alt="image-20230316204559533"></p><h3 id="RS485"><a href="#RS485" class="headerlink" title="RS485"></a>RS485</h3><p><strong>半双工的工作方式</strong></p><p>类似RS232，也是一个电气标准，为了<strong>解决远距离条件，噪声大条件下信号的传输能力</strong>，该标准<strong>允许连接多个收发器</strong></p><p>信号：</p><p><strong>差分信号</strong>：通过两根线上电压去做相减，可以抑制共模干扰</p><p>规定采用<strong>差分信号</strong>进行数据传输，两线间的电压差达到**+2V到+6V<strong>时为逻辑电平1，两线间电压差再</strong>-2V到-6V**之间为逻辑电平0</p><p><strong>发送时同样需要将TTL转485，接收时要485转TTL</strong></p><p>优点：</p><ul><li>接口信号值电压较低</li><li>可以抑制共模干扰</li><li>可以组成网络</li><li>通信速度快</li></ul><h3 id="SPI总线（串行外设接口）先发高位后发低位"><a href="#SPI总线（串行外设接口）先发高位后发低位" class="headerlink" title="SPI总线（串行外设接口）先发高位后发低位"></a>SPI总线（串行外设接口）先发高位后发低位</h3><p>高速的，全双工的，同步的串行通信总线</p><p>一共有4根线：</p><ul><li>MISO(主机输入从机输出)</li><li>MOSI（主机输出从机输入）</li><li>SCLK（时钟信号）</li><li>CS（片选信号）：主机发送使能信号确定响应的从机，可以用多条线，用来响应不同的从机，对应电平由从机确定，发送完使能信号之后，其他不响应的从机仍要发一个使能信号，如果响应高电平，就发送低电平</li></ul><p><strong>与I2C区别，发送完一个字节的数据之后不需要应答信号即可发送下一个信号，发送时如果上升沿发送数据，下降沿就接收数据，没有起始信号，停止信号，应答信号</strong></p><h4 id="极性和相位"><a href="#极性和相位" class="headerlink" title="极性和相位"></a>极性和相位</h4><p>SPI总线有四种不同的工作方式取决于极性(CPOL)和相位(CPHA)</p><p>CPOL表示SCLK空闲时的状态</p><ul><li>CPOL&#x3D;0时表示SCLK空闲时为低电平</li><li>CPOL&#x3D;1时表示SCLK空闲时为高电平</li></ul><p>CPHA表示接收信号的时机</p><ul><li>CPHA&#x3D;0时表示第一个时钟沿接收信号</li><li>CPHA&#x3D;1表示第二个时钟沿接收信号</li></ul><p>与I2C的相同：</p><ul><li>均采用同步，串行方式</li><li>均采用TTL电平</li><li>均采用主从方式工作</li></ul><p>与I2C的区别：</p><ul><li>I2C通过从机地址确定工作的从机，SPI通过发送使能信号唤醒从机</li><li>I2C时钟的极性和相位是固定的，SPI是可调的</li><li>I2C有应答机制，SPI无应答机制</li><li>I2C是半双工，spi是全双工</li></ul><h3 id="USB"><a href="#USB" class="headerlink" title="USB"></a>USB</h3><p><strong>一共有4条线，分别为：Vbus，D+，D-，GND</strong></p><p><strong>反向不归零编码(NRZI):用信号电平翻转代表0，信号电平保持代表1，这种编码方式既可以保证数据传输的完整性，也不需要传输过程中包含独立的时钟,但是信号电平长时间保持时，会导致接收器丢失同步信号，所以在信号电平保持最长6个周期后，会将信号电平强制反转，保证时钟周期的同步，而接收器会扔掉自动翻转的0电平，不会对数据传输产生干扰</strong></p><p><img src="/2023/02/20/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/image-20230316202917950.png" alt="image-20230316202917950"></p><p>USB只允许有一个主机。可分为3个不同的模块</p><ul><li>客户软件：负责USB设备的通信，以实现其功能，不能直接访问USB设备，必须通过系统软件与总线接口进行访问，包括USB设备驱动程序和界面应用程序</li><li>USB系统软件：负责USB逻辑设备进行配置通信，同时管理客户软件启动的数据传输，包括USB总线驱动程序和USB主控制器驱动程序</li><li>USB总线接口：包括主控制器和根集线器，主控制器负责完成数据的传输，根集线器负责给usb系统提供一个或多个连接点</li></ul><p>USB设备主要有3个不同模块</p><ul><li>USB总线接口：是USB设备中的串行接口引擎</li><li>USB逻辑设备：被USB系统软件看成是一个端点的集合</li><li>功能单元：被客户软件看成是一个接口的集合</li></ul><p>他包括</p><ul><li>配置描述符</li><li>设备描述符</li><li>接口描述符</li><li>端点描述符</li><li>字符串描述符</li></ul><p><strong>设备：一个USB设备有一个或多个配置组成，但一定只有一个设备描述符</strong></p><p><strong>配置：USB设备的每一个配置都必须包含一个配置描述符</strong></p><p><strong>接口：一个配置可以由一个或多个接口组成，每一个接口必须由接口描述符组成</strong></p><p><strong>端点：是用于主机在各个USB设备中进行数据传输（0号端点可以支持输入或输出，但一般用于控制传输)</strong></p><p><strong>管道：与端点一一对应，一个设备有多少端点，通信时就可以用多少管道，通信时相互独立，传输方式由端点决定</strong></p><h4 id="USB拓扑结构"><a href="#USB拓扑结构" class="headerlink" title="USB拓扑结构"></a>USB拓扑结构</h4><p>USB主要有主机，集线器构成</p><p>拓扑结构中有3种元素</p><ul><li>主机</li><li>HUB（集线器）</li><li>设备</li></ul><p>最顶层为主机，连接到下一层的集线器，下一层的集线器再连接到更下一层的集线器与设备，如下图所示</p><p><img src="/2023/02/20/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/image-20230228173759767.png" alt="image-20230228173759767"></p><h4 id="当一个设备从集线器上接入时"><a href="#当一个设备从集线器上接入时" class="headerlink" title="当一个设备从集线器上接入时"></a>当一个设备从集线器上接入时</h4><ul><li>主机会检测到集线器状态的改变，发出一个命令使该端口有效并进行设置</li><li>设备接收到命令，进行响应，主机收到设备的响应，了解该设备用哪种驱动程序，并分配给其一个唯一的地址</li><li>主机发送内部设置请求</li></ul><h4 id="当一个设备从集线器上移除时"><a href="#当一个设备从集线器上移除时" class="headerlink" title="当一个设备从集线器上移除时"></a>当一个设备从集线器上移除时</h4><p>主线将其从可用资源列表上删除</p><h4 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h4><p>由包组成，一个包中由：</p><ul><li>同步字段：使USB设备与总线的包传输速率同步，固定为00000001</li><li>PID字段：用来表示数据封包的类型（令牌，数据，握手，特殊）</li></ul><p><img src="/2023/02/20/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/image-20230228175742798.png" alt="image-20230228175742798"></p><ul><li>数据字段：用来携带传输的数据，内容长度根据标识符，传输类型的不同而不同，先传低位，后传高位</li></ul><ol><li>分为ADDR数据域：由7位组成，用来寻址</li><li>ENDP数据域：由4位组成，寻址32个端点，端点1作为中断传输模式</li><li>帧序列号：当PID为SOF时，必须时一个11位的帧序列号，由主机产生，每产生一个加一，最大为0x7FF，最大时归0</li><li>数据：</li></ol><ul><li>CRC字段：循环冗余码，重要的信息由CRC16组成，其余的信息由CRC5组成</li><li>包结尾字段</li></ul><p>数据包的格式：</p><ul><li><p>令牌包：定义了传输数据的类型，是事务处理的第一个阶段，由IN,OUT,SETUP三个令牌包，分别为主机输入，主机输出作用，</p><p>与其他区别，除了PID,SYNC以及CRC5以外，由ENDP，ADDR两个字段</p></li><li><p>数据包：必须以8个字节为单位</p></li><li><p>握手包：仅包含一个数据域：一个SYNC字段，两个PID字段</p></li></ul><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p><strong>USB上一次信息接收或发送的过程称为事务</strong></p><p>类型包括：</p><ul><li>IN输入事务处理</li><li>OUT输出事务处理</li><li>SETUP设置事务处理</li></ul><p>输入事务时：</p><ul><li>主机发送一个令牌信息包</li><li>从机接收到后，如果设备正常运行，则发送一个数据包，若设备忙或设备出错，则发送一个握手包（NACK或STALL）</li><li>主机接收到后则回应一个握手包（ACK）</li></ul><p>输出事务时</p><ul><li>主机发送一个令牌信息包</li><li>紧接着主机再发送一个数据包</li><li>从机接收到后发送一个握手包（ACK），若设备忙或出错时则发送NACK或STALL握手包</li></ul><p>设置事务时与输出事务过程相同</p><p><strong>再USB当中，有4种传输类型</strong></p><ul><li>控制传输</li><li>中断传输</li><li>批量传输</li><li>同步传输</li></ul><h5 id="控制传输"><a href="#控制传输" class="headerlink" title="控制传输"></a>控制传输</h5><p>控制传输有2到3个阶段组成</p><ul><li>建立阶段（Setup）：主机从USB获取设备配置信息，并设置设备的配置值，数据交换包含了令牌包，数据包，握手包，它的作用是执行了一个设置的数据交换，并定义此次控制传输的内容</li><li>数据阶段（DATA）：根据数据阶段的数据传输方向，控制传输又可以分为3种：控制读取（读取USB描述符），控制写入（配置USB设备），无数据控制</li></ul><p>其中控制读取：</p><p>是将数据从设备读取到主机上，读取的数据是USB设备描述符，主机先发送一个IN令牌信息包，从机接收到后发送一个数据包，主机根据情况发送一个握手包，（ACK,NACK,STALL）</p><p>控制写入：</p><p>将数据从主机读取到设备上，数据为主机对USB的配置信息，主机先发送一个OUT令牌包，在发送数据包，设备最后发送握手包</p><ul><li>状态阶段（STATUS）：表示整个传输的过程已经完成，状态阶段的传输方向必须与数据阶段的方向相反</li></ul><p>每个阶段都由一个或多个事务组成</p><h5 id="批量传输"><a href="#批量传输" class="headerlink" title="批量传输"></a>批量传输</h5><ul><li>用于传输大量数据，保证数据不能出错，但对时间没有太大的要求</li><li>批量传输是可靠的传输，需要握手包来表明传输的结果，若数据量比较大，则会采用批量传输来完成全部数据的传输，其中PID会以翻转的形式传输如DATA0-DATA1-DATA0-DATA1，以保证发送端与接收端同步</li><li>USB允许连续3次以下的错误，如果连续发生错误后成功传输，则错误次数清零，当错误超过3次后，认为该端点功能错误，放弃传输</li><li>一次批量传输是指一次或多次批量事务传输</li><li>翻转同步：只有成功的事务传送才会使其翻转，否则会重新尝试本次传输</li></ul><h5 id="中断传输"><a href="#中断传输" class="headerlink" title="中断传输"></a>中断传输</h5><p>中断传输由IN事务和OUT事务组成</p><p>除流程上不支持PING以外，其他过程与批量传输相同，中断传输优先级较高，仅次于同步传输</p><p>中断传输总是用于对设备的查询，以确保是否有数据需要传输</p><h5 id="中断传输-1"><a href="#中断传输-1" class="headerlink" title="中断传输"></a>中断传输</h5><p>由两种包组成</p><ul><li>token</li><li>data</li></ul><p>不支持handshake和重传，因此他不可靠</p><p>他在传输中有着最高的优先级</p><p>同步传输适用于必须以固定速率抵达或在指定时刻抵达，可以容忍偶尔错误的数据上</p><h4 id="USB2-0的电路设计及保护"><a href="#USB2-0的电路设计及保护" class="headerlink" title="USB2.0的电路设计及保护"></a>USB2.0的电路设计及保护</h4><ul><li><p>L1为滤波磁珠，用于滤除电源上的干扰，磁珠阻抗选择范围为100Ω&#x2F;100MHz~1000Ω&#x2F;100MHz，典型值取600Ω&#x2F;100MHz，磁珠在选取时通流量应符合电路电流的要求；</p></li><li><p>L2为共模滤波电感，用于滤除差分信号上的共模干扰，磁珠阻抗选择范围为60Ω&#x2F;100MHz~120Ω&#x2F;100MHz，典型值取90Ω&#x2F;100MHz；</p></li><li><p>C1、C2为电源滤波电容，用于滤除电源上的干扰。C1、C2两个电容在取值上要相差100倍，典型值为10uF+0.1uF；小电容用于滤除电源上的高频干扰，大电容用于滤除电源线上的纹波干扰；</p></li><li><p>C3为接口地和数字地之间的跨接电容，典型值为1000pF&#x2F;2KV，容值也可根据实际测试情况进行调整；</p></li></ul><p><a href="https://img2020.cnblogs.com/blog/1298558/202010/1298558-20201020212713032-149768353.png"><img src="/2023/02/20/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/1298558-20201020212713032-149768353.png" alt="img"></a></p><p>其中D1,D2,D3为TVS，帮助快速泄放静电干扰</p><h4 id="PCB-Layout规则"><a href="#PCB-Layout规则" class="headerlink" title="PCB Layout规则"></a>PCB Layout规则</h4><ul><li>以差分式布线，参考面要连续，保证阻抗一致性</li><li>VBUS走线需要能承受1A的电流，以防止过流事件的发生</li><li>D+，D-走线必须等长，长度误差控制在5mil，并且不能走直角，需要钝角或圆弧走线，并且尽量不换层布线</li><li>与其他CLK或差分信号线之间的间距应该在20mil</li><li>保护器件与共模电感尽可能靠近接口</li><li>避免在晶振，晶体，时钟信号发生器周围布线</li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/">通信总线</category>
      
      
      <category domain="http://example.com/tags/I2C%E3%80%81SPI%E3%80%81UART%E3%80%81RS232%E3%80%81RS485%E3%80%81USB/">I2C、SPI、UART、RS232、RS485、USB</category>
      
      
    </item>
    
    <item>
      <title>HTML入门</title>
      <link>http://example.com/2023/02/10/Html/</link>
      <guid>http://example.com/2023/02/10/Html/</guid>
      <pubDate>Fri, 10 Feb 2023 14:07:08 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;HTML-结构层&quot;&gt;&lt;a href=&quot;#HTML-结构层&quot; class=&quot;headerlink&quot; title=&quot;HTML 结构层&quot;&gt;&lt;/a&gt;HTML 结构层&lt;/h1&gt;&lt;h2 id=&quot;基础标签&quot;&gt;&lt;a href=&quot;#基础标签&quot; class=&quot;headerlink&quot; title=&quot;基础标签&quot;&gt;&lt;/a&gt;基础标签&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;   //定义字符集&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;快速入门&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;   //设置页面标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;color&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;aqua&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;只因你太美&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;font&lt;/span&gt;&amp;gt;&lt;/span&gt;  //设置文字颜色，页面内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;   //一号标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      蔡徐坤的大只因 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;H2&lt;/span&gt;&amp;gt;&lt;/span&gt;   //二号标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      蔡徐坤第二大的只因&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;H2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      蔡徐坤的第三大只因&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h4&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      蔡徐坤的第四大只因&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h4&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;hr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;color&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;#00008b&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;face&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;楷体&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;size&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;只因你太美&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;font&lt;/span&gt;&amp;gt;&lt;/span&gt;  //字体颜色 字体格式 字体大小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;b&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;center&lt;/span&gt;&amp;gt;&lt;/span&gt;河大今日报&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;center&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;b&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;   //字体居中 加粗&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;“希望可以站在我们探索的起点上，不断奔向星辰大海。”&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;  //&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;P&lt;/span&gt;&amp;gt;&lt;/span&gt;段落 &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;I&lt;/span&gt;&amp;gt;&lt;/span&gt;斜体&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;u&lt;/span&gt;&amp;gt;&lt;/span&gt;近日，我国第四批预备航天员选拔工作正式启动。中国航天员，正期待着与你一起探索浩瀚宇宙、遇见别样风景、感受中国式浪漫。你有梦、就来闯，中国空间站等你来出差！&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;u&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;  //斜体，分段&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="HTML-结构层"><a href="#HTML-结构层" class="headerlink" title="HTML 结构层"></a>HTML 结构层</h1><h2 id="基础标签"><a href="#基础标签" class="headerlink" title="基础标签"></a>基础标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>   //定义字符集</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>快速入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span>   //设置页面标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;aqua&quot;</span>&gt;</span>只因你太美<span class="tag">&lt;/<span class="name">font</span>&gt;</span>  //设置文字颜色，页面内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>   //一号标题</span><br><span class="line">      蔡徐坤的大只因 </span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">H2</span>&gt;</span>   //二号标题</span><br><span class="line">      蔡徐坤第二大的只因</span><br><span class="line">  <span class="tag">&lt;/<span class="name">H2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">      蔡徐坤的第三大只因</span><br><span class="line">  <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">      蔡徐坤的第四大只因</span><br><span class="line">  <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#00008b&quot;</span> <span class="attr">face</span>=<span class="string">&quot;楷体&quot;</span> <span class="attr">size</span>=<span class="string">&quot;5&quot;</span>&gt;</span>只因你太美<span class="tag">&lt;/<span class="name">font</span>&gt;</span>  //字体颜色 字体格式 字体大小</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>河大今日报<span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>   //字体居中 加粗</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>“希望可以站在我们探索的起点上，不断奔向星辰大海。”<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  //<span class="tag">&lt;<span class="name">P</span>&gt;</span>段落 <span class="tag">&lt;<span class="name">I</span>&gt;</span>斜体</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">u</span>&gt;</span>近日，我国第四批预备航天员选拔工作正式启动。中国航天员，正期待着与你一起探索浩瀚宇宙、遇见别样风景、感受中国式浪漫。你有梦、就来闯，中国空间站等你来出差！<span class="tag">&lt;/<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  //斜体，分段</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="图片，视频，音频标签"><a href="#图片，视频，音频标签" class="headerlink" title="图片，视频，音频标签"></a>图片，视频，音频标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;a.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>图片标签 ：</strong></p><p>**SRC： URL路径 **</p><p><strong>width：宽</strong></p><p><strong>height：高</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;b.mp3&quot;</span> <span class="attr">controls</span> = <span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Controls：音频播放控制器</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;c.mp4&quot;</span> <span class="attr">controls</span> = <span class="string">&quot;controls&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Controls：视频播放控制器</strong></p><hr><p><strong>URL路径</strong></p><p><strong>相对路径：相对Html文件的位置关系</strong></p><p><strong>.&#x2F;表示当前目录下</strong></p><p><strong>..&#x2F;表示上一级目录</strong></p><p><strong>当两个文件如：html&#x2F;img&#x2F;111.img</strong></p><p><strong>第二个文件为 ：html&#x2F;audio&#x2F;222.mp4</strong></p><p><strong>因为img与audio平级</strong></p><p><strong>所以需要..&#x2F;返回上一级目录再找到audio，222.MP4</strong></p><p><strong>即..&#x2F;audio&#x2F;222.MP4</strong></p><p>绝对路径：完整路径</p><h2 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>点我去B站<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">     //跳转的URL路径                   // _Self即为在当前页面跳转超链接</span><br></pre></td></tr></table></figure><h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span> //ol为有序列表，ul为无序列表</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>鸡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>太<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>美<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span>&gt;</span>  //设置分隔符，表格宽度</span><br><span class="line">     <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;centre&quot;</span>&gt;</span>   //设置表头内容居中</span><br><span class="line">设置列合并 <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspawn</span>=<span class="string">&quot;2&quot;</span>&gt;</span>鸡<span class="tag">&lt;/<span class="name">th</span>&gt;</span> //表头</span><br><span class="line">         <span class="tag">&lt;<span class="name">th</span>&gt;</span>你<span class="tag">&lt;/<span class="name">th</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">th</span>&gt;</span>太<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">th</span>&gt;</span>美<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>   //设置表格内容居中</span><br><span class="line">设置行合并 <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspawn</span>=<span class="string">&quot;2&quot;</span>&gt;</span>你知道<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  //表格</span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>我家哥哥<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>有<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>多努力吗<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>列扩展为将</p><h2 id="布局标签"><a href="#布局标签" class="headerlink" title="布局标签"></a>布局标签</h2><div>    块级标签，占一整行<p><span>  行内标签，占包裹内容de</span></p><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><p>action属性：指定表单数据提交的URL，表单项要想提交数据必须指定name属性</p><p>method属性：指定表单提交方式，get或post方式</p><p><strong>(默认值)get：请求参数会拼接在URL后面，长度有限制，仅支持4KB</strong></p><p><strong>post：请求参数会在请求协议的请求体中,长度无限制</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;userPassword&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;userSex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;userSex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        //选择框名字要保证一致，才能互斥，或者多选</span><br><span class="line">        //记得选择框要给一个value值，改变上传至服务器的值</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;userHobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;旅游&quot;</span>&gt;</span>旅游<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;userHobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;电影&quot;</span>&gt;</span>电影<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;userHobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;游戏&quot;</span>&gt;</span>游戏<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>上传个人证件<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;userInformation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我提交所有内容&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>type取值类型：</p><p>text：任意文本内容</p><p>password：密码内容</p><p>radio：单选选项</p><p>checkBox：复选选项，可以同时选择多个</p><p>file；上传文件</p><p>hidden：隐藏数据输入</p><p>submit：提交按钮</p><p>reset：重置按钮</p><p>button：点击按钮</p><h2 id="表单项标签"><a href="#表单项标签" class="headerlink" title="表单项标签"></a>表单项标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span> //选项</span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;个人简介&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Select下拉列表</p><p>textarea文本框</p></div>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/JavaWeb/">JavaWeb</category>
      
      
      
    </item>
    
    <item>
      <title>JS入门</title>
      <link>http://example.com/2023/02/10/JavaScript/</link>
      <guid>http://example.com/2023/02/10/JavaScript/</guid>
      <pubDate>Fri, 10 Feb 2023 14:07:08 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h1&gt;&lt;h2 id=&quot;内部脚本&quot;&gt;&lt;a href=&quot;#内部脚本&quot; class=&quot;headerlink&quot; title=&quot;内部脚本&quot;&gt;&lt;/a&gt;内部脚本&lt;/h2&gt;&lt;p&gt;Script可以放置于任意地方，数量无限制，一般情况都会放到BODY标签底部，改善显示速度&lt;/p&gt;
&lt;h2 id=&quot;外部脚本&quot;&gt;&lt;a href=&quot;#外部脚本&quot; class=&quot;headerlink&quot; title=&quot;外部脚本&quot;&gt;&lt;/a&gt;外部脚本&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;../DemoJs/HelloJs.js&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt; //一定要外闭合&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;SRC为JS文件URL路径，&lt;/p&gt;
&lt;h2 id=&quot;书写语法&quot;&gt;&lt;a href=&quot;#书写语法&quot; class=&quot;headerlink&quot; title=&quot;书写语法&quot;&gt;&lt;/a&gt;书写语法&lt;/h2&gt;&lt;p&gt;每行结尾分号可有可无&lt;/p&gt;
&lt;h3 id=&quot;输出语句：&quot;&gt;&lt;a href=&quot;#输出语句：&quot; class=&quot;headerlink&quot; title=&quot;输出语句：&quot;&gt;&lt;/a&gt;输出语句：&lt;/h3&gt;&lt;p&gt;alert：写入警告框&lt;/p&gt;
&lt;p&gt;write：写入HTML&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;123333&amp;quot;&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;//弹出警告&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;HelloJs&amp;quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//写入HTML页面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Hello,JS2&amp;quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//写入浏览器控制台&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h3&gt;&lt;p&gt;弱类型的值，可以存放任意数据的值，仅需要使用var声明一下&lt;/p&gt;
&lt;p&gt;var text &amp;#x3D; 20；&lt;/p&gt;
&lt;p&gt;text&amp;#x3D; “张三”&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; test= &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;alert&lt;/span&gt;(test);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; test = &lt;span class=&quot;string&quot;&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;alert&lt;/span&gt;(test)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Var定义的变量相当于全局变量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;变量可以重复定义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let定义的变量相当于局部变量，且变量不可以重复定义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;console定义的变量相当于常量，定义后不能被改变&lt;/strong&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="内部脚本"><a href="#内部脚本" class="headerlink" title="内部脚本"></a>内部脚本</h2><p>Script可以放置于任意地方，数量无限制，一般情况都会放到BODY标签底部，改善显示速度</p><h2 id="外部脚本"><a href="#外部脚本" class="headerlink" title="外部脚本"></a>外部脚本</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../DemoJs/HelloJs.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> //一定要外闭合</span><br></pre></td></tr></table></figure><p>SRC为JS文件URL路径，</p><h2 id="书写语法"><a href="#书写语法" class="headerlink" title="书写语法"></a>书写语法</h2><p>每行结尾分号可有可无</p><h3 id="输出语句："><a href="#输出语句：" class="headerlink" title="输出语句："></a>输出语句：</h3><p>alert：写入警告框</p><p>write：写入HTML</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;123333&quot;</span>)  <span class="comment">//弹出警告</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;HelloJs&quot;</span>) <span class="comment">//写入HTML页面</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello,JS2&quot;</span>) <span class="comment">//写入浏览器控制台</span></span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>弱类型的值，可以存放任意数据的值，仅需要使用var声明一下</p><p>var text &#x3D; 20；</p><p>text&#x3D; “张三”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test= <span class="number">20</span>;</span><br><span class="line"><span class="title function_">alert</span>(test);</span><br><span class="line"><span class="keyword">var</span> test = <span class="string">&quot;张三&quot;</span></span><br><span class="line"><span class="title function_">alert</span>(test)</span><br></pre></td></tr></table></figure><p><strong>Var定义的变量相当于全局变量</strong></p><p><strong>变量可以重复定义</strong></p><p><strong>Let定义的变量相当于局部变量，且变量不可以重复定义</strong></p><p><strong>console定义的变量相当于常量，定义后不能被改变</strong></p><span id="more"></span><p>数据类型</p><p>5种原始类型，1种引用类型</p><p>原始类型：</p><p>number：注意NaN与任何数相加结果仍为NaN</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test= <span class="number">20</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> test);  <span class="comment">//结果为number</span></span><br></pre></td></tr></table></figure><p>string</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test= <span class="string">&quot;北京&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> test);  <span class="comment">//结果为string</span></span><br></pre></td></tr></table></figure><p>boolean</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test= <span class="literal">true</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> test);  <span class="comment">//结果为boolean</span></span><br></pre></td></tr></table></figure><p>null</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test= <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> test); <span class="comment">//结果为object，是一个javascript长期存在的错误</span></span><br></pre></td></tr></table></figure><p>undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> test); <span class="comment">//结果为undefined类型</span></span><br></pre></td></tr></table></figure><p><strong>在JS中，进行比较时，会先进行类型转换，再去比较对应的值</strong></p><p><strong>”&#x3D;&#x3D;&#x3D;“全等于不会进行类型转换</strong></p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>字符串转换为数字，若字面不是数值，则转换成NAN</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = +<span class="string">&quot;40&quot;</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> str)</span><br></pre></td></tr></table></figure><p>BOOLEAN类型转数字，TRUE转为1，False转为0</p><p>其他类型转BOOLEAN类型</p><p>NUMBER：0或NaN转换为false，其余数字转为true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;40&quot;</span></span><br><span class="line"><span class="keyword">if</span>(str)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;转换为true&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;转换为false&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>String：空字符串转换为false，其余的转换为true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="keyword">if</span>(str)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;转换为true&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;转换为false&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Null：转换为false</p><p>Undefined：转换为false</p><h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><p>Function 方法名（方法参数）{</p><p>}</p><p>JS中不需要定义返回参数类型，形参也不需要定义类型</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="基本对象"><a href="#基本对象" class="headerlink" title="基本对象"></a>基本对象</h3><p>Array：</p><p>Var 变量名 &#x3D; new Array（元素列表）；</p><p>Var 变量名 &#x3D; [ 元素列表 ]  注意为中括号</p><p>数组访问与JAVA一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="title function_">alert</span>(arr)</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="title function_">alert</span>(arr2)</span><br><span class="line"><span class="title function_">alert</span>(arr2[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>特殊点：JS中的数组是变长变类型的，即既可以存整数，也可以存字符串</p><p>增加元素 .Push</p><p>删除元素 .splice（Strat number，删除元素数量）</p><p>字符串</p><p>trim（）去除字符串两端空白字符</p><p><strong>自定义对象</strong></p><p>var 对象名称 &#x3D; {</p><p>属性名称：属性值，</p><p>属性名称：属性值，</p><p>函数名称：function（）{</p><p>}</p><p>}</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">23</span>,</span><br><span class="line">    <span class="attr">EAT</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;干饭&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(person.<span class="property">name</span>)</span><br><span class="line"><span class="title function_">alert</span>(person.<span class="property">age</span>)</span><br><span class="line">person.<span class="title function_">EAT</span>()</span><br></pre></td></tr></table></figure><h3 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h3><p><strong>Window对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;你是男的吗&quot;</span>)</span><br></pre></td></tr></table></figure><p>带有确认和取消的对话框，带有返回值，返回true或false</p><p><strong>定时器</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="title function_">alert</span>(<span class="string">&quot;干饭&quot;</span>)&#125;,<span class="number">2000</span>)</span><br><span class="line">               <span class="keyword">function</span>方法            时间以毫秒为单位</span><br></pre></td></tr></table></figure><p>setTimeOut不会循环执行</p><p><strong>History对象</strong></p><p>访问Window.history.方法();</p><p>BACK 后退</p><p>FORWARD  前进</p><p><strong>Location对象</strong></p><p>Window.location；</p><p>href获取或设置当前地址栏的URL</p><p>location.href &#x3D; …..</p><h3 id="Dom对象"><a href="#Dom对象" class="headerlink" title="Dom对象"></a>Dom对象</h3><p>获取Element对象</p><p>1.getElementById 返回一个Element对象</p><p>2.getElementByTagName 返回一个Element类型数组</p><p>3.getElementByName 返回一个Element类型数组</p><p>4.getElementByClassName 返回一个Element类型数组</p><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我提交所有内容&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">         <span class="title function_">alert</span>(<span class="string">&quot;表单已提交&quot;</span>)</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>事件绑定 </p><p>onblur  元素失去焦点</p><p>onfocus 元素获得焦点</p><p>onclick 点击事件</p><p>onkeydown 某个按键被按下</p><p>onmouserover鼠标移到某个元素</p><p>onmouseout鼠标移出某个元素</p><p><strong>onsubmit    submit按键被按下</strong></p><p> .onsubmit &#x3D; funciton (){</p><p>return false；表单不会被提交，return true 表单会被提交</p><p>}</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/JavaWeb/">JavaWeb</category>
      
      
      
    </item>
    
    <item>
      <title>Servlet入门</title>
      <link>http://example.com/2023/02/10/Servelet/</link>
      <guid>http://example.com/2023/02/10/Servelet/</guid>
      <pubDate>Fri, 10 Feb 2023 14:07:08 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Servlet&quot;&gt;&lt;a href=&quot;#Servlet&quot; class=&quot;headerlink&quot; title=&quot;Servlet&quot;&gt;&lt;/a&gt;Servlet&lt;/h1&gt;&lt;h2 id=&quot;快速入门&quot;&gt;&lt;a href=&quot;#快速入门&quot; class=&quot;headerlink&quot; title=&quot;快速入门&quot;&gt;&lt;/a&gt;快速入门&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;导入Javax.servelet依赖坐标&lt;/li&gt;
&lt;li&gt;创建一个类，实现servelet接口，并重写接口中的所有方法&lt;/li&gt;
&lt;li&gt;将类中加入webservlet注释，给定url路径&lt;/li&gt;
&lt;li&gt;启动tomcat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2023/02/10/Servelet/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221108090251260.png&quot; alt=&quot;image-20221108090251260&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;生命周期&quot;&gt;&lt;a href=&quot;#生命周期&quot; class=&quot;headerlink&quot; title=&quot;生命周期&quot;&gt;&lt;/a&gt;生命周期&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;当第一次被访问时，由web服务器创建servlat对象，当loadonstartup&amp;gt;&amp;#x3D;0时，则在服务器启动时就会创建Servlet对象&lt;/li&gt;
&lt;li&gt;被创建后，用init（）方法初始化servlat对象，如完成一些加载配置，创建链接等初始化工作。该方法只能调用一次&lt;/li&gt;
&lt;li&gt;每次请求servlet时，web服务器都会调用service方法对请求进行处理&lt;/li&gt;
&lt;li&gt;当需要释放内存或关闭服务器时，servlet对象会被销毁，web服务器会调用destory方法完成资源的回收，该方法也只能调用一次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;扩大局部变量作用域方法：创建一个成员变量，用this.name &amp;#x3D; name;将局部变量的值赋给成员变量，再由其他方法调用&lt;/p&gt;
&lt;h2 id=&quot;UrlPattern&quot;&gt;&lt;a href=&quot;#UrlPattern&quot; class=&quot;headerlink&quot; title=&quot;UrlPattern&quot;&gt;&lt;/a&gt;UrlPattern&lt;/h2&gt;&lt;p&gt;多个访问路径的配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;精确匹配    urlPatterns &amp;#x3D; {“&amp;#x2F;demo1”,”&amp;#x2F;demo2”}&lt;/li&gt;
&lt;li&gt;目录匹配    urlPatterns &amp;#x3D; {“&amp;#x2F;user&amp;#x2F;*”}  代表user目录下的任意路径&lt;/li&gt;
&lt;li&gt;扩展名匹配  urlPatterns &amp;#x3D; {“&amp;#x2F;*.do”}     代表扩展名为do的任意路径&lt;/li&gt;
&lt;li&gt;任意匹配    urlPatterns &amp;#x3D; {“&amp;#x2F;*”} 代表任意路径&lt;/li&gt;
&lt;li&gt;当一个路径同时满足多个匹配时，精确匹配优先级最高&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ul><li>导入Javax.servelet依赖坐标</li><li>创建一个类，实现servelet接口，并重写接口中的所有方法</li><li>将类中加入webservlet注释，给定url路径</li><li>启动tomcat</li></ul><p><img src="/2023/02/10/Servelet/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221108090251260.png" alt="image-20221108090251260"></p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul><li>当第一次被访问时，由web服务器创建servlat对象，当loadonstartup&gt;&#x3D;0时，则在服务器启动时就会创建Servlet对象</li><li>被创建后，用init（）方法初始化servlat对象，如完成一些加载配置，创建链接等初始化工作。该方法只能调用一次</li><li>每次请求servlet时，web服务器都会调用service方法对请求进行处理</li><li>当需要释放内存或关闭服务器时，servlet对象会被销毁，web服务器会调用destory方法完成资源的回收，该方法也只能调用一次</li></ul><p>扩大局部变量作用域方法：创建一个成员变量，用this.name &#x3D; name;将局部变量的值赋给成员变量，再由其他方法调用</p><h2 id="UrlPattern"><a href="#UrlPattern" class="headerlink" title="UrlPattern"></a>UrlPattern</h2><p>多个访问路径的配置</p><ul><li>精确匹配    urlPatterns &#x3D; {“&#x2F;demo1”,”&#x2F;demo2”}</li><li>目录匹配    urlPatterns &#x3D; {“&#x2F;user&#x2F;*”}  代表user目录下的任意路径</li><li>扩展名匹配  urlPatterns &#x3D; {“&#x2F;*.do”}     代表扩展名为do的任意路径</li><li>任意匹配    urlPatterns &#x3D; {“&#x2F;*”} 代表任意路径</li><li>当一个路径同时满足多个匹配时，精确匹配优先级最高</li></ul><span id="more"></span><h2 id="XML配置"><a href="#XML配置" class="headerlink" title="XML配置"></a>XML配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> //servlet文件名</span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.jdc.test.ServletDemo2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> /servlet全类名路径</span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> //与上方设置的文件名相同</span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> //设置url路径</span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Request和Response"><a href="#Request和Response" class="headerlink" title="Request和Response"></a>Request和Response</h2><ul><li><strong>request对象负责接收客户端发出的请求数据</strong></li><li><strong>response对象负责发送服务端产生的数据</strong></li></ul><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><p>获取三种不同位置的数据</p><ul><li>请求行</li></ul><ol><li>getMethod（）：获取请求方式</li><li>getContextPath（）：获取虚拟目录</li><li>getRequestURL（）：获取url</li><li>getRequestURI（）：获取URI</li><li>getQueryString（）：获取请求参数</li></ol><ul><li>请求头</li></ul><ol><li>getHeader():获取请求头的数据</li></ol><ul><li>请求体</li></ul><ol><li>BufferedReader    getReader():获取字符输入流数据</li><li>ServletInputString  getInputStream():获取字节输入流数据</li></ol><hr><p><strong>针对get，post方法获取参数的通用方法</strong></p><ul><li>getParameterMap():获取所有参数的map集合</li><li>getParameterValues():获取特定参数的值的数据集合</li><li>getParameterNames():获取map集合中的所有键，返回的是枚举</li><li>getParameter():根据键获取单个参数值</li></ul><p><img src="/2023/02/10/Servelet/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221108111849643.png" alt="image-20221108111849643"></p><h4 id="请求中文乱码解决"><a href="#请求中文乱码解决" class="headerlink" title="请求中文乱码解决"></a>请求中文乱码解决</h4><p>设置响应头的contenttype，将charset设置为UTF-8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp.setHeader(<span class="string">&quot;content-type&quot;</span>,<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="请求转发（forward）"><a href="#请求转发（forward）" class="headerlink" title="请求转发（forward）"></a>请求转发（forward）</h4><p>一种在服务器内部资源跳转的形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getRequestDispatcher(<span class="string">&quot;要跳转的url路径&quot;</span>).forward(req,resp);</span><br></pre></td></tr></table></figure><p>跳转资源共享的三种语句</p><table><thead><tr><th>返回值类型</th><th>语句</th><th>作用</th></tr></thead><tbody><tr><td>void</td><td>setAttribute(String string,Object o)</td><td>为request域中添加变量</td></tr><tr><td>Object</td><td>getAttribute(String string)</td><td>根据string值获取request域中的变量</td></tr><tr><td>void</td><td>removeAttribute(String string)</td><td>根据string值移除request域中的键值对</td></tr></tbody></table><p>转发特点</p><ul><li>客户端路径不发生变化</li><li>只能在服务器内部转发资源</li><li>转发是一次请求，可以在转发过程中用request共享数据</li></ul><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><p>响应行</p><ul><li>void    setStatus（int sc）：设置响应状态码</li></ul><p>响应头</p><ul><li>void   setHeader(键，值)：设置响应头</li></ul><p>响应体</p><ul><li>PrintWriter   getWriter()：获取字符输出流</li><li>ServletOutPutStream     getOutPutStream（）：获取字节输出流</li></ul><h4 id="重定向（redirect）"><a href="#重定向（redirect）" class="headerlink" title="重定向（redirect）"></a>重定向（redirect）</h4><p>一种资源跳转的方式：将处理不了的资源转给别的服务器处理，将状态码（302）以及对应服务器位置（响应头）返还给客户端，告诉客户端去找别的服务器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp.sendRedirect(<span class="string">&quot;B服务器路径&quot;</span>) <span class="comment">//B服务器路径要加虚拟路径名称</span></span><br></pre></td></tr></table></figure><p>三个特点：与请求的forward特点相反</p><ul><li>浏览器地址栏发生变化</li><li>可以重定向到任意资源</li><li>发送了两次请求，不能共享数据</li></ul><h2 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h2><p>判定条件：明确路径的使用对象</p><ul><li>浏览器使用：需要虚拟路径</li><li>服务器使用：不需要虚拟路径</li></ul><h2 id="字节输出流与输入流对拷"><a href="#字节输出流与输入流对拷" class="headerlink" title="字节输出流与输入流对拷"></a>字节输出流与输入流对拷</h2><p>导入commons-io依赖坐标</p><p>其中IOUtills中的copy方法即可完成</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/JavaWeb/">JavaWeb</category>
      
      
      
    </item>
    
    <item>
      <title>PCB常用规则</title>
      <link>http://example.com/2023/02/10/PCB%20Layout/</link>
      <guid>http://example.com/2023/02/10/PCB%20Layout/</guid>
      <pubDate>Fri, 10 Feb 2023 14:07:08 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;PCB&quot;&gt;&lt;a href=&quot;#PCB&quot; class=&quot;headerlink&quot; title=&quot;PCB&quot;&gt;&lt;/a&gt;PCB&lt;/h1&gt;&lt;h2 id=&quot;PCB模块化设计&quot;&gt;&lt;a href=&quot;#PCB模块化设计&quot; class=&quot;headerlink&quot; title=&quot;PCB模块化设计&quot;&gt;&lt;/a&gt;PCB模块化设计&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2023/02/10/PCB%20Layout/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230226171410492.png&quot; alt=&quot;image-20230226171410492&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU等放到中间&lt;/li&gt;
&lt;li&gt;电源置于左侧&lt;/li&gt;
&lt;li&gt;上下为接口&lt;/li&gt;
&lt;li&gt;右侧为继电器和蜂鸣器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;布局原则&quot;&gt;&lt;a href=&quot;#布局原则&quot; class=&quot;headerlink&quot; title=&quot;布局原则&quot;&gt;&lt;/a&gt;布局原则&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;先大后小，先难后易，重要的&lt;strong&gt;单元电路&lt;/strong&gt;，&lt;strong&gt;核心元器件&lt;/strong&gt;应该优先进行布局。如MCU&lt;/li&gt;
&lt;li&gt;去耦电容应该尽量靠近IC芯片的电源管脚附近，并使电源与地之间的回路尽可能减小，防止干扰&lt;/li&gt;
&lt;li&gt;相同的结构电路部分尽量使用对称布局&lt;/li&gt;
&lt;li&gt;同一类型的插装元件在X或Y方向上应该尽量朝同一个方向布置，同一种类型的有极性元器件也要力争在X或Y方向上保持一致（尽量让正极都朝上或朝下）&lt;/li&gt;
&lt;li&gt;发热元件应均匀分布，保证散热，但除温度检测元件以外的温度敏感元件应远离发热元件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高电压大电流信号&lt;/strong&gt;与&lt;strong&gt;低电压小电流信号&lt;/strong&gt;应完全分开，&lt;strong&gt;模拟信号&lt;/strong&gt;与&lt;strong&gt;数字信号&lt;/strong&gt;分开，&lt;strong&gt;高频信号&lt;/strong&gt;与&lt;strong&gt;低频信号&lt;/strong&gt;分开，&lt;strong&gt;高频元器件之间的间隔要充分&lt;/strong&gt;，使用同一电源的器件尽量安排在同一区域，以便于将来的电源分隔&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h1><h2 id="PCB模块化设计"><a href="#PCB模块化设计" class="headerlink" title="PCB模块化设计"></a>PCB模块化设计</h2><p><img src="/2023/02/10/PCB%20Layout/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230226171410492.png" alt="image-20230226171410492"></p><ul><li>CPU等放到中间</li><li>电源置于左侧</li><li>上下为接口</li><li>右侧为继电器和蜂鸣器</li></ul><h2 id="布局原则"><a href="#布局原则" class="headerlink" title="布局原则"></a>布局原则</h2><ul><li>先大后小，先难后易，重要的<strong>单元电路</strong>，<strong>核心元器件</strong>应该优先进行布局。如MCU</li><li>去耦电容应该尽量靠近IC芯片的电源管脚附近，并使电源与地之间的回路尽可能减小，防止干扰</li><li>相同的结构电路部分尽量使用对称布局</li><li>同一类型的插装元件在X或Y方向上应该尽量朝同一个方向布置，同一种类型的有极性元器件也要力争在X或Y方向上保持一致（尽量让正极都朝上或朝下）</li><li>发热元件应均匀分布，保证散热，但除温度检测元件以外的温度敏感元件应远离发热元件</li><li><strong>高电压大电流信号</strong>与<strong>低电压小电流信号</strong>应完全分开，<strong>模拟信号</strong>与<strong>数字信号</strong>分开，<strong>高频信号</strong>与<strong>低频信号</strong>分开，<strong>高频元器件之间的间隔要充分</strong>，使用同一电源的器件尽量安排在同一区域，以便于将来的电源分隔</li></ul><span id="more"></span><h3 id="布线规则"><a href="#布线规则" class="headerlink" title="布线规则"></a>布线规则</h3><p>线宽规则：地线＞电源线线＞信号线</p><p>一般来说地线与电源线都分层铺铜处理</p><p>放置时，应遵循沿信号流向布线的原则，避免环绕</p><ul><li>3W原则：尽量保证平行线之间的间距大于三倍线宽</li><li>20H规则：电源层与底层之间电场是会变化的，会向外发出辐射，简称边缘效应，将电源层内缩，使电场只在接地层范围内传导，距离尽量大于20H（电源层与接地层之间的介质厚度）</li><li>5-5规则：当频率大于5Mhz或脉冲上升时间小于5ns时，要使用多层板</li><li>信号线与其回路形成的面积要尽可能小</li><li>消除串扰：保证3W原则，或在平行线中插入接地的隔离线，减小布线层与地平面的距离</li><li>对于高频信号，要将其用地线包裹</li><li>相邻层走线方向要正交控制，即相邻层走线互相垂直</li><li>不允许出现浮空多余的走线</li><li>同一网络的走线宽度应该保持一致，避免出现阻抗不匹配现象，产生反射</li><li>防止信号线出线闭环</li><li>走线尽可能的短</li><li>走线避免出现锐角或直角</li><li>要添加必要的去耦电容，电源与器件连接时中间要加入滤波，旁路，去耦电容尽可能靠近电源</li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/PCB-Layout/">PCB Layout</category>
      
      
      
    </item>
    
    <item>
      <title>数电笔记</title>
      <link>http://example.com/2023/02/10/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/</link>
      <guid>http://example.com/2023/02/10/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/</guid>
      <pubDate>Fri, 10 Feb 2023 14:07:08 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;数电&quot;&gt;&lt;a href=&quot;#数电&quot; class=&quot;headerlink&quot; title=&quot;数电&quot;&gt;&lt;/a&gt;数电&lt;/h1&gt;&lt;h2 id=&quot;码制&quot;&gt;&lt;a href=&quot;#码制&quot; class=&quot;headerlink&quot; title=&quot;码制&quot;&gt;&lt;/a&gt;码制&lt;/h2&gt;&lt;p&gt;二进制：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为了解决二进制表示0时会有两组二进制数的问题引入补码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/02/10/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230226225432200.png&quot; alt=&quot;image-20230226225432200&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;正数的补码与原码相同&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;负数的补码等于数值位每一位取反加一&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2023/02/10/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230226230332992.png&quot; alt=&quot;image-20230226230332992&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果要进行数值位扩展，用8位二进制码表示5，正数加0，负数加1&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="数电"><a href="#数电" class="headerlink" title="数电"></a>数电</h1><h2 id="码制"><a href="#码制" class="headerlink" title="码制"></a>码制</h2><p>二进制：</p><p><strong>为了解决二进制表示0时会有两组二进制数的问题引入补码</strong></p><p><img src="/2023/02/10/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230226225432200.png" alt="image-20230226225432200"></p><ul><li><strong>正数的补码与原码相同</strong></li><li><strong>负数的补码等于数值位每一位取反加一</strong></li></ul><p><img src="/2023/02/10/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230226230332992.png" alt="image-20230226230332992"></p><p>如果要进行数值位扩展，用8位二进制码表示5，正数加0，负数加1</p><span id="more"></span><h2 id="卡诺图"><a href="#卡诺图" class="headerlink" title="卡诺图"></a>卡诺图</h2><h2 id="CMOS与TTL门电路"><a href="#CMOS与TTL门电路" class="headerlink" title="CMOS与TTL门电路"></a>CMOS与TTL门电路</h2><h3 id="CMOS"><a href="#CMOS" class="headerlink" title="CMOS"></a>CMOS</h3><h3 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h3><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><h3 id="JK触发器"><a href="#JK触发器" class="headerlink" title="JK触发器"></a>JK触发器</h3><h3 id="D触发器"><a href="#D触发器" class="headerlink" title="D触发器"></a>D触发器</h3><h3 id="RS触发器"><a href="#RS触发器" class="headerlink" title="RS触发器"></a>RS触发器</h3><h2 id="计数器集成芯片"><a href="#计数器集成芯片" class="headerlink" title="计数器集成芯片"></a>计数器集成芯片</h2><h3 id="74138译码器"><a href="#74138译码器" class="headerlink" title="74138译码器"></a>74138译码器</h3><h3 id="74151数据选择器"><a href="#74151数据选择器" class="headerlink" title="74151数据选择器"></a>74151数据选择器</h3><h3 id="74160与74161计数器"><a href="#74160与74161计数器" class="headerlink" title="74160与74161计数器"></a>74160与74161计数器</h3><h2 id="振荡器"><a href="#振荡器" class="headerlink" title="振荡器"></a>振荡器</h2><h3 id="施密特触发器"><a href="#施密特触发器" class="headerlink" title="施密特触发器"></a>施密特触发器</h3><h3 id="多谐触发器"><a href="#多谐触发器" class="headerlink" title="多谐触发器"></a>多谐触发器</h3><h3 id="单稳态触发器"><a href="#单稳态触发器" class="headerlink" title="单稳态触发器"></a>单稳态触发器</h3>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/">数字电子电路</category>
      
      
      
    </item>
    
    <item>
      <title>单片机笔记</title>
      <link>http://example.com/2023/02/10/%E5%8D%95%E7%89%87%E6%9C%BA/</link>
      <guid>http://example.com/2023/02/10/%E5%8D%95%E7%89%87%E6%9C%BA/</guid>
      <pubDate>Fri, 10 Feb 2023 14:07:08 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;单片机&quot;&gt;&lt;a href=&quot;#单片机&quot; class=&quot;headerlink&quot; title=&quot;单片机&quot;&gt;&lt;/a&gt;单片机&lt;/h1&gt;&lt;p&gt;RAM：随机存储器，一般被称作运行内存，读取速度快，下电后数据不保留&lt;/p&gt;
&lt;p&gt;ROM：只读存储器，与RAM不同，不同于软盘与光盘，不易损坏，且存储容量较大，断电不丢失数据&lt;/p&gt;
&lt;h2 id=&quot;AT89S51&quot;&gt;&lt;a href=&quot;#AT89S51&quot; class=&quot;headerlink&quot; title=&quot;AT89S51&quot;&gt;&lt;/a&gt;AT89S51&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;8位微处理器：包括运算器与控制器，有位处理器&lt;/li&gt;
&lt;li&gt;数据存储器（128B RAM）：最多可扩至64KB，片内RAM为高速RAM&lt;/li&gt;
&lt;li&gt;程序存储器（4KB FLASH ROM）:最多可扩展至64KB&lt;/li&gt;
&lt;li&gt;4个8位IO口&lt;/li&gt;
&lt;li&gt;全双工异步串口：4种工作方式&lt;/li&gt;
&lt;li&gt;2个16位定时器&amp;#x2F;计数器：有4种工作方式&lt;/li&gt;
&lt;li&gt;1个看门狗定时器：计数器，检测系统是否跑飞或者死循环，对系统发出复位信号，使系统复位&lt;/li&gt;
&lt;li&gt;中断系统：5个中断源，5个中断向量（中断服务程序的入口）,2级中断优先级&lt;/li&gt;
&lt;li&gt;特殊功能寄存器SFR 26个：控制寄存器和状态寄存器，映射在片内RAM区80H~FFH之内&lt;/li&gt;
&lt;li&gt;低功耗的空闲模式和掉电模式&lt;/li&gt;
&lt;li&gt;3个程序加密位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相比于89C51，89S51最显著的优点是有一个ISP（在线可编程功能）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/02/10/%E5%8D%95%E7%89%87%E6%9C%BA/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230315103444131.png&quot; alt=&quot;image-20230315103444131&quot;&gt;&lt;/p&gt;
&lt;p&gt;40个引脚各个功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电源引脚：Vcc（5V电源），Vss（数字地）&lt;/li&gt;
&lt;li&gt;时钟引脚：XTAL1（输入源，使用片内震荡源时外接石英晶体，电容，使用外部震荡源时，该引脚悬空），XTAL2（片内震荡源反相放大器输出源）&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;控制引脚&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;RST&lt;/td&gt;
&lt;td&gt;复位信号输入，复位时必须加两个机器周期的高电平，正常时应该为TTL低电平&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EA*&lt;/td&gt;
&lt;td&gt;EA&amp;#x3D;1时，决定程序访问的ROM，PC值小于0FFFH时访问片内的FLASH，大于0FFFH时访问片外FLASH；EA&amp;#x3D;0时，只访问片外FLASH，地址为0000H~FFFFH，一般默认接高电平&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ALE&lt;/td&gt;
&lt;td&gt;访问外部存储器提供的低八位地址锁存信号，将低8位地址锁存在片外地址锁存器中，运行时一直有时钟信号输出，位晶振频率的六分之一，可通过特殊功能寄存器禁止时钟信号输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PROG*&lt;/td&gt;
&lt;td&gt;对片内FLASH编程脉冲输入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PSEN*&lt;/td&gt;
&lt;td&gt;片外存储器读选通信号，低有效&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;IO口&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;P0&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;漏极开路（OD）的双向口&lt;/strong&gt;，可作为系统总线的低8位地址线与数据总线的分时复用口，也可作通用IO口，需要加上拉电阻，此时变为准双向口（没有高阻态），可负载8个低功耗型的TTL负载&lt;/td&gt;
&lt;td&gt;作为总线口输入输出时一定要先写1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1&lt;/td&gt;
&lt;td&gt;准双向口，内部含有上拉电阻，可驱动4个低功耗型TTL负载，其中P1.5&amp;#x2F;P1.6&amp;#x2F;P1.7是用于对FLASH存储器进行编程和校验的SPI总线，分别是MOSI(串行数据输入)，MISO(串行数据输出)，SCK（移位脉冲引脚）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2&lt;/td&gt;
&lt;td&gt;准双向口，内部有上拉电阻，可以作为系统总线的高8位地址总线使用&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P3&lt;/td&gt;
&lt;td&gt;准双向口，内部有上拉电阻&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;准双向口使用时要先写1&lt;/strong&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="单片机"><a href="#单片机" class="headerlink" title="单片机"></a>单片机</h1><p>RAM：随机存储器，一般被称作运行内存，读取速度快，下电后数据不保留</p><p>ROM：只读存储器，与RAM不同，不同于软盘与光盘，不易损坏，且存储容量较大，断电不丢失数据</p><h2 id="AT89S51"><a href="#AT89S51" class="headerlink" title="AT89S51"></a>AT89S51</h2><ul><li>8位微处理器：包括运算器与控制器，有位处理器</li><li>数据存储器（128B RAM）：最多可扩至64KB，片内RAM为高速RAM</li><li>程序存储器（4KB FLASH ROM）:最多可扩展至64KB</li><li>4个8位IO口</li><li>全双工异步串口：4种工作方式</li><li>2个16位定时器&#x2F;计数器：有4种工作方式</li><li>1个看门狗定时器：计数器，检测系统是否跑飞或者死循环，对系统发出复位信号，使系统复位</li><li>中断系统：5个中断源，5个中断向量（中断服务程序的入口）,2级中断优先级</li><li>特殊功能寄存器SFR 26个：控制寄存器和状态寄存器，映射在片内RAM区80H~FFH之内</li><li>低功耗的空闲模式和掉电模式</li><li>3个程序加密位</li></ul><p>相比于89C51，89S51最显著的优点是有一个ISP（在线可编程功能）</p><p><img src="/2023/02/10/%E5%8D%95%E7%89%87%E6%9C%BA/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230315103444131.png" alt="image-20230315103444131"></p><p>40个引脚各个功能：</p><ul><li>电源引脚：Vcc（5V电源），Vss（数字地）</li><li>时钟引脚：XTAL1（输入源，使用片内震荡源时外接石英晶体，电容，使用外部震荡源时，该引脚悬空），XTAL2（片内震荡源反相放大器输出源）</li></ul><table><thead><tr><th>控制引脚</th><th>功能</th></tr></thead><tbody><tr><td>RST</td><td>复位信号输入，复位时必须加两个机器周期的高电平，正常时应该为TTL低电平</td></tr><tr><td>EA*</td><td>EA&#x3D;1时，决定程序访问的ROM，PC值小于0FFFH时访问片内的FLASH，大于0FFFH时访问片外FLASH；EA&#x3D;0时，只访问片外FLASH，地址为0000H~FFFFH，一般默认接高电平</td></tr><tr><td>ALE</td><td>访问外部存储器提供的低八位地址锁存信号，将低8位地址锁存在片外地址锁存器中，运行时一直有时钟信号输出，位晶振频率的六分之一，可通过特殊功能寄存器禁止时钟信号输出</td></tr><tr><td>PROG*</td><td>对片内FLASH编程脉冲输入</td></tr><tr><td>PSEN*</td><td>片外存储器读选通信号，低有效</td></tr></tbody></table><table><thead><tr><th>IO口</th><th></th><th></th></tr></thead><tbody><tr><td>P0</td><td><strong>漏极开路（OD）的双向口</strong>，可作为系统总线的低8位地址线与数据总线的分时复用口，也可作通用IO口，需要加上拉电阻，此时变为准双向口（没有高阻态），可负载8个低功耗型的TTL负载</td><td>作为总线口输入输出时一定要先写1</td></tr><tr><td>P1</td><td>准双向口，内部含有上拉电阻，可驱动4个低功耗型TTL负载，其中P1.5&#x2F;P1.6&#x2F;P1.7是用于对FLASH存储器进行编程和校验的SPI总线，分别是MOSI(串行数据输入)，MISO(串行数据输出)，SCK（移位脉冲引脚）</td><td></td></tr><tr><td>P2</td><td>准双向口，内部有上拉电阻，可以作为系统总线的高8位地址总线使用</td><td></td></tr><tr><td>P3</td><td>准双向口，内部有上拉电阻</td><td></td></tr></tbody></table><p><strong>准双向口使用时要先写1</strong></p><span id="more"></span><p><strong>CPU</strong></p><ul><li>运算器：对操作数进行算术，逻辑和位操作运算</li></ul><p>组成：算术逻辑运算单元ALU，累加器A，位处理器，程序状态字寄存器PSW，以及两个暂存器</p><p><strong>ALU：可以对8位变量进行逻辑运算，算术运算</strong></p><p><strong>A：使用最频繁的寄存器，可作为ALU的输入数据源之一，也可当作运算结果的存放单元，大多数数据都通过A，数据中转站，为避免瓶颈阻塞，单片机提供了不经过累加器的指令</strong></p><p><strong>PSW：字节地址为DOH</strong></p><p><img src="/2023/02/10/%E5%8D%95%E7%89%87%E6%9C%BA/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230315111238235.png" alt="image-20230315111238235"></p><ol><li><strong>Cy：进位标志位，当有进位产生时为1，在位处理器时为，是累加器</strong></li><li><strong>Ac：辅助进位标志位，使用BCD码时，当低4位向高4位有进位时为1</strong></li><li><strong>F0：由用户使用的状态标志位，用指令使他置1或清0，控制程序流向</strong></li><li><strong>RS1，RS0：寄存器区选择位，分别用来选择4组不同的寄存器地址，（00H~1FH）</strong></li><li><strong>OV：溢出标志位</strong></li><li><strong>P：奇偶校验位，1表示累加器A中“1”的个数为奇数</strong></li></ol><ul><li>控制器</li></ul><ol><li>PC：程序计数器，是一个独立的16位计数器，用户不可访问，复位时PC位0000H，从程序存储器0000H开始读指令，取一个后自动加1，位宽决定能够访问的程序范围</li></ol><p><strong>存储器：哈佛结构，有各自的访问指令，分为4类</strong></p><ul><li>程序存储器(分为片内和片外两部分)：Flash Rom 最多为4KB，片外可扩至64KB</li></ul><p><strong>片内4KB FLASH，地址为0000H<del>0FFFH，16位地址总线，片外扩至64KB时，地址为0000H</del>FFFFH，有5个固定单元为中断源入口地址，分别为00003H~0023H，每个依次相隔8位，分别为外部中断0，定时器0，外部中断1，定时器1，串行口</strong></p><p><img src="/2023/02/10/%E5%8D%95%E7%89%87%E6%9C%BA/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230315112839522.png" alt="image-20230315112839522"></p><ul><li>数据存储器（分为片内片外两部分）：片内RAM最多为128B，片外可扩至64KB</li></ul><p><strong>程序存储器可扩展最大RAM由地址线决定，89S51地址线为16根，所以可扩展2的16次幂，即64KB，片内片外的低128B地址是相同的，但由于访问指令不同所以不冲突</strong></p><p><img src="/2023/02/10/%E5%8D%95%E7%89%87%E6%9C%BA/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230315115705939.png" alt="image-20230315115705939"></p><ul><li>特殊功能寄存器SFR：各功能部件的控制寄存器和状态寄存器</li></ul><p><strong>映射在片内80H~FFH，仅有字节地址末尾为8和0的特殊功能寄存器可以进行位寻址</strong></p><p><img src="/2023/02/10/%E5%8D%95%E7%89%87%E6%9C%BA/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230315115922552.png" alt="image-20230315115922552"></p><p><img src="/2023/02/10/%E5%8D%95%E7%89%87%E6%9C%BA/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230315122332406.png" alt="image-20230315122332406"></p><p><strong>堆栈指针SP：主要保护断点（保护跳转前程序指针）和现场保护（保护寄存器中的值），复位后默认为07H，使用时需要重新设置堆栈指针地址，一般设在片内RAM最上层</strong></p><p><strong>寄存器B：主要用于乘除法的数据存储，A*B时，高8位放入B寄存器，低8位放入A寄存器，除法时，商放入A寄存器，余数放入B寄存器</strong></p><p><strong>辅助寄存器AUXR：DISALE(ALE的禁止允许位，为0时允许)，DISRT0（控制看门狗是否在溢出情况下对系统进行复位，为0时允许复位），WDIDLE（单片机在空闲模式下看门狗是否计数，为0时允许计数）</strong></p><p><strong>数据指针DPTR0与DPTR1：DPTR0为89C51原有的数据指针，DPTR1为新增加的数据指针，AUXR1寄存器用于选择使用哪个数据指针，为0时使用DPTR0，数据指针也可以作为一个独立的16位寄存器使用，或两个8位的寄存器使用</strong></p><p><strong>辅助寄存器AUXR1：DPS用于选择使用哪个数据指针，地址为A2H</strong></p><p><strong>看门狗计数器WDT：14位计数器和看门狗定时器复位寄存器</strong></p><ul><li>位地址空间：211个可寻址位，128片内RAM，83位SFR区</li></ul><p>128位在RAM中20H~2FH单元中，每个单元为8位，一共128位，每一位可以置1清0，也可以进行8位的读或写</p><p>剩余的位在特殊功能寄存器中，一共有11个寄存器可供位寻址，一共88位，由5位未用</p><p><img src="/2023/02/10/%E5%8D%95%E7%89%87%E6%9C%BA/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230315104510770.png" alt="image-20230315104510770"></p><p><strong>串行IO口属于带锁存功能的特殊寄存器，字节地址分别为80H,90H,A0H,B0H</strong></p><h3 id="时钟电路与时序"><a href="#时钟电路与时序" class="headerlink" title="时钟电路与时序"></a>时钟电路与时序</h3><p>时钟电路产生必须的控制信号，严格按时执行指令，执行程序时，CPU首先取指令，然后译码，由时序电路产生的一系列控制信号完成规定的操作</p><p>时序信号分为两类</p><ul><li>对片内各个功能部件进行控制，用户无需了解</li><li><strong>对片外存储器或I&#x2F;O的控制</strong></li></ul><p><strong>时钟频率直接影响单片机运行速度</strong></p><p>分为两种</p><ul><li>内部时钟方式：内部集成了一个高增益的反相放大器，外部只需要接一个晶振（11.0592）两个电容即可</li><li>外部时钟方式：利用现成的外部振荡器产生脉冲信号，一般用于控制多个单片机，使用外部振荡器时XLAT2要悬空</li></ul><p>时钟周期：时钟信号的基本时间单位</p><p>机器周期：单片机完成一个基本操作所需要的时间，一个机器周期可能包含若干个时钟周期，S51位12个时钟周期为一个机器周期，<strong>一个机器周期有6个状态，1个状态有2拍，一拍代表一个时钟周期</strong></p><p>指令周期：执行一条指令所需要的时间，一般一个指令周期为一个机器周期</p><p><strong>复位时只需要在RST引脚给一个两个机器周期的高电平即可复位</strong></p><p><strong>单片机最小系统：单片机，时钟电路，复位电路</strong></p><h3 id="低功耗模式"><a href="#低功耗模式" class="headerlink" title="低功耗模式"></a>低功耗模式</h3><p><strong>空闲模式IDLE：切断驱动CPU的时钟，退出方式：响应中断，硬件复位</strong></p><p><strong>掉电保持模式PD：切断所有时钟，维持单片机中RAM，特殊功能寄存器中的内容，该模式可以由内部电源供电</strong></p><p>PCON特殊功能寄存器（87H）：</p><ul><li>SMOD：串行通信波特率的选择</li><li>GF1：通用标志位</li><li>GF0：通用标志位</li><li>PD：掉电保持模式控制位，为1时进入掉电保持模式</li><li>IDL：空闲状态控制位，为1时进入空闲状态</li></ul><h3 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h3><p>寻址方式：指令中说明操作数所在位置的方法</p><ul><li><p>寄存器寻址：如MOV A，Rx 将Rx中的数送入A累加器中，Rx为当前使用的寄存器组中的R0<del>R7，即RAM中的00H</del>1FH</p></li><li><p>直接寻址：如MOV  A，40H表示把RAM中40H所指向的数据送入累加器A中，也可以MOV   30H , 40H意思为把40H所指向的数据送入30H中，<strong>是访问片内所有特殊功能寄存器的唯一方式</strong></p></li><li><p><strong>寄存器间接寻址：如MOV A , @Ri (I&#x3D;0或1)     表示Ri中存放的是操作数的地址，通过该地址找到该数据存到累加器A中</strong></p></li><li><p>立即数寻址方式：如 MOVC A ,#40H ，表示直接将40H送给累加器A</p></li><li><p><strong>基址加变址寻址方式：基址寄存器只能是PC或DPTR，变址为累加器A，如MOV A , @A+DPTR，两者相加作为16位地址进行寻址</strong></p></li><li></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/">单片机原理及应用</category>
      
      
      
    </item>
    
    <item>
      <title>模电笔记</title>
      <link>http://example.com/2023/02/10/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/</link>
      <guid>http://example.com/2023/02/10/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/</guid>
      <pubDate>Fri, 10 Feb 2023 14:07:08 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;电阻&quot;&gt;&lt;a href=&quot;#电阻&quot; class=&quot;headerlink&quot; title=&quot;电阻&quot;&gt;&lt;/a&gt;电阻&lt;/h2&gt;&lt;h3 id=&quot;上拉电阻与下拉电阻&quot;&gt;&lt;a href=&quot;#上拉电阻与下拉电阻&quot; class=&quot;headerlink&quot; title=&quot;上拉电阻与下拉电阻&quot;&gt;&lt;/a&gt;&lt;strong&gt;上拉电阻与下拉电阻&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2023/02/10/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/image-20230316211019684.png&quot; alt=&quot;image-20230316211019684&quot;&gt;&lt;/p&gt;
&lt;p&gt;上拉电阻：使空闲状态时，电路保持在高电平&lt;/p&gt;
&lt;p&gt;下拉电阻：使空闲状态时，电路保持在低电平&lt;/p&gt;
&lt;h3 id=&quot;电阻的应用&quot;&gt;&lt;a href=&quot;#电阻的应用&quot; class=&quot;headerlink&quot; title=&quot;电阻的应用&quot;&gt;&lt;/a&gt;电阻的应用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;钳位：上下拉电阻，通常不希望高阻态的出现，通常使用上下拉电阻将点位限制在高电平或低电平&lt;/li&gt;
&lt;li&gt;拉电流：如I2C总线中，在总线上增加上拉电阻，增加总线上电流，提高驱动力&lt;/li&gt;
&lt;li&gt;增强抗干扰能力：针对于CMOS芯片中，不使用的引脚常常不会悬空，而是接一个上拉电阻提供协防电路&lt;/li&gt;
&lt;li&gt;阻抗匹配：长距离传输时，阻抗不匹配会引起反射，一般都会串联电阻消除阻抗不匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;计算方法&quot;&gt;&lt;a href=&quot;#计算方法&quot; class=&quot;headerlink&quot; title=&quot;计算方法&quot;&gt;&lt;/a&gt;计算方法&lt;/h3&gt;&lt;p&gt;常用的上拉电阻有4.7K，10K，应该如何选择呢&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上下拉的电阻可以根据阻值的大小，分为强拉和弱拉，拉电阻阻值越小，拉电流能力越强，但是相应的功耗也越大&lt;/li&gt;
&lt;li&gt;在高速电路中，过大的上拉电阻可能会导致信号的上升沿缓慢，过小的上拉电阻可能会导致信号的低电平过高（大于0V，可能会导致低电平被判定为高电平）&lt;/li&gt;
&lt;li&gt;针对于IO口内部带上下拉电阻，可以设置为高低电平模式，或高阻态模式，减小功耗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;阻值计算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通常来说，要确保高电平有效，上拉电阻要明显小于负载阻抗，否则会导致输出的高电平不足&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;电阻的最小值要保证电流不能超过场效应管的额定电流&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算出最大值和最小值，在中间取值即可，如果低电平要求严格，那么上拉电阻要尽可能的小，如果尽可能考虑低功耗，那么上拉电阻要尽可能大&lt;/p&gt;
&lt;h2 id=&quot;电容&quot;&gt;&lt;a href=&quot;#电容&quot; class=&quot;headerlink&quot; title=&quot;电容&quot;&gt;&lt;/a&gt;电容&lt;/h2&gt;&lt;p&gt;电容器的串并联分压公式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;串联公式：C&amp;#x3D;C1C2&amp;#x2F;(C1+C2)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并联公式C&amp;#x3D;C1+C2+C3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;补充部分：串联分压比V1&amp;#x3D;C2&amp;#x2F;(C1+C2)V…电容越大分得电压越小，交流直流条件下均如此&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并联分流比I1&amp;#x3D;C1&amp;#x2F;(C1+C2)I…电容越大通过的电流越大&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;电容阻抗与其频率有关，理想情况下频率越高阻抗越小，但实际情况下电容可看作一个电容电感串联的高效电路，因为电感频率越高阻抗越大，所以当频率高于电容谐振频率时，电容实际会表现出电感特性&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/02/10/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2R5eDE5OTM=,size_16,color_FFFFFF,t_70.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;电容降压&quot;&gt;&lt;a href=&quot;#电容降压&quot; class=&quot;headerlink&quot; title=&quot;电容降压&quot;&gt;&lt;/a&gt;电容降压&lt;/h3&gt;&lt;p&gt;利用电容容抗来取代回路中需要的电阻&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点:减少了降压元件所消耗的功率，既可以降压，又不消耗电能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实际使用时要注意:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要为电容提供一个可供其放电的回路，用电阻与电容串联，以防止实际使用后断电时触摸插孔会使电容放电导致触电。&lt;/p&gt;
&lt;p&gt;因负载通常都需要直流，所以回路中一般使用二极管来构成回路，由此衍生出如下两种降压电路&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;半波整流电路&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;电路中串联，并联两个二极管，D1为正半周期给RL提供负载，D2为C1提供放电回路，此时负载的电流为全波整流的一半，负半周期的电能送回给电源&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2023/02/10/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/20210119113015910.jpeg&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全波整流电路&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;为组件RL，正半周期都提供了良好的负载，此时负载的电流翻倍&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2023/02/10/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQwNzIzOA==,size_16,color_FFFFFF,t_70#pic_center.jpeg&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实际使用时，因为电路开启时，电容相当于短路，需要电容与一个电阻串联，防止后续器件烧伤，串联电阻的电阻值选取标准以后续器件的最小额定电流为准，当然实际情况电压会比额定电压大，所以电阻计算时应视情况而定&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="电阻"><a href="#电阻" class="headerlink" title="电阻"></a>电阻</h2><h3 id="上拉电阻与下拉电阻"><a href="#上拉电阻与下拉电阻" class="headerlink" title="上拉电阻与下拉电阻"></a><strong>上拉电阻与下拉电阻</strong></h3><p><img src="/2023/02/10/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/image-20230316211019684.png" alt="image-20230316211019684"></p><p>上拉电阻：使空闲状态时，电路保持在高电平</p><p>下拉电阻：使空闲状态时，电路保持在低电平</p><h3 id="电阻的应用"><a href="#电阻的应用" class="headerlink" title="电阻的应用"></a>电阻的应用</h3><ul><li>钳位：上下拉电阻，通常不希望高阻态的出现，通常使用上下拉电阻将点位限制在高电平或低电平</li><li>拉电流：如I2C总线中，在总线上增加上拉电阻，增加总线上电流，提高驱动力</li><li>增强抗干扰能力：针对于CMOS芯片中，不使用的引脚常常不会悬空，而是接一个上拉电阻提供协防电路</li><li>阻抗匹配：长距离传输时，阻抗不匹配会引起反射，一般都会串联电阻消除阻抗不匹配</li></ul><h3 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h3><p>常用的上拉电阻有4.7K，10K，应该如何选择呢</p><ul><li>上下拉的电阻可以根据阻值的大小，分为强拉和弱拉，拉电阻阻值越小，拉电流能力越强，但是相应的功耗也越大</li><li>在高速电路中，过大的上拉电阻可能会导致信号的上升沿缓慢，过小的上拉电阻可能会导致信号的低电平过高（大于0V，可能会导致低电平被判定为高电平）</li><li>针对于IO口内部带上下拉电阻，可以设置为高低电平模式，或高阻态模式，减小功耗</li></ul><p>阻值计算</p><ul><li><p>通常来说，要确保高电平有效，上拉电阻要明显小于负载阻抗，否则会导致输出的高电平不足</p></li><li><p>电阻的最小值要保证电流不能超过场效应管的额定电流</p></li></ul><p>计算出最大值和最小值，在中间取值即可，如果低电平要求严格，那么上拉电阻要尽可能的小，如果尽可能考虑低功耗，那么上拉电阻要尽可能大</p><h2 id="电容"><a href="#电容" class="headerlink" title="电容"></a>电容</h2><p>电容器的串并联分压公式</p><p><strong>串联公式：C&#x3D;C1C2&#x2F;(C1+C2)</strong></p><p><strong>并联公式C&#x3D;C1+C2+C3</strong></p><p><strong>补充部分：串联分压比V1&#x3D;C2&#x2F;(C1+C2)V…电容越大分得电压越小，交流直流条件下均如此</strong></p><p><strong>并联分流比I1&#x3D;C1&#x2F;(C1+C2)I…电容越大通过的电流越大</strong></p><p>电容阻抗与其频率有关，理想情况下频率越高阻抗越小，但实际情况下电容可看作一个电容电感串联的高效电路，因为电感频率越高阻抗越大，所以当频率高于电容谐振频率时，电容实际会表现出电感特性</p><p><img src="/2023/02/10/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2R5eDE5OTM=,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><h3 id="电容降压"><a href="#电容降压" class="headerlink" title="电容降压"></a>电容降压</h3><p>利用电容容抗来取代回路中需要的电阻</p><p><strong>优点:减少了降压元件所消耗的功率，既可以降压，又不消耗电能</strong></p><p><strong>实际使用时要注意:</strong></p><p>要为电容提供一个可供其放电的回路，用电阻与电容串联，以防止实际使用后断电时触摸插孔会使电容放电导致触电。</p><p>因负载通常都需要直流，所以回路中一般使用二极管来构成回路，由此衍生出如下两种降压电路</p><ul><li><p><strong>半波整流电路</strong></p></li><li><p>电路中串联，并联两个二极管，D1为正半周期给RL提供负载，D2为C1提供放电回路，此时负载的电流为全波整流的一半，负半周期的电能送回给电源</p></li></ul><p><img src="/2023/02/10/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/20210119113015910.jpeg" alt="在这里插入图片描述"></p><ul><li><strong>全波整流电路</strong></li><li>为组件RL，正半周期都提供了良好的负载，此时负载的电流翻倍</li></ul><p><img src="/2023/02/10/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQwNzIzOA==,size_16,color_FFFFFF,t_70#pic_center.jpeg" alt="在这里插入图片描述"></p><ul><li>实际使用时，因为电路开启时，电容相当于短路，需要电容与一个电阻串联，防止后续器件烧伤，串联电阻的电阻值选取标准以后续器件的最小额定电流为准，当然实际情况电压会比额定电压大，所以电阻计算时应视情况而定</li></ul><span id="more"></span><h3 id="电容滤波"><a href="#电容滤波" class="headerlink" title="电容滤波"></a>电容滤波</h3><p>由于大电容的制作工艺是多个导线缠绕制成，所以大电容工作时会表现出电感特性，即在高频信号下表现不好，而小电容因其体积小，所以其电感特性不明显，在高频信号下表现良好，所以可以采用大电容并联小电容的接法去过滤电路中的高频噪音和低频噪音</p><h2 id="电感"><a href="#电感" class="headerlink" title="电感"></a>电感</h2><p><strong>电感的电流不能突变</strong></p><h3 id="电感与磁珠的区别"><a href="#电感与磁珠的区别" class="headerlink" title="电感与磁珠的区别"></a>电感与磁珠的区别</h3><ol><li>电感是储能元件，磁珠是能量转换器件</li><li>电感多用于滤波回路，磁珠多用于信号回路</li><li>电感多用于中低频网络，磁珠常用于高频电路中</li><li></li></ol><h2 id="二极管"><a href="#二极管" class="headerlink" title="二极管"></a>二极管</h2><p>P型材料：用+3价硼原子从+4价的硅原子抢夺一个电子，硼原子带负电，硅原子留下空穴带正电，空穴即为多子</p><p>N型材料：用+5价磷原子，给予+4价硅原子一个电子，磷原子带正电，硅原子多一个电子带负电，电子为多子</p><p>PN结原理：扩散运动（多子），漂移运动（少子）</p><ul><li>施加正偏电压时，扩散运动增强，空间电荷区变窄</li><li>施加反偏电压时，漂移运动增强，空间电荷区变宽</li></ul><p>伏安特性曲线：</p><p><img src="/2023/02/10/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/image-20230225134328895.png" alt="image-20230225134328895"></p><p><strong>导通电压：由于本身的扩散运动会使PN结内部产生一个内电场，外部施加正向电压时其电场需要大于内电场，才能增强其扩散运动产生电流，硅二极管一般为0.7V</strong></p><p><strong>反向饱和电流：</strong></p><ul><li><strong>施加反向电压时的与横轴平行的电流，当施加反向电压时，几乎所有的少子都参与了漂移运动，所以外部来看反向饱和电流恒定</strong></li><li><strong>当大到一定程度时，破坏了PN结结构，价电子挣脱共价键的束缚形成电流，击穿电压</strong></li></ul><p><img src="/2023/02/10/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/image-20230225134835165.png" alt="image-20230225134835165"></p><p>uT为温度的电压当量</p><p>在电路中，对二极管同时施加直流电源和交流电源，则可将二极管视作一个电阻</p><h3 id="二极管的反向恢复过程"><a href="#二极管的反向恢复过程" class="headerlink" title="二极管的反向恢复过程"></a>二极管的反向恢复过程</h3><p>理想情况下，当电路中给予二极管一个远大于导通电压的电压时，突然使其反向，电路中的电流应立即截止，但实际情况为，电路中电流会先反向，而后缓慢截止</p><p><img src="/2023/02/10/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQwNzIzOA==,size_16,color_FFFFFF,t_70#pic_center-1678972112443-9.png" alt="在这里插入图片描述"></p><p>称之为二极管的反向恢复过程</p><p>产生的原因：</p><ul><li>在正向导通时，P区的空穴与N区的电子并不会在空间电荷区中立即复合，而是在一定的路程内，边漂移边扩散，使P区积攒电子，N区积攒空穴</li></ul><p><img src="/2023/02/10/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQwNzIzOA==,size_16,color_FFFFFF,t_70#pic_center-1678972116083-12.png" alt="在这里插入图片描述"></p><ul><li>突然间施加反向电压时，P区的电子，与N区的空穴会被拽回到相应的区域，形成反向漂移电流，所以会导致UI图中的反向电流</li><li>漂移的过程，电子与空穴复合，电流会慢慢减小，直至变为正常的反向饱和电流</li></ul><p>因为二极管的反向恢复过程，所以二极管不能再快速连续的脉冲下当做开关，</p><h3 id="肖特基二极管"><a href="#肖特基二极管" class="headerlink" title="肖特基二极管"></a>肖特基二极管</h3><p>对应于传统二极管，肖特基二极管的优点是</p><ul><li>反向恢复时间非常短</li><li>导通电压低</li><li>漏电流比较大，反向击穿电压比较低</li></ul><p>对应于场效应管，肖特基二极管的区别是</p><ul><li>肖特基二极管低功耗，超高速，反向恢复时间短，一般用于整流电路，场效应管是三极管，输入阻抗高，功耗低，噪音小，漏电流小，开关特性好，一般用于放大电路</li></ul><h3 id="两个二极管串联的意义"><a href="#两个二极管串联的意义" class="headerlink" title="两个二极管串联的意义"></a>两个二极管串联的意义</h3><p>当要求二极管承受的电压值大于其反向击穿电压时，一个二极管无法满足要求，此时就可以用两个二极管串联，利用二极管反向的反向电阻分压，将反向电压平均分配，但由于每个二极管的反向电阻不一定相同，则应每个二极管再并联一个电阻，使其电阻近乎相同，从而做到均分反向电压</p><h3 id="续流二极管"><a href="#续流二极管" class="headerlink" title="续流二极管"></a>续流二极管</h3><p>消除回路中大量的反向电动势，保护元器件</p><p><img src="/2023/02/10/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/image-20230218153844988.png" alt="image-20230218153844988"></p><p>在图3 中KR 在VT 导通时，上面电压为上正下负，电流方向由上向下。在VT 关断时会，KR中电流突然中断，会产生感应电势，其方向是力图保持电流不变，即总想保持KR 电流方向为由下至下。这个感应电势与电源电压迭加后加在ＶＴ两端，容易使ＶＴ出穿。为此加上ＶＤ，将ＫＲ产生的感应电势短路掉，电注是你所说的“顺时针方向在二极管和继电器所的小回路里面流动”，从而保护ＶＴ</p><h3 id="瞬态电压抑制器"><a href="#瞬态电压抑制器" class="headerlink" title="瞬态电压抑制器"></a>瞬态电压抑制器</h3><p>利用二极管的反向击穿原理，与器件并联接入，当电路中电压过大，大于TVS的反向击穿电压时，TVS会从高阻态变为低电阻状态，同时将器件两端电压钳制在较低水平，保护电路，当电压恢复正常后，TVS管又变为高阻态，电路正常工作</p><h2 id="三极管"><a href="#三极管" class="headerlink" title="三极管"></a>三极管</h2><h3 id="MOS管"><a href="#MOS管" class="headerlink" title="MOS管"></a>MOS管</h3><ul><li>结型：利用PN结特性，使用时要让栅源电压小于0，栅源电压越小，产生沟道越窄，同样会产生夹断现象，<strong>VGS不能大与0，会使GS的PN结导通</strong></li></ul><p><img src="/2023/02/10/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/image-20230227182851518.png" alt="image-20230227182851518"></p><ul><li>绝缘栅型：栅极下加入一个SIO2绝缘层，利用电场力吸引电子产生沟道，使漏源导通</li></ul><h4 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h4><p>因为MOS管栅极无电流，输入端无伏安特性曲线，所以没有输入特性，故用特殊的转移特性表示其特性曲线</p><p><img src="/2023/02/10/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/image-20230227183136034.png" alt="image-20230227183136034"></p><h3 id="三极管与MOS的对比"><a href="#三极管与MOS的对比" class="headerlink" title="三极管与MOS的对比"></a>三极管与MOS的对比</h3><p>1）．场效应管的源极S、栅极G、漏极D分别对应于三极管的发射极e、基极b、集电极c，它们的作用相似，图1-6-A所示是N沟道MOS管和NPN型晶体三极管引脚，图1-6-B所示是P沟道MOS管和PNP型晶体三极管引脚对应图。</p><p>2)．场效应管是电压控制电流器件，由VGS控制ID，普通的晶体三极管是电流控制电流器件，由IB控制IC。MOS管道放大系数是（跨导gm）当栅极电压改变一伏时能引起漏极电流变化多少安培。晶体三极管是电流放大系数（贝塔β）当基极电流改变一毫安时能引起集电极电流变化多少。</p><p>3)．场效应管栅极和其它电极是绝缘的，不产生电流；而三极管工作时基极电流IB决定集电极电流IC。因此场效应管的输入电阻比三极管的输入电阻高的多。</p><p>4)．场效应管只有多数载流子参与导电；三极管有多数载流子和少数载流子两种载流子参与导电，因少数载流子浓度受温度、辐射等因素影响较大，所以场效应管比三极管的温度稳定性好。</p><p>5)．场效应管在源极未与衬底连在一起时，源极和漏极可以互换使用，且特性变化不大，而三极管的集电极与发射极互换使用时，其特性差异很大，b 值将减小很多。</p><p>6)．场效应管的噪声系数很小，在低噪声放大电路的输入级及要求信噪比较高的电路中要选用场效应管。</p><p>7)．场效应管和普通晶体三极管均可组成各种放大电路和开关电路，但是场效应管制造工艺简单，并且又具有普通晶体三极管不能比拟的优秀特性，在各种电路及应用中正逐步的取代普通晶体三极管，目前的大规模和超大规模集成电路中，已经广泛的采用场效应管。</p><h3 id="IGBT"><a href="#IGBT" class="headerlink" title="IGBT"></a>IGBT</h3><p>由一个三极管与MOS管组合而成，使其有MOS管高输入阻抗的优点，同时还有三极管双载流的优点。实现驱动功率小，饱和压降低的好处</p><h3 id="作为开关使用时，MOS相比于三极管的好处"><a href="#作为开关使用时，MOS相比于三极管的好处" class="headerlink" title="作为开关使用时，MOS相比于三极管的好处"></a>作为开关使用时，MOS相比于三极管的好处</h3><ul><li>开关特性好:由于MOS管只靠多子导电，所以不存在少子储电特性，因此关断很迅速</li><li>输入阻抗高：由于MOS管栅极与衬底中有绝缘层隔开，可以看作为电容，所有有很大的输入阻抗</li><li>无二次击穿：当三极管温度上升时，会导致集电流电流上升，而集电极电流上升则会导致温度上升，形成恶循环，而mos管则具有与三极管相反的电流，温度特性，当温度上升时，电流反而会变小，从而温度会下降</li><li>MOS管导通后呈现纯阻性：三极管在饱和状态下时，可看作两个正偏的二极管，有极低的压降，但是这个压降为非线性电阻，不能利用欧姆定律去计算，而MOS管导通时呈现纯阻性状态，可以利用欧姆定律计算，从而可以使其并联在电路中，所以一个MOS管功率不够时，则可以多个MOS管并联</li></ul><h2 id="晶振"><a href="#晶振" class="headerlink" title="晶振"></a>晶振</h2><p>通电时产生机械振荡，施加力时会产生电</p><p>起振条件：</p><ul><li>输入与输出相位差为360：可以使输出返回到输入端的波形正好重叠，实现输出的放大</li><li>AF&gt;&#x3D;1:说明输入信号在回路中逛了一圈后又回到输入端，信号幅度比原来更大</li></ul><p>起振测量方法：</p><ul><li>测量无源晶振频率输入脚与输出脚两端电压差，一般为芯片电压Vcc的2分之1</li><li>直接用示波器测量，占空比为百分之50，平均电压为1&#x2F;2 Vcc</li></ul><h3 id="为什么要外加电容"><a href="#为什么要外加电容" class="headerlink" title="为什么要外加电容"></a>为什么要外加电容</h3><p>使晶体两端电容近似相当于负载电容，满足谐振条件使其起振</p><p>晶体旁的两个电容要接地，为三点式分压电容，接地点就是分压点</p><h3 id="为什么外加电阻"><a href="#为什么外加电阻" class="headerlink" title="为什么外加电阻"></a>为什么外加电阻</h3><p>晶体的内部芯片电路，可以看作是以一个增益很大的放大器，接入电阻相当于引入反馈，使晶体更稳定的工作</p><h3 id="晶振为什么不能放置在PCB边缘"><a href="#晶振为什么不能放置在PCB边缘" class="headerlink" title="晶振为什么不能放置在PCB边缘"></a>晶振为什么不能放置在PCB边缘</h3><p>会产生EMC辐射干扰电路</p><h3 id="32-768KHZ晶振作用"><a href="#32-768KHZ晶振作用" class="headerlink" title="32.768KHZ晶振作用"></a>32.768KHZ晶振作用</h3><p>32768为2的15次方，作为单片机中的时钟信号，将其15等分即能获得频率为1HZ的信号</p><h2 id="放大电路"><a href="#放大电路" class="headerlink" title="放大电路"></a>放大电路</h2><p>共射级放大电路：</p><p>为什么输出电阻很大时，输出相当于电流源，输出电阻很小时，输出相当于电压源</p><p>原因：<strong>根据戴维南等效定律，从负载RL向电路看，可以等效为一个电压源和一个电阻串联，所以可得到相应的Uo，Io，根据公式可算出，当R0很大时，负载电阻的变化对电流几乎没影响，但对电压影响很大，R0很小时，负载电阻变化对电压几乎没影响，但对电流影响很大</strong></p><p>放大电路中，射级偏置电压Re的作用：</p><p><strong>将输出与输入之间联系起来，Ic的升高引起Ie升高，从而导致Ue升高，再导致Ube分得的电压下降，导致Ib下降，反过来影响Ic，形成反馈</strong></p><p>Rb2的作用是温度B基级电压，让流过Ib2的电流远大于Ib，可以将Rb1，Rb2，在B点电压近似于两电阻分压</p><h3 id="复合管"><a href="#复合管" class="headerlink" title="复合管"></a>复合管</h3><p>由两个三极管构成，让他在高功率电路上近似看成一个三极管组成的电路构成，放大电路大约为两个三极管放大倍数相乘</p><h3 id="多级放大电路"><a href="#多级放大电路" class="headerlink" title="多级放大电路"></a>多级放大电路</h3><p>构成要求：在电压源有输入内阻的情况下，保证尽可能大的放大倍数情况下，当负载变化时，输出电压基本不变</p><p><strong>放大倍数为：输入电阻Ri与电压源内阻R0之比，输入电阻越大，放大倍数越大</strong></p><p>理想输入级：射级跟随器（共集电极电路），保证输入电阻很大</p><p>中间级：共射级放大电路</p><p>输出级：共基级放大电路（保证输出电阻小，且可以放大电压）</p><p>耦合方式：不同放大电路之间的连接方式</p><ul><li>直接耦合：低频特性好，易于集成，缺点：Q点调试困难</li><li>阻容耦合：无法集成</li><li>变压器耦合：</li></ul><h2 id="稳压器"><a href="#稳压器" class="headerlink" title="稳压器"></a>稳压器</h2><h3 id="串联型稳压器"><a href="#串联型稳压器" class="headerlink" title="串联型稳压器"></a>串联型稳压器</h3><h3 id="三端稳压器"><a href="#三端稳压器" class="headerlink" title="三端稳压器"></a>三端稳压器</h3><h2 id="运算放大器"><a href="#运算放大器" class="headerlink" title="运算放大器"></a>运算放大器</h2><h3 id="同相比例"><a href="#同相比例" class="headerlink" title="同相比例"></a>同相比例</h3><h3 id="返相比例"><a href="#返相比例" class="headerlink" title="返相比例"></a>返相比例</h3><h3 id="差动放大器"><a href="#差动放大器" class="headerlink" title="差动放大器"></a>差动放大器</h3>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/">模拟电子电路</category>
      
      
      
    </item>
    
    <item>
      <title>Java笔记</title>
      <link>http://example.com/2023/02/10/JAVA%E5%9F%BA%E7%A1%80%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/</link>
      <guid>http://example.com/2023/02/10/JAVA%E5%9F%BA%E7%A1%80%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/</guid>
      <pubDate>Fri, 10 Feb 2023 14:07:08 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;Scanner类&quot;&gt;&lt;a href=&quot;#Scanner类&quot; class=&quot;headerlink&quot; title=&quot;Scanner类&quot;&gt;&lt;/a&gt;Scanner类&lt;/h2&gt;&lt;p&gt;连续两次键盘输入时，若第一次键盘输入的数据中有空格&amp;#x2F;制表符分隔，则会将左边交给第一次输入，右边交给第二次输入 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;Sc.nextLine&lt;/u&gt;除外&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;键盘录入体系1：nextInt() , next() . nextDouble()……&lt;/p&gt;
&lt;p&gt;体系2:nextLine();&lt;/p&gt;
&lt;p&gt;两种体系不能混用&lt;/p&gt;
&lt;h2 id=&quot;三元运算符&quot;&gt;&lt;a href=&quot;#三元运算符&quot; class=&quot;headerlink&quot; title=&quot;三元运算符&quot;&gt;&lt;/a&gt;三元运算符&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;格式: 关系式 ？ 表达式1：表达式2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三元运算符必须被使用，当关系式结果为真时，返回表达式1，反之则为表达式2&lt;/strong&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h2><p>连续两次键盘输入时，若第一次键盘输入的数据中有空格&#x2F;制表符分隔，则会将左边交给第一次输入，右边交给第二次输入 </p><p><strong><u>Sc.nextLine</u>除外</strong></p><p>键盘录入体系1：nextInt() , next() . nextDouble()……</p><p>体系2:nextLine();</p><p>两种体系不能混用</p><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p><strong>格式: 关系式 ？ 表达式1：表达式2</strong></p><p><strong>三元运算符必须被使用，当关系式结果为真时，返回表达式1，反之则为表达式2</strong></p><span id="more"></span><h2 id="Switch-Case"><a href="#Switch-Case" class="headerlink" title="Switch Case"></a>Switch Case</h2><p>选择分支</p><p>格式:</p><p>Switch(变量名){</p><p> case 常量 :</p><p>语句;</p><p>break;</p><p>case 常量 :</p><p>语句;</p><p>break;</p><p>…………</p><p><strong>default ：</strong></p><p><strong>语句;</strong></p><p><strong>break;</strong></p><p>}</p><p><strong>作用场景：当一个变量等于不同值时产生不同结果</strong></p><p><strong>Case穿透：当case中语句不包含break，判断到此分支时继续运行至下一行语句，不跳出选择分支</strong></p><p><strong>-&gt;与大括号省略break，当大括号内只有一行语句时可将大括号省略</strong></p><p><strong>Case穿透</strong></p><h2 id="占位符输出"><a href="#占位符输出" class="headerlink" title="占位符输出"></a>占位符输出</h2><p>注意为printf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">&quot;World!&quot;</span>;</span><br><span class="line">System.out.printf(<span class="string">&quot;Hello,%s&quot;</span>,str);</span><br></pre></td></tr></table></figure><h2 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h2><p><strong>continue</strong> </p><p><strong>作用 结束本次循环，开始下次循环</strong></p><p><strong>break</strong></p><p><strong>跳出循环</strong></p><h3 id="数字加密与解密"><a href="#数字加密与解密" class="headerlink" title="数字加密与解密"></a>数字加密与解密</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testPassword</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">backup</span> <span class="operator">=</span> a;</span><br><span class="line">        <span class="keyword">while</span>(a&gt;<span class="number">10</span>)&#123;</span><br><span class="line">            a=a/<span class="number">10</span>;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> length-<span class="number">1</span> ; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            arr[i] = backup % <span class="number">10</span>;</span><br><span class="line">            backup = backup / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i]=arr[i]+<span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i]=arr[i]%<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;m &lt;n;  m++,n--)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[n];</span><br><span class="line">            arr[n]=arr[m];</span><br><span class="line">            arr[m] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双色球"><a href="#双色球" class="headerlink" title="双色球"></a>双色球</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testChouJiang</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span>[] number1 = getNumber();</span><br><span class="line">        <span class="type">int</span>[] number2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">7</span>];</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; number2.length; ) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入一个号码&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">result1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (i==<span class="number">6</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (m&gt;=<span class="number">1</span>&amp;&amp;m&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">                    number2[i] = m;</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入错误请重新输入&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">7</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(number2[j] == m)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;输入错误请重新输入&quot;</span>);</span><br><span class="line">                    result1 = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(result1&amp;&amp;i&lt;<span class="number">6</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (m&gt;=<span class="number">1</span>&amp;&amp;m&lt;=<span class="number">33</span>) &#123;</span><br><span class="line">                number2[i] = m;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入错误请重新输入&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; number1.length; i++) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">                <span class="keyword">default</span> :</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; number2.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (number1[i] == number2[j]) &#123;</span><br><span class="line">                        count++;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span> :</span><br><span class="line">                    <span class="keyword">if</span> (number1[i] == number2[<span class="number">7</span>])&#123;</span><br><span class="line">                        result = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(result)&#123;</span><br><span class="line">            <span class="keyword">switch</span> (count)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>-&gt;&#123;System.out.println(<span class="string">&quot;中奖一千万&quot;</span>);&#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>-&gt;&#123;System.out.println(<span class="string">&quot;中奖3000元&quot;</span>);&#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>-&gt;&#123;System.out.println(<span class="string">&quot;中奖200元&quot;</span>);&#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>-&gt;&#123;System.out.println(<span class="string">&quot;中奖10元&quot;</span>);&#125;</span><br><span class="line">                <span class="keyword">default</span> -&gt; &#123;System.out.println(<span class="string">&quot;中奖5元&quot;</span>);&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (count)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>-&gt;&#123;System.out.println(<span class="string">&quot;中奖500万&quot;</span>);&#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>-&gt;&#123;System.out.println(<span class="string">&quot;中奖200元&quot;</span>);&#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>-&gt;&#123;System.out.println(<span class="string">&quot;中奖10元&quot;</span>);&#125;</span><br><span class="line">                <span class="keyword">default</span> -&gt; &#123;System.out.println(<span class="string">&quot;很遗憾没中奖&quot;</span>);&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] getNumber()&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">7</span>];</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>;) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> r.nextInt(<span class="number">33</span>)+<span class="number">1</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i] == temp)&#123;</span><br><span class="line">                    result = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (result)&#123;</span><br><span class="line">                arr[i] = temp;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[<span class="number">6</span>] = r.nextInt(<span class="number">16</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象综合"><a href="#面向对象综合" class="headerlink" title="面向对象综合"></a>面向对象综合</h2><h3 id="文字版格斗游戏"><a href="#文字版格斗游戏" class="headerlink" title="文字版格斗游戏"></a>文字版格斗游戏</h3><p>Main方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPhone</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">Charcter</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Charcter</span>(<span class="string">&quot;达摩&quot;</span>,<span class="number">100</span>);</span><br><span class="line">       <span class="type">Charcter</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Charcter</span>(<span class="string">&quot;赵信&quot;</span>,<span class="number">100</span>);</span><br><span class="line">       <span class="keyword">while</span>(c1.getHealth()&gt;<span class="number">0</span>&amp;&amp;c2.getHealth()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">           c1.attack(c2);</span><br><span class="line">           c2.attack(c1);</span><br><span class="line">           System.out.println(c1.getName()+<span class="string">&quot;:&quot;</span>+c1.getHealth()+c2.getName()+<span class="string">&quot;:&quot;</span>+c2.getHealth());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (c1.getHealth()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">           System.out.println(c1.getName()+<span class="string">&quot;噶了&quot;</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           System.out.println(c2.getName()+<span class="string">&quot;噶了&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Character类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Charcter</span> <span class="keyword">implements</span> <span class="title class_">Function</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> health;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Charcter</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Charcter</span><span class="params">(String name, <span class="type">int</span> health)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.health = health;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> health</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHealth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> health;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> health</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHealth</span><span class="params">(<span class="type">int</span> health)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.health = health;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Charcter&#123;name = &quot;</span> + name + <span class="string">&quot;, health = &quot;</span> + health + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(Charcter charcter)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> r.nextInt(<span class="number">20</span>);</span><br><span class="line">        charcter.setHealth(charcter.getHealth() - a);</span><br><span class="line">        <span class="type">int</span> <span class="variable">remind</span> <span class="operator">=</span> charcter.getHealth();</span><br><span class="line">        remind = remind &lt; <span class="number">0</span>? <span class="number">0</span> : remind;</span><br><span class="line">        charcter.setHealth(remind);</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name+<span class="string">&quot;攻击了&quot;</span>+charcter.getName()+<span class="string">&quot;,造成了&quot;</span>+a+<span class="string">&quot;点伤害&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串String"><a href="#字符串String" class="headerlink" title="字符串String"></a>字符串String</h2><h3 id="1-构造方法"><a href="#1-构造方法" class="headerlink" title="1.构造方法"></a>1.构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(); <span class="comment">//无参构造</span></span><br><span class="line"><span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>&#125;;</span><br><span class="line"><span class="type">char</span>[] c = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(b); <span class="comment">//利用字节数组创建，将对应值按ASCII码转换</span></span><br><span class="line">System.out.println(a);</span><br><span class="line"><span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(c); <span class="comment">//利用字符数组创建</span></span><br><span class="line">System.out.println(d);</span><br></pre></td></tr></table></figure><p><strong>JAVA中当直接赋值字符串时，若字符串值已存在，则不会在堆中开辟新空间，而是直接复用与此值相等的字符串的值，如下图</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] b = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">System.out.println(c.hashCode()); <span class="comment">//返回变量地址</span></span><br><span class="line">System.out.println(d.hashCode()); <span class="comment">//返回变量地址</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><p>[I@776ec8df<br>[I@4eec7777<br>92599395<br>92599395</p><p>这也是与数组的区别</p><p><strong>当用new方法创建时，则与数组一样，不管如何都开辟新空间</strong></p><h3 id="2-字符串比较及原理"><a href="#2-字符串比较及原理" class="headerlink" title="2.字符串比较及原理"></a>2.字符串比较及原理</h3><p>&#x3D;&#x3D;号比较原理：</p><p>①基本数据类型：比较具体的数值</p><p>②引用数据类型：比较变量地址值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String c = &quot;abcde&quot;;</span><br><span class="line">String d = new String(&quot;abced&quot;);</span><br><span class="line">System.out.println(c==d);</span><br><span class="line"></span><br><span class="line">结果输出:false</span><br></pre></td></tr></table></figure><p>**字符串比较方法:     **</p><p>**①c.equals(d);  比较时包含大小写        **</p><p><strong>低层逻辑：先判断c,d是否为一个字符串类型的变量，再将字符串压缩，将该字符变成LATIN1编码，然后判断c，d的哈希值是否相同，最后调用StringLatin1的equal方法判断c，d对应的字符值</strong></p><p><strong>能改善程序性能</strong> </p><p><strong>②c.equalsIgnoreCase(d);   不区分大小写比较</strong></p><p>返回boolean值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Abcde&quot;</span>);</span><br><span class="line">System.out.println(c.equals(d));</span><br><span class="line">System.out.println(c.equalsIgnoreCase(d));</span><br><span class="line"></span><br><span class="line">结果:</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>特殊情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> sc.next();</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">System.out.println(str1==str2);</span><br><span class="line">结果：</span><br><span class="line">    <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>通过键盘录入生成的String字符串被视为用new方法建立的字符串，所以上图结果为false</strong></p><h4 id="练习-用户登录"><a href="#练习-用户登录" class="headerlink" title="练习:用户登录"></a>练习:用户登录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        String user = &quot;jdxuan525&quot;;</span><br><span class="line">        String password = &quot;jdx525&quot;;</span><br><span class="line">        int count =3 ;</span><br><span class="line">        for (; count &gt; 0; count--) &#123;</span><br><span class="line">            System.out.println(&quot;请输入用户名&quot;);</span><br><span class="line">            Scanner sc = new Scanner(System.in);</span><br><span class="line">            String str1 = sc.next();</span><br><span class="line">            if(str1.equals(user))&#123;</span><br><span class="line">                System.out.println(&quot;用户名正确&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                System.out.printf(&quot;用户名错误,您还剩下%s次机会&quot;,count-1);</span><br><span class="line">                System.out.println();</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            if(count &gt; 0) &#123;</span><br><span class="line">                System.out.println(&quot;请输入密码&quot;);</span><br><span class="line">                String str2 = sc.next();</span><br><span class="line">                if (str2.equals(password)) &#123;</span><br><span class="line">                    System.out.println(&quot;登录成功&quot;);</span><br><span class="line">                    break;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    System.out.printf(&quot;密码错误,您还剩下%s次机会&quot;,count-1);</span><br><span class="line">                    System.out.println();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        if(count==0)&#123;</span><br><span class="line">            System.out.println(&quot;账户被冻结&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="练习：遍历字符串"><a href="#练习：遍历字符串" class="headerlink" title="练习：遍历字符串"></a>练习：遍历字符串</h4><p>方法：charAt（）类似数组的下标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">   Scanner sc = new Scanner(System.in);</span><br><span class="line">   String str = sc.next();</span><br><span class="line">    for (int i = 0; i &lt; str.length(); i++) &#123;</span><br><span class="line">        System.out.println(str.charAt(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="统计字符次数"><a href="#统计字符次数" class="headerlink" title="统计字符次数"></a>统计字符次数</h4><p><strong>char做比较时会自动转换对应的ASCII码的值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Scanner sc = new Scanner(System.in);</span><br><span class="line">    String str = sc.next();</span><br><span class="line">    int count1 = 0;</span><br><span class="line">    int count2 = 0;</span><br><span class="line">    int count3 = 0;</span><br><span class="line">    for (int i = 0; i &lt; str.length(); i++) &#123;</span><br><span class="line">        char c = str.charAt(i);</span><br><span class="line"></span><br><span class="line">    if (c &gt;= &#x27;a&#x27; &amp;&amp; c &lt;= &#x27;z&#x27;) &#123;</span><br><span class="line">        count1++;</span><br><span class="line">    &#125;else if(c&gt;=&#x27;A&#x27;&amp;&amp;c&lt;=&#x27;Z&#x27;)&#123;</span><br><span class="line">        count2++;</span><br><span class="line">    &#125;else if (c &gt;= &#x27;0&#x27; &amp;&amp; c&lt;=&#x27;9&#x27;)&#123;</span><br><span class="line">        count3++;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.printf(&quot;大写字母出现%s次，小写字母出现%s次，数字出现%s次&quot;,count1,count2,count3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="将整数数组转变为字符串并按一定格式输出"><a href="#将整数数组转变为字符串并按一定格式输出" class="headerlink" title="将整数数组转变为字符串并按一定格式输出"></a>将整数数组转变为字符串并按一定格式输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    int[] arr = &#123;1,2,3,4,5&#125;;</span><br><span class="line">    String symbol = &quot;[&quot;;</span><br><span class="line">    for (int i = 0; i &lt; arr.length-1; i++) &#123;</span><br><span class="line">        if (i&lt;arr.length-2) &#123;</span><br><span class="line">            symbol = symbol + arr[i] + &quot;, &quot;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            symbol= symbol+arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    symbol = symbol + &quot;]&quot;;</span><br><span class="line">    System.out.println(symbol);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Scanner sc = new Scanner(System.in);</span><br><span class="line">    String str = sc.next();</span><br><span class="line">    String result = new String();</span><br><span class="line">    for (int i = 0; i &lt; str.length(); i++) &#123;</span><br><span class="line">        result = result + str.charAt(str.length()-1-i);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="金额转换"><a href="#金额转换" class="headerlink" title="金额转换"></a>金额转换</h4><p><strong>将整数中的数字换成汉字中的数字，就生成一个数组存放汉字（与下标对应，即1对应一），后将数字中的每个字作为下标查找数组，返回汉字</strong> 俗称:查表法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;请输入金额&quot;);</span><br><span class="line">        String str = &quot;零壹贰叁肆伍陆柒捌玖&quot;;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        int money = sc.nextInt();</span><br><span class="line">        int[] a = new int[7];</span><br><span class="line">        String result = new String();</span><br><span class="line">        for (int i = 0; money &gt; 0; i++) &#123;</span><br><span class="line">            a[a.length-i-1] = money % 10;</span><br><span class="line">            money = money / 10;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 0; i &lt; a.length; i++) &#123;</span><br><span class="line">            result += str.charAt(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        String[] arr = &#123;&quot;佰&quot;,&quot;拾&quot;,&quot;万&quot;,&quot;仟&quot;,&quot;佰&quot;,&quot;拾&quot;,&quot;元&quot;&#125;;</span><br><span class="line">        String last = new String();</span><br><span class="line">        for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            last = last + result.charAt(i) + arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(last);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="手机号屏蔽"><a href="#手机号屏蔽" class="headerlink" title="手机号屏蔽"></a>手机号屏蔽</h4><p>字符串截取 : subString(int beginIndex , int endIndex); 返回String</p><p><strong>截取时包头不包尾</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Scanner scanner = new Scanner(System.in);</span><br><span class="line">    String number = scanner.next();</span><br><span class="line">    String begin = number.substring(0,3);</span><br><span class="line">    String medium = &quot; **** &quot;;</span><br><span class="line">    String last = number.substring(7,11);</span><br><span class="line">    String number1 =begin + medium+last;</span><br><span class="line">    System.out.println(number1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出: 188****0470</span><br></pre></td></tr></table></figure><h4 id="敏感词替换"><a href="#敏感词替换" class="headerlink" title="敏感词替换"></a>敏感词替换</h4><p>replace(旧值，新值)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">    String[] str1 = &#123;<span class="string">&quot;tmd&quot;</span>,<span class="string">&quot;sb&quot;</span>,<span class="string">&quot;cnmd&quot;</span>&#125;;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str1.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">        str = str.replace(str1[i],<span class="string">&quot;***&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最长回文字串"><a href="#最长回文字串" class="headerlink" title="最长回文字串"></a>最长回文字串</h4><p>public class Solution {</p><pre><code>public String longestPalindrome(String s) &#123;    int len = s.length();    if (len &lt; 2) &#123;        return s;    &#125;    int maxLen = 1;    int begin = 0;    // dp[i][j] 表示 s[i..j] 是否是回文串    boolean[][] dp = new boolean[len][len];    // 初始化：所有长度为 1 的子串都是回文串    for (int i = 0; i &lt; len; i++) &#123;        dp[i][i] = true;    &#125;    char[] charArray = s.toCharArray();    // 递推开始    // 先枚举子串长度    for (int L = 2; L &lt;= len; L++) &#123;        // 枚举左边界，左边界的上限设置可以宽松一些        for (int i = 0; i &lt; len; i++) &#123;            // 由 L 和 i 可以确定右边界，即 j - i + 1 = L 得            int j = L + i - 1;            // 如果右边界越界，就可以退出当前循环            if (j &gt;= len) &#123;                break;            &#125;            if (charArray[i] != charArray[j]) &#123;                dp[i][j] = false;            &#125; else &#123;                if (j - i &lt; 3) &#123;                    dp[i][j] = true;                &#125; else &#123;                    dp[i][j] = dp[i + 1][j - 1];                &#125;            &#125;            // 只要 dp[i][L] == true 成立，就表示子串 s[i..L] 是回文，此时记录回文长度和起始位置            if (dp[i][j] &amp;&amp; j - i + 1 &gt; maxLen) &#123;                maxLen = j - i + 1;                begin = i;            &#125;        &#125;    &#125;    return s.substring(begin, begin + maxLen);&#125;</code></pre><h3 id="3-StringBuilder"><a href="#3-StringBuilder" class="headerlink" title="3.StringBuilder"></a>3.StringBuilder</h3><p>线程不安全</p><p>一种特殊的String，类似Arraylist，创建后可被改变</p><p>StringBuilder sb &#x3D; new StringBuilder();</p><p>可用方法:</p><p>sb.append(   );**添加括号内数据,**返回一个sb</p><p>String str &#x3D;sb.reverse();反转字符串，返回Stringbuilder</p><p>String str &#x3D; sb.toString(); 将StringBuilder变为String</p><p> <strong>链式编程：String str &#x3D; sb.append(String str).reverse().toString(); 返回的是将sb添加一个str后反转的一个字符串</strong></p><h3 id="4-StringBuffer"><a href="#4-StringBuffer" class="headerlink" title="4.StringBuffer"></a>4.StringBuffer</h3><p>可变的字符序列，线程安全，效率偏低，大部分与StringBuilder相同</p><h3 id="5-StringJoiner-JDK8新特性"><a href="#5-StringJoiner-JDK8新特性" class="headerlink" title="5.StringJoiner   JDK8新特性"></a>5.StringJoiner   JDK8新特性</h3><p><strong>StringJoiner sj &#x3D; new StringJoiner(“ , “, “ [ “,” ] “);</strong>&#x2F;&#x2F;第一个代表间隔符号，第二个为开始符号，第三个为结束符号</p><p><strong>StringJoiner sj &#x3D; new StringJoiner(“ , “);</strong>&#x2F;&#x2F;仅有间隔符号</p><p><strong>sj.add();</strong>  拼接字符串  <strong>只能添加字符串</strong></p><p><strong>sj.toString();</strong>  将结果返还为String类</p><h3 id="6-低层实现原理"><a href="#6-低层实现原理" class="headerlink" title="6.低层实现原理"></a>6.低层实现原理</h3><h4 id="字符串拼接原理"><a href="#字符串拼接原理" class="headerlink" title="字符串拼接原理"></a>字符串拼接原理</h4><p><strong>直接赋值拼接字符串如</strong></p><p><strong>String str &#x3D; “a”+”b”+”c”;</strong></p><p><strong>则不会在堆中开辟新空间，预估字符串空间，再拼接变成字符串</strong>  （JDK8新特性）</p><p><img src="/2023/02/10/JAVA%E5%9F%BA%E7%A1%80%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220929131150973.png" alt="image-20220929131150973"></p><p><strong>间接赋值如：</strong></p><p><strong>String str &#x3D;”a”;</strong></p><p><strong>String str1 &#x3D; str + “b”;</strong></p><p><strong>则会在堆中创建一个StringBuilder对象，通过append将str与”b”拼接形成新字符串，再将新字符串通过toString返回给str1</strong></p><h4 id="StringBuilder，StringBuffer原理分析"><a href="#StringBuilder，StringBuffer原理分析" class="headerlink" title="StringBuilder，StringBuffer原理分析"></a>StringBuilder，StringBuffer原理分析</h4><p><strong>默认容量16 ，默认扩容 16*2+2&#x3D;34；当超出默认扩容容量时，则以实际为准，容量最大值为int的最大值</strong></p><p><strong>sb.capacity()获取String容量</strong></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="罗马数字两种写法"><a href="#罗马数字两种写法" class="headerlink" title="罗马数字两种写法"></a>罗马数字两种写法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">      <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">9</span>);</span><br><span class="line">      sb.append(scanner.nextInt());</span><br><span class="line">      <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">      <span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;,&quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line">      String[] str = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;&quot;</span>,<span class="string">&quot;I&quot;</span>,<span class="string">&quot;II&quot;</span>,<span class="string">&quot;III&quot;</span>,<span class="string">&quot;IV&quot;</span>,<span class="string">&quot;V&quot;</span>,<span class="string">&quot;VI&quot;</span>,<span class="string">&quot;VII&quot;</span>,<span class="string">&quot;VIII&quot;</span>,<span class="string">&quot;IX&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sb.length(); i++) &#123;</span><br><span class="line">            sj.add(str[str1.charAt(i)-<span class="string">&#x27;0&#x27;</span>]);</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(sj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调整字符串内容并进行比较"><a href="#调整字符串内容并进行比较" class="headerlink" title="调整字符串内容并进行比较"></a>调整字符串内容并进行比较</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abcbca&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;bcaabc&quot;</span>;</span><br><span class="line">      <span class="type">StringBuilder</span> <span class="variable">sb3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">      sb3.append(str1).append(str1);</span><br><span class="line">      <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> sb3.toString();</span><br><span class="line">      <span class="keyword">if</span>(str3.contains(str2))&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;可以被反转&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;不可以&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="键盘输入字符串，打乱字符串的内容"><a href="#键盘输入字符串，打乱字符串的内容" class="headerlink" title="键盘输入字符串，打乱字符串的内容"></a>键盘输入字符串，打乱字符串的内容</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">  <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">  <span class="type">char</span>[] cr = str1.toCharArray();</span><br><span class="line">  <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">  <span class="keyword">while</span>(!result)&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cr.length; i++) &#123;</span><br><span class="line">          <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> r.nextInt(cr.length);</span><br><span class="line">          <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span>cr[i];</span><br><span class="line">          cr[i] = cr[m];</span><br><span class="line">          cr[m] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">      str2 = String.valueOf(cr);</span><br><span class="line">      <span class="keyword">if</span>(!str2.equals(str1))&#123;      <span class="comment">//判断是否被打乱，减少偶然性</span></span><br><span class="line">          result = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    System.out.println(str2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生成随机验证码-优化版"><a href="#生成随机验证码-优化版" class="headerlink" title="生成随机验证码 优化版"></a>生成随机验证码 优化版</h4><p><strong>数字位置随机，大小写随机</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">  <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(<span class="number">10</span>)+<span class="number">48</span>;</span><br><span class="line">  <span class="type">char</span>[] cr = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">5</span>];</span><br><span class="line">  <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> r.nextInt(<span class="number">5</span>);</span><br><span class="line">  cr[index] = (<span class="type">char</span>) number;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cr.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">Charcater</span> <span class="operator">=</span> r.nextInt(<span class="number">24</span>)+<span class="number">65</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">smallC</span> <span class="operator">=</span> r.nextInt(<span class="number">24</span>)+<span class="number">97</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> r.nextInt(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>(cr[i]==<span class="string">&#x27;\u0000&#x27;</span>&amp;&amp;m==<span class="number">1</span>)&#123;</span><br><span class="line">            cr[i] =(<span class="type">char</span>)Charcater;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cr[i] == <span class="string">&#x27;\u0000&#x27;</span> &amp;&amp; m == <span class="number">0</span>) &#123;</span><br><span class="line">            cr[i] = (<span class="type">char</span>)smallC;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(cr);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="将两个字符串的数相乘，以字符串形式返回结果"><a href="#将两个字符串的数相乘，以字符串形式返回结果" class="headerlink" title="将两个字符串的数相乘，以字符串形式返回结果"></a>将两个字符串的数相乘，以字符串形式返回结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;23456&quot;</span>;</span><br><span class="line">  <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;89553&quot;</span>;</span><br><span class="line">  <span class="type">char</span>[] c1 = str1.toCharArray();</span><br><span class="line">  <span class="type">char</span>[] c2 = str2.toCharArray();</span><br><span class="line">  <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> getNumber(c1);</span><br><span class="line">  <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> getNumber(c2);</span><br><span class="line">  <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> m*n;</span><br><span class="line">  <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">  sb.append(result);</span><br><span class="line">    System.out.println(sb);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getNumber</span><span class="params">(<span class="type">char</span>[] cr)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cr.length; i++) &#123;</span><br><span class="line">        num = num * <span class="number">10</span> + cr[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输入一个字符串，中间用空格分隔，返回最后一个单词的长度，内容"><a href="#输入一个字符串，中间用空格分隔，返回最后一个单词的长度，内容" class="headerlink" title="输入一个字符串，中间用空格分隔，返回最后一个单词的长度，内容"></a>输入一个字符串，中间用空格分隔，返回最后一个单词的长度，内容</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Scanner scanner = new Scanner(System.in);</span><br><span class="line">    String str = scanner.nextLine();</span><br><span class="line">    String[] s = str.split(&quot; &quot;);</span><br><span class="line">    int m = s[(s.length-1)].length();</span><br><span class="line">    System.out.printf(&quot;最后一个单词是%s,长度是%s&quot;,s[(s.length-1)],m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意要用nextLine输入，因为中间有空格，若用next输入，则空格后的输入不会赋值给str</p><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p><strong>表示存放数据的一个集合,一种特殊的数组</strong></p><h3 id="ArrayList基本"><a href="#ArrayList基本" class="headerlink" title="ArrayList基本"></a>ArrayList基本</h3><p><strong>list.add() ;返回boolean值，表示添加是否成功</strong></p><p><strong>list.remove();可根据索引，或内容进行删除，当根据索引删除时，返回的是被删除数据的内容，根据内容进行删除时，则返回boolean值，表示是否删除成功</strong></p><p><strong>list.set(index , value);根据下标修改元素，返回arraylist</strong></p><p><strong>list.get(index );根据下表获取元素</strong></p><h3 id="低层实现原理"><a href="#低层实现原理" class="headerlink" title="低层实现原理"></a>低层实现原理</h3><ul><li>利用空参创建的集合，在底层创建一个长度为0的数组</li><li>添加第一个元素时，在底层创建一个新的长度为10的数组</li><li>当集合满时，会创建一个新的数组，长度为原来的1.5倍，再将原来数组的所有元素拷贝到新数组中</li><li>若一次性添加多个元素，扩容1.5倍仍然放不下，则新创建数组的长度以实际需要的容量为准</li></ul><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><h4 id="定义一个集合，添加字符串，并将集合输出"><a href="#定义一个集合，添加字符串，并将集合输出" class="headerlink" title="定义一个集合，添加字符串，并将集合输出"></a>定义一个集合，添加字符串，并将集合输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;bcd&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;def&quot;</span>);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br><span class="line">结果:    [abc, bcd, def]</span><br></pre></td></tr></table></figure><h4 id="定义一个集合，定义一个student类，将student类存入list中并打印"><a href="#定义一个集合，定义一个student类，将student类存入list中并打印" class="headerlink" title="定义一个集合，定义一个student类，将student类存入list中并打印"></a>定义一个集合，定义一个student类，将student类存入list中并打印</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ArrayList&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">15</span>);</span><br><span class="line">    list.add(stu);</span><br><span class="line">    list.add(stu1);</span><br><span class="line">    <span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">        System.out.println(student.getAge());</span><br><span class="line">        System.out.println(student.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体student类过于简单不展示</p><h4 id="添加用户对象并判断是否存在"><a href="#添加用户对象并判断是否存在" class="headerlink" title="添加用户对象并判断是否存在"></a>添加用户对象并判断是否存在</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入要查找的id&quot;</span>);</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">    ArrayList&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;jdxuan525&quot;</span>,<span class="string">&quot;jdx525&quot;</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;jdxuan442525&quot;</span>,<span class="string">&quot;jdxuan525&quot;</span>);</span><br><span class="line">    list.add(stu);</span><br><span class="line">    list.add(stu1);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> findStudent(list,str);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">findStudent</span><span class="params">(ArrayList&lt;Student&gt; list , String id)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">        <span class="keyword">if</span> (stu.getId().equals(id))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="学生管理系统"><a href="#学生管理系统" class="headerlink" title="学生管理系统"></a>学生管理系统</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        ArrayList&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;user&gt; listUser = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">user</span> <span class="variable">uss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">user</span>(<span class="string">&quot;adminstor&quot;</span>,<span class="string">&quot;ddddd&quot;</span>,<span class="string">&quot;220283200109250118&quot;</span>,<span class="string">&quot;18840960470&quot;</span>);</span><br><span class="line">        listUser.add(uss);</span><br><span class="line">        <span class="type">String</span> <span class="variable">number11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">phoneNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result2</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result3</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">run1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(run1) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;欢迎来到学生管理系统&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请选择操作，1：登录 2：注册 3：忘记密码&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (num2) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入登录账号&quot;</span>);</span><br><span class="line">                    <span class="keyword">while</span> (result1) &#123;</span><br><span class="line">                        number11 = scanner.next();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; listUser.size(); i++) &#123;</span><br><span class="line">                            <span class="type">user</span> <span class="variable">usr</span> <span class="operator">=</span> listUser.get(i);</span><br><span class="line">                            <span class="keyword">if</span> (usr.getUsername().equals(number11)) &#123;</span><br><span class="line">                                result1 = <span class="literal">false</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(result1)&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;账号错误，请重新输入&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">                    <span class="keyword">while</span> (!result1) &#123;</span><br><span class="line">                        password = scanner.next();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; listUser.size(); i++) &#123;</span><br><span class="line">                            <span class="type">user</span> <span class="variable">usr</span> <span class="operator">=</span> listUser.get(i);</span><br><span class="line">                            <span class="keyword">if</span> (usr.getUsername().equals(number11)) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (usr.getPassword().equals(password)) &#123;</span><br><span class="line">                                    result1 = <span class="literal">true</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    System.out.println(<span class="string">&quot;密码错误，请重新输入密码&quot;</span>);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span> (result1) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> getCode();</span><br><span class="line">                        System.out.printf(<span class="string">&quot;请输入验证码%s&quot;</span>, str1);</span><br><span class="line">                        System.out.println();</span><br><span class="line">                        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">                        <span class="keyword">if</span> (str1.equals(str2)) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">                            run1 = <span class="literal">false</span>;</span><br><span class="line">                            result1 = <span class="literal">false</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;验证码错误请重新输入&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入账号&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (listUser.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                        user = scanner.next();</span><br><span class="line">                        <span class="keyword">while</span> (result2) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">                            password = scanner.next();</span><br><span class="line">                            System.out.println(<span class="string">&quot;请再次输入密码，两次需要一致&quot;</span>);</span><br><span class="line">                            <span class="type">String</span> <span class="variable">password1</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">                            <span class="keyword">if</span> (!password.equals(password1)) &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;两次密码不一致请重新输入&quot;</span>);</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            result2 = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println(<span class="string">&quot;请输入身份证号码&quot;</span>);</span><br><span class="line">                        <span class="keyword">while</span> (!result2) &#123;</span><br><span class="line">                            number11 = scanner.next();</span><br><span class="line">                            result2 = shenFenYanZheng(number11);</span><br><span class="line">                            <span class="keyword">if</span> (!result2) &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;身份证号码错误，请重新输入&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println(<span class="string">&quot;请输入手机号码&quot;</span>);</span><br><span class="line">                        <span class="keyword">while</span> (result2) &#123;</span><br><span class="line">                            phoneNumber = scanner.next();</span><br><span class="line">                            <span class="keyword">if</span> (phoneNumber.length() != <span class="number">11</span>) &#123;</span><br><span class="line">                                result2 = <span class="literal">true</span>;</span><br><span class="line">                                System.out.println(<span class="string">&quot;手机号码有误，请重新输入&quot;</span>);</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (phoneNumber.charAt(<span class="number">0</span>) == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                                result2 = <span class="literal">true</span>;</span><br><span class="line">                                System.out.println(<span class="string">&quot;手机号码有误，请重新输入&quot;</span>);</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            result2 = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; listUser.size(); i++) &#123;</span><br><span class="line">                            user = scanner.next();</span><br><span class="line">                            <span class="type">user</span> <span class="variable">user1</span> <span class="operator">=</span> listUser.get(i);</span><br><span class="line">                            <span class="keyword">if</span> (user1.getUsername().equals(user)) &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;账号已存在，请重新输入&quot;</span>);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">while</span> (result2) &#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">                            password = scanner.next();</span><br><span class="line">                            System.out.println(<span class="string">&quot;请再次输入密码，两次需要一致&quot;</span>);</span><br><span class="line">                            <span class="type">String</span> <span class="variable">password1</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">                            <span class="keyword">if</span> (!password.equals(password1)) &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;两次密码不一致请重新输入&quot;</span>);</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            result2 = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println(<span class="string">&quot;请输入身份证号码&quot;</span>);</span><br><span class="line">                        <span class="keyword">while</span> (!result2) &#123;</span><br><span class="line">                            number11 = scanner.next();</span><br><span class="line">                            result2 = shenFenYanZheng(number11);</span><br><span class="line">                            <span class="keyword">if</span> (!result2) &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;身份证号码错误，请重新输入&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println(<span class="string">&quot;请输入手机号码&quot;</span>);</span><br><span class="line">                        <span class="keyword">while</span> (result2) &#123;</span><br><span class="line">                            phoneNumber = scanner.next();</span><br><span class="line">                            <span class="keyword">if</span> (phoneNumber.length() != <span class="number">11</span>) &#123;</span><br><span class="line">                                result2 = <span class="literal">true</span>;</span><br><span class="line">                                System.out.println(<span class="string">&quot;手机号码有误，请重新输入&quot;</span>);</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (phoneNumber.charAt(<span class="number">0</span>) == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                                result2 = <span class="literal">true</span>;</span><br><span class="line">                                System.out.println(<span class="string">&quot;手机号码有误，请重新输入&quot;</span>);</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            result2 = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">user</span> <span class="variable">usr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">user</span>(user, password, number11, phoneNumber);</span><br><span class="line">                    listUser.add(usr);</span><br><span class="line">                    result2 = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入用户名&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">                    <span class="keyword">while</span>(result3) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;请输入身份证&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">number2</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">                        System.out.println(<span class="string">&quot;请输入手机号&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">phoneNumber1</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; listUser.size(); i++) &#123;</span><br><span class="line">                            <span class="type">user</span> <span class="variable">usr1</span> <span class="operator">=</span> listUser.get(i);</span><br><span class="line">                            <span class="keyword">if</span> (usr1.getUsername().equals(str1)) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (usr1.getShenfen().equals(number2) &amp;&amp; usr1.getPhoneNumber().equals(phoneNumber1)) &#123;</span><br><span class="line">                                    System.out.printf(<span class="string">&quot;你的密码是%s&quot;</span>, usr1.getPassword());</span><br><span class="line">                                    result3 = <span class="literal">false</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    System.out.println(<span class="string">&quot;身份证或手机号错误，请重新输入&quot;</span>);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;未注册&quot;</span>);</span><br><span class="line">                                result3 =<span class="literal">false</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">run</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (run) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;--------欢迎来到黑马管理系统----------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;1-添加学生&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;2-删除学生&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;3-修改学生&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;4-查询学生&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;5-退出&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (num) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span> -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入学生id&quot;</span>);</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        id = scanner.next();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">                            <span class="type">String</span> <span class="variable">id1</span> <span class="operator">=</span> list.get(i).getId();</span><br><span class="line">                            <span class="keyword">if</span> (id1.equals(id)) &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;id重复，请重新输入&quot;</span>);</span><br><span class="line">                                result = <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> (result);</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入学生姓名&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入学生年龄&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入学生地址&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">location</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">                    <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(id, name, age, location);</span><br><span class="line">                    list = stu.addStudent(list, stu);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span> -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入要删除的学生id&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">                    list = stu1.deleteStudent(list, id);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span> -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入学生id&quot;</span>);</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        id = scanner.next();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">                            <span class="type">String</span> <span class="variable">id1</span> <span class="operator">=</span> list.get(i).getId();</span><br><span class="line">                            <span class="keyword">if</span> (!id1.equals(id)) &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;id不存在，请重新输入&quot;</span>);</span><br><span class="line">                                result = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> (result);</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入学生姓名&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入学生年龄&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">                    System.out.println(<span class="string">&quot;请输入学生地址&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">location</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">                    <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(id, name, age, location);</span><br><span class="line">                    list = stu.updateStudent(list, stu);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span> -&gt; &#123;</span><br><span class="line">                    stu1.findStudent(list);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span> -&gt; &#123;</span><br><span class="line">                    run = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">shenFenYanZheng</span><span class="params">(String number)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(number.length()!=<span class="number">18</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] chr = number.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chr.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> chr[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>((chr[<span class="number">0</span>]-<span class="string">&#x27;0&#x27;</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">16</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num &lt; <span class="number">0</span> || num &gt; <span class="number">9</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(chr[i]&gt;<span class="number">80</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (chr[i] == <span class="number">122</span> || chr[i] == <span class="number">88</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (chr[i] &gt; <span class="number">57</span> || chr[i] &lt; <span class="number">48</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(<span class="number">10</span>)+<span class="number">48</span>;</span><br><span class="line">        <span class="type">char</span>[] cr = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> r.nextInt(<span class="number">5</span>);</span><br><span class="line">        cr[index] = (<span class="type">char</span>) number;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cr.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">Charcater</span> <span class="operator">=</span> r.nextInt(<span class="number">24</span>)+<span class="number">65</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">smallC</span> <span class="operator">=</span> r.nextInt(<span class="number">24</span>)+<span class="number">97</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> r.nextInt(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(cr[i]==<span class="string">&#x27;\u0000&#x27;</span>&amp;&amp;m==<span class="number">1</span>)&#123;</span><br><span class="line">                cr[i] =(<span class="type">char</span>)Charcater;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cr[i] == <span class="string">&#x27;\u0000&#x27;</span> &amp;&amp; m == <span class="number">0</span>) &#123;</span><br><span class="line">                cr[i] = (<span class="type">char</span>)smallC;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(cr);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String id, String name, <span class="type">int</span> age, String location)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.location = location;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLocation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> location;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLocation</span><span class="params">(String location)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.location = location;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Student&gt; <span class="title function_">addStudent</span><span class="params">(ArrayList&lt;Student&gt; list,Student stu)</span>&#123;</span><br><span class="line">        list.add(stu);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Student&gt; <span class="title function_">deleteStudent</span><span class="params">(ArrayList&lt;Student&gt; list , String id)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            <span class="keyword">if</span>(stu.getId().equals(id))&#123;</span><br><span class="line">             list.remove(i);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;id不存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Student&gt; <span class="title function_">updateStudent</span><span class="params">(ArrayList&lt;Student&gt; list , Student stu)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            <span class="keyword">if</span> (stu.getId().equals(stu.getId()))&#123;</span><br><span class="line">                list.remove(stu1);</span><br><span class="line">                list.add(stu);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findStudent</span><span class="params">(ArrayList&lt;Student&gt; list)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list.size()&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前没有学生信息，请添加后再查询&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;id        姓名      年龄    地址&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">                System.out.print(student.getId()+<span class="string">&quot;     &quot;</span>);</span><br><span class="line">                System.out.print(student.getName()+<span class="string">&quot;      &quot;</span>);</span><br><span class="line">                System.out.print(student.getAge()+<span class="string">&quot;    &quot;</span>);</span><br><span class="line">                System.out.println(student.getLocation());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="static静态修饰符"><a href="#static静态修饰符" class="headerlink" title="static静态修饰符"></a>static静态修饰符</h3><p><strong>静态成员变量对当前类所有对象共享</strong></p><p><strong>调用方法：类名调用（类.静态变量 ），对象调用</strong></p><p><strong>静态方法&#x2F;工具类</strong></p><p><strong>工具类：可以实现一些功能，但是不描述任何事情</strong> 例如：接口</p><p>私有化构造方法因为工具类创建对象没有任何意义</p><p><strong>调用方法：</strong></p><p><strong>方法所在的类.方法名</strong></p><p><strong>方法所在的类的对象.调用</strong></p><p><strong>静态方法注意事项</strong>：</p><p><strong>①静态方法中只能调用静态成员方法，静态成员对象，实例成员方法可以调用实例成员方法，静态成员方法，实例成员变量和静态成员变量</strong></p><p><strong>②静态成员方法中没有this关键字</strong></p><p><u>this的含义：表示方法调用者的地址值</u></p><p><strong>底层实现原理：</strong></p><h5 id="方法角度"><a href="#方法角度" class="headerlink" title="方法角度"></a>方法角度</h5><p><strong>例：若有一个Student JavaBean类</strong></p><p><strong>stu.study();</strong></p><p><strong>当对象调用实例对象方法时，有个由虚拟机赋值的默认参数 <u>Student this</u>,返回的是调用者的地址值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(Student <span class="built_in">this</span>)</span>&#123;</span><br><span class="line">    System.out.println(<span class="built_in">this</span>.name+<span class="built_in">this</span>.age+<span class="built_in">this</span>.id);</span><br><span class="line">    <span class="built_in">this</span>.show2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;show2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原因：实例成员方法，变量，调用时往往跟对象相关，所以必须要有this ，而静态的方法或对象是共享的，与对象无关，所以没有this关键字</strong></p><p><strong>所以静态成员方法只能调用静态成员方法，静态成员对象，若调用实例成员方法，实例成员变量，则必须用到this，但静态方法，对象，本身与调用对象无关，不包含this，所以无法调用</strong></p><h5 id="内存角度"><a href="#内存角度" class="headerlink" title="内存角度"></a>内存角度</h5><p><strong>静态成员方法，对象，加载时跟类有关,在堆内存中开辟静态区，与类共同加载,一定优先于对象加载</strong></p><p><strong>实例成员方法，实例成员对象，加载时与方法有关，如Student stu &#x3D; new Student（）；stu.show1（）；即方法出现，才会加载。</strong></p><p><strong>当静态方法，对象，想调用实例成员方法或对象时，其并未在堆内存中加载，所以无法调用</strong></p><p>静态方法不能访问非静态对象图例</p><p><strong>简要概括：静态方法调用时，所需数据都会在静态区中查找，静态区只存储静态对象；</strong></p><p>静态方法不能调用实例成员方法图例</p><p><strong>简要概括：调用实例成员方法时需要调用者（实例成员变量），而静态方法中调用方法并没有调用者，所以无法调用</strong></p><h3 id="继承的低层实现原理"><a href="#继承的低层实现原理" class="headerlink" title="继承的低层实现原理"></a>继承的低层实现原理</h3><p><strong>子类可以继承父类所有类型变量，父类的虚方法（非private，非static，非final）</strong></p><p><strong>子类不可以继承父类的构造方法</strong>   <u>注意：继承与调用的区别</u></p><p><strong>当子类继承父类的私有变量时，使用时需要用get set方法</strong></p><p><strong>与之前不同的是，方法区中，加载子类字节码文件后还会加载父类字节码文件</strong></p><p><strong>新建对象时，会将堆内存开辟的空间一分为二，一份交给存放父类变量，一份存放子类变量</strong></p><p><strong>虚方法继承关系图</strong></p><p><strong>this与super</strong></p><p><strong>this去找本类的成员变量</strong></p><p><strong>super去找父类的成员变量</strong></p><h3 id="方法重写实质是重写虚方法表中的方法"><a href="#方法重写实质是重写虚方法表中的方法" class="headerlink" title="方法重写实质是重写虚方法表中的方法"></a>方法重写实质是重写虚方法表中的方法</h3><p><strong>子类方法重写若要添加功能，则可以在方法中用    super.方法名();则会调用父类的方法中的内容，不用自己在重新写</strong></p><h3 id="子类构造方法的访问特点"><a href="#子类构造方法的访问特点" class="headerlink" title="子类构造方法的访问特点"></a>子类构造方法的访问特点</h3><h3 id="THIS-，SUPER汇总"><a href="#THIS-，SUPER汇总" class="headerlink" title="THIS ，SUPER汇总"></a>THIS ，SUPER汇总</h3><h5 id="This"><a href="#This" class="headerlink" title="This"></a>This</h5><p>理解为一个变量，表示当前方法调用者的地址值</p><p>this(……)访问构造方法，作用，为成员变量设置默认值</p><h5 id="super"><a href="#super" class="headerlink" title="super"></a>super</h5><p>代表父类储存空间</p><p>super(…….)访问构造方法</p><p>super.成员方法（）  访问父类成员方法</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>调用成员变量时，编译看左边，运行看左边（父类有此变量时，编译成功，运行时从父类中找成员变量的值）</p><p>调用成员方法时，编译看左边，运行看右边（父类有此方法时，编译成功，运行时从子类找成员方法）</p><p><img src="/2023/02/10/JAVA%E5%9F%BA%E7%A1%80%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220930190442057.png" alt="image-20220930190442057"></p><p><strong>弊端</strong></p><p><strong>不能调用子类的特有功能</strong></p><p>解决方案，将父类对象强转成子类对象</p><p>判断能否强转，<u>对象名 instanceof 类名</u></p><p>JDK14新特性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog d)&#123;    <span class="comment">//判断是否能强转，若能强转，则直接将a转换成Dog类型,变量名为d</span></span><br><span class="line">    d.lookHome();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat c) &#123;</span><br><span class="line">    c.CatchMouse();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="包名-final"><a href="#包名-final" class="headerlink" title="包名 final"></a>包名 final</h3><h4 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h4><p><strong>全类名 : 全包名.类名</strong></p><p><img src="/2023/02/10/JAVA%E5%9F%BA%E7%A1%80%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20220930202416613.png" alt="image-20220930202416613"></p><p><strong>当用两个包中的同名类，第一个类可以导包，第二个需要用全类名</strong></p><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p>修饰方法时，表示该方法不能被重写  （可视作一个规则，不希望被人改变）</p><p>修饰变量时，只能被赋值一次，赋值之后不能发生改变（必须直接赋值）</p><p>变量为引用数据类型时，地址值不能改变，属性值可以改变</p><p>变量为基本数据类型，值不可以被改变</p><p>修饰类时，表示该类不能被继承</p><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p>static{</p><p>}</p><p>构造代码块基础上加static修饰符，随着类加载而加载，自动触发，只执行一次</p><p>使用场景：数据初始化的时候使用</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>是一种特殊的类，可以做信息标志分类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Seanson</span> &#123;</span><br><span class="line">    Spring,Summer,Autumn,Winter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举是最终类，不可被继承</p><p>枚举的构造器都是私有的</p><p>枚举内的对象都是被final修饰的</p><p>相当于多例模式</p><p><strong>相较于常量，枚举可以约束入参限制</strong></p><p><strong>调用方法</strong>：<strong>Season.Spring 生成一个Seanson类 名叫Spring</strong></p><p>没有具体值，仅是一个对象</p><h3 id="抽象修饰符Abstract"><a href="#抽象修饰符Abstract" class="headerlink" title="抽象修饰符Abstract"></a>抽象修饰符Abstract</h3><p>抽象类必须被继承</p><p>抽象方法不能有方法体</p><p>抽象类中不一定有抽象方法，抽象方法一定在抽象类中</p><p>子类继承时，必须重写抽象方法，否则子类必须被定义成抽象类</p><p><strong>抽象类不能创建对象</strong></p><h4 id="模板方法模式-提高代码复用性"><a href="#模板方法模式-提高代码复用性" class="headerlink" title="模板方法模式 提高代码复用性"></a>模板方法模式 提高代码复用性</h4><p>当父类一个方法，在子类中实现时，部分与父类相同，但部分与父类不同时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span>&#123;       <span class="comment">//final防止子类重写</span></span><br><span class="line">    System.out.println(<span class="string">&quot;sssss&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;省略&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(writeYourself());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;省略&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;省略&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> String <span class="title function_">writeYourself</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>子类只需重写writeYourself方法即可，调用时调用write();</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>代表一种规范，所以内部东西都是public的</p><p>只能有常量，方法</p><p>方法默认是public，default的</p><p><strong>实现类可以多实现</strong></p><p><strong>接口之间可以多继承，方便子类实现</strong></p><p><strong>当类同时有继承与实现时，要先继承，再实现</strong></p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>定义在内部的类</p><p>当一个事物的内部还有一个结构需要进行描述，且只为外部服务，则可以定义一个内部类去描述内部结构</p><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>创建对象方法:   Outter.Inner in &#x3D; new Outter.Inner();</p><p>其余与正常的类没有区别</p><p><strong>可以使用外部类的静态成员变量</strong></p><p><strong>不可以使用外部类的实例成员变量</strong></p><h4 id="成员内部类-x2F-实例内部类"><a href="#成员内部类-x2F-实例内部类" class="headerlink" title="成员内部类&#x2F;实例内部类"></a>成员内部类&#x2F;实例内部类</h4><p>无static修饰的内部类</p><p>属于对象</p><p>构造方法: Outter.Inner in &#x3D; new Outer().new Inner();</p><p><strong>可以使用外部类的实例成员变量，静态成员变量</strong></p><p>当有严格的先后顺序，比如先有鸡，后有蛋，就要用成员内部类创建鸡蛋</p><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>没有名字的局部内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>() &#123;            <span class="comment">//----------------------</span></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;                          这部分为匿名内部类，在内部进行方法的重写</span><br><span class="line">               System.out.println(<span class="string">&quot;跑&quot;</span>);   </span><br><span class="line">           &#125;                                 <span class="comment">//---------------------</span></span><br><span class="line">       &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不需要定义子类，快速方便定义一个对象</strong></p><p>注意：此方法创建的对象不属于animal ，因为animal为抽象类，此对象属于自己的对象，相当于animall的子类</p><p>会产生一个class文件</p><p>可以作为方法的形参传送</p><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><h3 id="BigDecimal大数据"><a href="#BigDecimal大数据" class="headerlink" title="BigDecimal大数据"></a>BigDecimal大数据</h3><p>解决浮点数运算失真问题</p><p>BigDecima d &#x3D; BigDecimal.valueof(   );最好的方式，有效避免浮点数运算失真</p><p>原理，先将数据通过.toString变成字符串，再将字符串变成BigDecima类型</p><p>加减乘除</p><p>.add  </p><p>.subtract</p><p>.mutipily</p><p>.divide</p><p>返回的是BigDecima类型</p><p><strong>注意一定要精度运算</strong></p><p>当不能精度运算时，要指定参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> BigDecimal.valueOf(<span class="number">3</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">c</span> <span class="operator">=</span> BigDecimal.valueOf(<span class="number">10</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">d</span> <span class="operator">=</span> c.divide(b,<span class="number">2</span>, RoundingMode.HALF_DOWN);</span><br><span class="line">System.out.println(d);  <span class="comment">//保留几位小数</span></span><br><span class="line">                                          <span class="comment">//舍入模式，如四舍五入，向上，向下取整</span></span><br></pre></td></tr></table></figure><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p><strong>可以把字符串转换成对应真实数据类型 “23” -&gt;23</strong></p><p>Integer.valueof( str );</p><p>…….</p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>匹配规则</p><p>match(      )</p><p><img src="/2023/02/10/JAVA%E5%9F%BA%E7%A1%80%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221001192022554.png" alt="image-20221001192022554"></p><p>默认匹配一个字符 想匹配多个则要用贪婪的量词</p><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><p>Arrays.toString( )   变成字符串</p><p>**Arrays.sort (   )    只能排序引用类型      **</p><p><strong>可以使用比较器自定义排序规则，对于有值特性的数组是默认升序排序</strong></p><p>Arrays.binarySearch( array , int a  )  二分查找  没有时返回应该插入位置的负数</p><p><strong>comparator比较器对象</strong></p><p>可以改变内部比较规则以更改排序规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Integer[] arr = &#123;<span class="number">1</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">54</span>,<span class="number">98</span>,<span class="number">6</span>&#125;;</span><br><span class="line">Arrays.sort(arr,<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;()&#123; <span class="comment">//匿名内部类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o1&gt;o2)&#123;                 </span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;       <span class="comment">//系统默认o1&gt;o2返回1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o1 &lt; o2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;        <span class="comment">//系统默认o1&lt;o2返回-1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;            <span class="comment">//默认相等时返回0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br></pre></td></tr></table></figure><p><strong>系统默认为升序排序</strong> </p><p><strong>o1&gt;o2时返回1， 会把o1往右放</strong></p><p><strong>当把return值修改为-1时，系统则会认为o1&lt;o2,所以会把o2往右放</strong></p><p><strong>以此类推就形成了降序排序</strong></p><p>通过比较器可以实现对一些特殊对象如自己创建的Student类按照特定成员排序，如按照age，id排序</p><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>简化匿名内部类写法</p><p><strong>只能简化只有一个抽象方法的接口的匿名内部类</strong></p><p>函数时接口：里面只能有一个抽象方法 </p><p>可用@FunctionInterface注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(arr,(o1,o2)-&gt;&#123;</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="keyword">if</span> (o1&gt;o2)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o1 &lt; o2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>只要重写方法的形参列表以及内部方法体，将形参列表用箭头指向方法体</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>只能存储对象类型，如引用数据类型，包装类</p><h3 id="常用API-1"><a href="#常用API-1" class="headerlink" title="常用API"></a>常用API</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="comment">//添加元素</span></span><br><span class="line">    collection.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    collection.add(<span class="string">&quot;bc&quot;</span>);</span><br><span class="line">    <span class="comment">//清空集合元素</span></span><br><span class="line">    collection.clear();</span><br><span class="line">    <span class="comment">//判断集合是否为空</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> collection.isEmpty();</span><br><span class="line">    <span class="comment">//获取集合大小</span></span><br><span class="line">    collection.size();</span><br><span class="line">    <span class="comment">//判断集合是否包含某个元素</span></span><br><span class="line">    collection.contains(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    <span class="comment">//删除某个元素</span></span><br><span class="line">    collection.remove(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    <span class="comment">//集合转数组</span></span><br><span class="line">    collection.toArray(); <span class="comment">//默认转换成object类型的数组</span></span><br><span class="line">    <span class="type">Collection</span> <span class="variable">collection1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        collection1.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        collection1.add(<span class="string">&quot;dddd&quot;</span>);</span><br><span class="line">        collection.addAll(collection1);<span class="comment">//集合与集合之间的添加</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="collection遍历"><a href="#collection遍历" class="headerlink" title="collection遍历"></a>collection遍历</h3><ul><li>利用迭代器Iterator遍历</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    collection.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    collection.add(<span class="string">&quot;bc&quot;</span>);</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> collection.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;  <span class="comment">//判断迭代器当前指向是否有元素</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">a</span> <span class="operator">=</span> iterator.next();  <span class="comment">//会先取元素再移位</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迭代器越界时会出现NoSuchElementException异常</p><p>底层原理</p><p><img src="/2023/02/10/JAVA%E5%9F%BA%E7%A1%80%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221012135528103.png" alt="image-20221012135528103"></p><ul><li>ForEach循环</li><li>相当于迭代器的简化循环</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    collection.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    collection.add(<span class="string">&quot;bc&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Object o : collection)&#123;   <span class="comment">//左边写集合内的数据类型  右边写被遍历集合或数组</span></span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Lambda表达式</p></li><li><p>底层原理：会将对象送到forEach方法体中，内部会对集合使用增强for循环遍历，方法体则是重写的lambda方法，增强循环中的t变量遍历到一个变量，将t变量的值交给lambda方法体中的str，如此循环往复</p></li><li><p>&#96;&#96;&#96;java<br>public static void main(String[] args) {<br>Collection collection &#x3D; new ArrayList();<br>collection.add(“a”);<br>collection.add(“bc”);<br>collection.forEach((str)-&gt;{<br>    System.out.println(str);<br>});<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### HashSet：无序，不重复，无索引，底层是哈希表</span><br><span class="line"></span><br><span class="line">- 根据hashcode计算出来的int整数，如果没有重写object中的hashcode方法，每个对象计算出来的哈希值都不同</span><br><span class="line"></span><br><span class="line">- 如果已经重写了hashcode方法，所有对象只要属性相同，那么哈希值就相同</span><br><span class="line"></span><br><span class="line">- 哈希碰撞：计算出来的两个哈希值一样</span><br><span class="line">- 当HashSet存入自定义对象时，必须重写hashcode和equals方法</span><br><span class="line"></span><br><span class="line">### 哈希表</span><br><span class="line"></span><br><span class="line">JDK8以前 :数组+链表</span><br><span class="line"></span><br><span class="line">JDK8以前的底层原理</span><br><span class="line"></span><br><span class="line">![image-20221012164506110](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221012164506110.png)</span><br><span class="line"></span><br><span class="line">加载因子：当数组大小为 16*加载因子 时，数组会自动扩容成两倍</span><br><span class="line"></span><br><span class="line">JDK8以后: 数组+链表+红黑树</span><br><span class="line"></span><br><span class="line">同上：不同点，当链表长度大于8，数组长度大于64，链表长度大于8的链表结构会转换成红黑树的结构</span><br><span class="line"></span><br><span class="line">遍历时从0开始，一根一根链表遍历</span><br><span class="line"></span><br><span class="line">### LinkdedHashSet：有序，不重复，无索引</span><br><span class="line"></span><br><span class="line">底层结构：底层仍然是哈希表，但额外多了一个双链表记录存储的数据顺序</span><br><span class="line"></span><br><span class="line">![image-20221012171113561](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221012171113561.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">遍历时遍历的是双向链表</span><br><span class="line"></span><br><span class="line">### TreeSet</span><br><span class="line"></span><br><span class="line">底层为红黑树</span><br><span class="line"></span><br><span class="line">​       **存储整数并排序**</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    TreeSet&lt;Integer&gt; ts = new TreeSet&lt;&gt;();</span><br><span class="line">    ts.add(5);</span><br><span class="line">    ts.add(3);</span><br><span class="line">    ts.add(1);</span><br><span class="line">    ts.add(2);</span><br><span class="line">    ts.add(4);</span><br><span class="line">    System.out.println(ts);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>默认存储规则</p><ul><li>对于整数小数类型，默认按照从小到大排序</li><li>对于字符，字符串，按照asc码值升序排列</li><li>字符串比较时，从第一个字母开始比较，都一样就比较第二个</li></ul><p>对象比较规则</p><ul><li><p>JAVABEAN类实现Comparable接口指定比较规则</p></li><li><p>&#96;&#96;&#96;java<br>public class Student implements Comparable<Student> { &#x2F;&#x2F;注意comparable接口有泛型要求<br>@Override<br>public int compareTo(Student o) {  &#x2F;&#x2F;this表示当前要添加的元素，o表示已经添加的元素<br>int result &#x3D; this.getAge()-o.getAge();   &#x2F;&#x2F;表示比较规则按照年龄排序<br>return result; &#x2F;&#x2F;返回值：-1  认为当前添加的元素小<br>               &#x2F;&#x2F;      正数 认为要添加的元素大<br>               &#x2F;&#x2F;       0   表示添加的元素已经存在<br>   }<br>}</Student></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 创建treeset时，重写比较器compartor</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  TreeSet&lt;String&gt; ts = new TreeSet(new Comparator&lt;String&gt;() &#123;</span><br><span class="line">      @Override</span><br><span class="line">      public int compare(String o1, String o2) &#123;</span><br><span class="line">          int i = o1.length()-o2.length();</span><br><span class="line">          i = i==0?o1.compareTo(o2):i;</span><br><span class="line">          return i;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li></ul><p>综合练习</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      TreeSet&lt;Student&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">              <span class="type">int</span> <span class="variable">Score1</span> <span class="operator">=</span> o1.getChinese()+o1.getEnglish()+o1.getMath();</span><br><span class="line">              <span class="type">int</span> <span class="variable">Score2</span> <span class="operator">=</span> o2.getChinese()+o2.getEnglish()+o2.getMath();</span><br><span class="line">              <span class="keyword">if</span> (Score1-Score2==<span class="number">0</span>)&#123;</span><br><span class="line">                  <span class="keyword">if</span> (o1.getChinese()==o2.getChinese())&#123;</span><br><span class="line">                      <span class="keyword">if</span> (o1.getMath()==o2.getMath())&#123;</span><br><span class="line">                          <span class="keyword">if</span> (o1.getEnglish()==o2.getEnglish())&#123;</span><br><span class="line">                              <span class="keyword">if</span> (o1.getAge()==o2.getAge())&#123;</span><br><span class="line">                                  <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">                              &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                  <span class="keyword">return</span> o1.getAge()-o2.getAge();</span><br><span class="line">                              &#125;</span><br><span class="line">                          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                              <span class="keyword">return</span> o1.getEnglish()-o2.getEnglish();</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                          <span class="keyword">return</span> o1.getMath()-o2.getMath();</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                      <span class="keyword">return</span> o1.getChinese()-o2.getChinese();</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> Score1-Score2;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;xh&quot;</span>,<span class="number">20</span>,<span class="number">85</span>,<span class="number">55</span>,<span class="number">99</span>);</span><br><span class="line">      <span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;bd&quot;</span>,<span class="number">18</span>,<span class="number">77</span>,<span class="number">89</span>,<span class="number">84</span>);</span><br><span class="line">      <span class="type">Student</span> <span class="variable">student3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;cc&quot;</span>,<span class="number">21</span>,<span class="number">85</span>,<span class="number">88</span>,<span class="number">94</span>);</span><br><span class="line">      <span class="type">Student</span> <span class="variable">student4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;aa&quot;</span>,<span class="number">20</span>,<span class="number">91</span>,<span class="number">94</span>,<span class="number">85</span>);</span><br><span class="line">      <span class="type">Student</span> <span class="variable">student5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;dhm&quot;</span>,<span class="number">22</span>,<span class="number">92</span>,<span class="number">100</span>,<span class="number">77</span>);</span><br><span class="line">      treeSet.add(student1);</span><br><span class="line">      treeSet.add(student2);</span><br><span class="line">      treeSet.add(student3);</span><br><span class="line">      treeSet.add(student4);</span><br><span class="line">      treeSet.add(student5);</span><br><span class="line">        <span class="keyword">for</span> (Student student : treeSet) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双列集合"><a href="#双列集合" class="headerlink" title="双列集合"></a>双列集合</h3><p>键不能重复，值可以重复</p><h4 id="HashMap集合"><a href="#HashMap集合" class="headerlink" title="HashMap集合"></a>HashMap集合</h4><p>底层结构与HashSet一样，但键相同时，会覆盖掉原来的entry</p><p>3种遍历方法</p><ul><li>keySet:遍历键列，通过键去获取值</li><li>entrySet:遍历键值对，分别用getKey getValue获取键值<ol><li>增强for循环</li><li>forEach循环 ：低层其实还是调用了增强for循环</li><li>迭代器循环</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Map&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;丁真&quot;</span>,<span class="string">&quot;小马&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;肖战&quot;</span>,<span class="string">&quot;牛子&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;一凡&quot;</span>,<span class="string">&quot;入狱&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;坤坤&quot;</span>,<span class="string">&quot;太美&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;只因&quot;</span>,<span class="string">&quot;鸡你&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String s : map.keySet()) &#123;</span><br><span class="line">        System.out.println(map.get(s));</span><br><span class="line">    &#125;</span><br><span class="line">    Set&lt;Map.Entry&lt;String,String&gt;&gt; set = map.entrySet();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; stringStringEntry : set) &#123; <span class="comment">//增强for循环</span></span><br><span class="line">        stringStringEntry.getKey();</span><br><span class="line">        stringStringEntry.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    map.entrySet().forEach((String key,String value)-&gt;&#123; <span class="comment">//foreach循环</span></span><br><span class="line">        System.out.println(key);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> map.values().iterator();           <span class="comment">//迭代器循环遍历</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator1</span> <span class="operator">=</span> map.entrySet().iterator();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator2</span> <span class="operator">=</span> map.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator2.hasNext())&#123;</span><br><span class="line">            System.out.println(map.get(iterator2.next()));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h4><p>底层为红黑树：不重复，无索引，可排序，排序时按照键的排序排列</p><p>treeMap重写comparator方法排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    TreeMap&lt;Integer,String&gt; tm = <span class="keyword">new</span> <span class="title class_">TreeMap</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> o2-o1; <span class="comment">//降序排列</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Collections集合工具类"><a href="#Collections集合工具类" class="headerlink" title="Collections集合工具类"></a>Collections集合工具类</h3><p>Collections.addAll();</p><p>Collections.shuffle();打乱集合顺序</p><h3 id="自动点名器"><a href="#自动点名器" class="headerlink" title="自动点名器"></a>自动点名器</h3><h4 id="带概率的自动点名器"><a href="#带概率的自动点名器" class="headerlink" title="带概率的自动点名器"></a>带概率的自动点名器</h4><p>创建一个选择集合，有7个1 3个0，1代表男生，0代表女生，即可实现70概率选择男生，30概率选择女生</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Collections.addAll(list,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    Collections.addAll(list,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    Collections.shuffle(list);</span><br><span class="line">    <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">    List&lt;Student&gt; listBoy = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Student&gt; listGirl = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (number==<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(listBoy.get(r.nextInt(listBoy.size())).getName());</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(listGirl.get(r.nextInt(listGirl.size())).getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="被点到的学生不会被再点到，都点完之后开启第二轮"><a href="#被点到的学生不会被再点到，都点完之后开启第二轮" class="headerlink" title="被点到的学生不会被再点到，都点完之后开启第二轮"></a>被点到的学生不会被再点到，都点完之后开启第二轮</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       List&lt;String&gt;  list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">       <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;<span class="number">10</span>; j++) &#123;  <span class="comment">//表示循环i轮</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">               <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> list.remove(r.nextInt(list.size()));</span><br><span class="line">               list1.add(name);</span><br><span class="line">               System.out.println(name);</span><br><span class="line">           &#125;</span><br><span class="line">           list.addAll(list1);</span><br><span class="line">           list1.clear();</span><br><span class="line">           </span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="权重随机算法"><a href="#权重随机算法" class="headerlink" title="权重随机算法"></a>权重随机算法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeightRandom</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;T&gt; items = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span>[] weights;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeightRandom</span><span class="params">(List&lt;ItemWithWeight&lt;T&gt;&gt; itemsWithWeight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.calWeights(itemsWithWeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算权重，初始化或者重新定义权重时使用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">calWeights</span><span class="params">(List&lt;ItemWithWeight&lt;T&gt;&gt; itemsWithWeight)</span> &#123;</span><br><span class="line">        items.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算权重总和</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">originWeightSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ItemWithWeight&lt;T&gt; itemWithWeight : itemsWithWeight) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">weight</span> <span class="operator">=</span> itemWithWeight.getWeight();</span><br><span class="line">            <span class="keyword">if</span> (weight &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            items.add(itemWithWeight.getItem());</span><br><span class="line">            <span class="keyword">if</span> (Double.isInfinite(weight)) &#123;</span><br><span class="line">                weight = <span class="number">10000.0D</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Double.isNaN(weight)) &#123;</span><br><span class="line">                weight = <span class="number">1.0D</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            originWeightSum += weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算每个item的实际权重比例</span></span><br><span class="line">        <span class="type">double</span>[] actualWeightRatios = <span class="keyword">new</span> <span class="title class_">double</span>[items.size()];</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ItemWithWeight&lt;T&gt; itemWithWeight : itemsWithWeight) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">weight</span> <span class="operator">=</span> itemWithWeight.getWeight();</span><br><span class="line">            <span class="keyword">if</span> (weight &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            actualWeightRatios[index++] = weight / originWeightSum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算每个item的权重范围</span></span><br><span class="line">        <span class="comment">// 权重范围结束位置</span></span><br><span class="line">        weights = <span class="keyword">new</span> <span class="title class_">double</span>[items.size()];</span><br><span class="line">        <span class="type">double</span> <span class="variable">weightRangeStartPos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            weights[i] = weightRangeStartPos + actualWeightRatios[i];</span><br><span class="line">            weightRangeStartPos += actualWeightRatios[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于权重随机算法选择</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">choose</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">random</span> <span class="operator">=</span> ThreadLocalRandom.current().nextDouble();</span><br><span class="line">        <span class="comment">//返回一个伪随机的介于0-1的双精度值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(weights, random); </span><br><span class="line">        <span class="comment">//对weights进行二分查找，具体返回值若找到random值，返回下标值，若找不到random值，则返回他应该插入           的下标值取反减去1</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            index = -index - <span class="number">1</span>;   </span><br><span class="line">            <span class="comment">//对于weights中找不到random值后的返回值进行处理，获得insertPoint，从而找到抽取到的item</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> items.get(index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index &lt; weights.length &amp;&amp; random &lt; weights[index]) &#123;  </span><br><span class="line">            <span class="comment">//判断下标是否超出数组大小，再判断随机值是否小于所处权重范围的上限</span></span><br><span class="line">            <span class="keyword">return</span> items.get(index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通常不会走到这里，为了保证能得到正确的返回，这里随便返回一个</span></span><br><span class="line">        <span class="keyword">return</span> items.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ItemWithWeight</span>&lt;T&gt; &#123;</span><br><span class="line">        T item;</span><br><span class="line">        <span class="type">double</span> weight;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ItemWithWeight</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ItemWithWeight</span><span class="params">(T item, <span class="type">double</span> weight)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = item;</span><br><span class="line">            <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">getItem</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setItem</span><span class="params">(T item)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = item;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getWeight</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWeight</span><span class="params">(<span class="type">double</span> weight)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// for test</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sampleCount</span> <span class="operator">=</span> <span class="number">1_000_000</span>;</span><br><span class="line"></span><br><span class="line">        ItemWithWeight&lt;String&gt; server1 = <span class="keyword">new</span> <span class="title class_">ItemWithWeight</span>&lt;&gt;(<span class="string">&quot;server1&quot;</span>, <span class="number">1.0</span>);</span><br><span class="line">        ItemWithWeight&lt;String&gt; server2 = <span class="keyword">new</span> <span class="title class_">ItemWithWeight</span>&lt;&gt;(<span class="string">&quot;server2&quot;</span>, <span class="number">3.0</span>);</span><br><span class="line">        ItemWithWeight&lt;String&gt; server3 = <span class="keyword">new</span> <span class="title class_">ItemWithWeight</span>&lt;&gt;(<span class="string">&quot;server3&quot;</span>, <span class="number">2.0</span>);</span><br><span class="line"></span><br><span class="line">        WeightRandom&lt;String&gt; weightRandom = <span class="keyword">new</span> <span class="title class_">WeightRandom</span>&lt;&gt;(Arrays.asList(server1, server2, server3));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统计 (这里用 AtomicInteger 仅仅是因为写起来比较方便，这是一个单线程测试)</span></span><br><span class="line">        Map&lt;String, AtomicInteger&gt; statistics = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="comment">//AtomicInteger原子性变量，线程安全</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sampleCount; i++) &#123;</span><br><span class="line">            statistics</span><br><span class="line">                    .computeIfAbsent(weightRandom.choose(), (k) -&gt; <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>()) </span><br><span class="line">                <span class="comment">//没有形参时返回0，具体语句作用就是寻找HashMap中是否存在这个item，若不存在，创建一个键值                   对，值为0，存在则返回该键对应的值</span></span><br><span class="line">                    .incrementAndGet();<span class="comment">//对应值自增后返回</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        statistics.forEach((k, v) -&gt; &#123; </span><br><span class="line">            <span class="comment">//输出每个键值对，将值除以循环次数得到抽取概率，观察结果是否符合权重比</span></span><br><span class="line">            <span class="type">double</span> <span class="variable">hit</span> <span class="operator">=</span> (<span class="type">double</span>) v.get() / sampleCount;</span><br><span class="line">            System.out.println(k + <span class="string">&quot;, hit:&quot;</span> + hit);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="带有权重的点名器"><a href="#带有权重的点名器" class="headerlink" title="带有权重的点名器"></a>带有权重的点名器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeightSort</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; name = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span>[] weights;</span><br><span class="line">    WeightSort(List&lt;itemWithWeight&lt;T&gt;&gt; list)&#123;</span><br><span class="line">        calWeight(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">calWeight</span><span class="params">(List&lt;itemWithWeight&lt;T&gt;&gt; list)</span>&#123;</span><br><span class="line">        name.clear();</span><br><span class="line">        <span class="type">double</span> <span class="variable">weightSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (itemWithWeight&lt;T&gt; itemWithWeight : list) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">weight</span> <span class="operator">=</span> itemWithWeight.getWeight();</span><br><span class="line">            <span class="keyword">if</span> (weight&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            name.add(itemWithWeight.getName());</span><br><span class="line">            <span class="keyword">if</span> (Double.isInfinite(weight))&#123;</span><br><span class="line">                weight = <span class="number">10000.0D</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (Double.isNaN(weight))&#123;</span><br><span class="line">                weight = <span class="number">0.0D</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            weightSum += weight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span>[] actualWeightPercent = <span class="keyword">new</span> <span class="title class_">double</span>[name.size()];</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (itemWithWeight&lt;T&gt; itemWithWeight : list) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">weightPercent</span> <span class="operator">=</span> itemWithWeight.getWeight() / weightSum;</span><br><span class="line">            actualWeightPercent[count++] = weightPercent;</span><br><span class="line">        &#125;</span><br><span class="line">        weights = <span class="keyword">new</span> <span class="title class_">double</span>[name.size()];</span><br><span class="line">        <span class="type">double</span> <span class="variable">weightStartPoms</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; weights.length; i++) &#123;</span><br><span class="line">            weights[i] = weightStartPoms + actualWeightPercent[i];</span><br><span class="line">            weightStartPoms += actualWeightPercent[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">choose</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">random</span> <span class="operator">=</span> ThreadLocalRandom.current().nextDouble();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(weights,random);</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            index = -index-<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name.get(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index&lt;weights.length &amp;&amp; random &lt; weights[index])&#123;</span><br><span class="line">            <span class="keyword">return</span> name.get(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> name.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">itemWithWeight</span>&lt;T&gt;&#123;</span><br><span class="line">        <span class="keyword">private</span> T name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">double</span> weight;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">itemWithWeight</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">itemWithWeight</span><span class="params">(T name, <span class="type">double</span> weight)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(T name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> weight</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getWeight</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> weight</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWeight</span><span class="params">(<span class="type">double</span> weight)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;itemWithWeight&#123;name = &quot;</span> + name + <span class="string">&quot;, weight = &quot;</span> + weight + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">time</span> <span class="operator">=</span> <span class="number">1500</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">countRare</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">countLegend</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">countHistory</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">countHeirlooms</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;String, AtomicInteger&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        itemWithWeight&lt;String&gt; gift1 = <span class="keyword">new</span> <span class="title class_">itemWithWeight</span>&lt;String&gt;(<span class="string">&quot;传家宝&quot;</span>,<span class="number">0.4</span>);</span><br><span class="line">        itemWithWeight&lt;String&gt; gift2 = <span class="keyword">new</span> <span class="title class_">itemWithWeight</span>&lt;String&gt;(<span class="string">&quot;传说&quot;</span>,<span class="number">5.6</span>);</span><br><span class="line">        itemWithWeight&lt;String&gt; gift3 = <span class="keyword">new</span> <span class="title class_">itemWithWeight</span>&lt;String&gt;(<span class="string">&quot;史诗&quot;</span>,<span class="number">18.7</span>);</span><br><span class="line">        itemWithWeight&lt;String&gt; gift4 = <span class="keyword">new</span> <span class="title class_">itemWithWeight</span>&lt;String&gt;(<span class="string">&quot;稀有&quot;</span>,<span class="number">75.3</span>);</span><br><span class="line">        List&lt;itemWithWeight&lt;String&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        Collections.addAll(list,gift1,gift2,gift3,gift4);</span><br><span class="line">        WeightSort&lt;String&gt; weightSort = <span class="keyword">new</span> <span class="title class_">WeightSort</span>(list);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; time; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> weightSort.choose();</span><br><span class="line">            <span class="keyword">switch</span> (name)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;传家宝&quot;</span>:countHeirlooms++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;稀有&quot;</span>:countRare++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;史诗&quot;</span>:countHistory++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;传说&quot;</span>:countLegend++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map.computeIfAbsent(name,(k)-&gt;<span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>)).incrementAndGet();</span><br><span class="line">        &#125;</span><br><span class="line">        map.forEach((k,v)-&gt;&#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">hit</span> <span class="operator">=</span> v.get()/time;</span><br><span class="line">            System.out.println(k+<span class="string">&quot;概率为&quot;</span>+hit);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;传家宝抽到&quot;</span>+countHeirlooms+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;稀有抽到&quot;</span>+countRare+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;史诗抽到&quot;</span>+countHistory+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;传奇抽到&quot;</span>+countLegend+<span class="string">&quot;个&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="线程基础"><a href="#线程基础" class="headerlink" title="线程基础"></a>线程基础</h3><p>线程创建</p><ul><li>继承Thread类，重写run方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.run();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在看代码&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//run方法线程体</span></span><br><span class="line">    <span class="comment">//主线程方法体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadDemo</span> <span class="variable">threadDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadDemo</span>();</span><br><span class="line">        <span class="comment">//创建一个线程对象，调用start方法</span></span><br><span class="line">        threadDemo.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在学习多线程&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用run方法时，会先走run方法，执行完后再执行下面的方法</strong></p><p><strong>调用start方法时，会同时执行，由cpu调度安排执行哪一个线程</strong></p><ul><li><p>实现runnable接口</p></li><li><p>&#96;&#96;&#96;java<br>public class TestRunnable implements Runnable{<br>@Override<br>public void run() {<br>    for (int i &#x3D; 0; i &lt; 20; i++) {<br>        System.out.println(“我在看代码”+i);<br>    }<br>}<br><br>public static void main(String[] args) {<br>    TestRunnable testRunnable &#x3D; new TestRunnable();<br>    Thread thread &#x3D; new Thread(testRunnable);<br>    thread.start();<br>    for (int i &#x3D; 0; i &lt; 20; i++) {<br>        System.out.println(“我在学习额”+i);<br>    }<br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">注意，通过实现runnable接口创建线程时，创建runnable实现类对象之后，还要创建一个Thread对象，将runnable实现类对象丢到thread里，用thread对象调用start方法</span><br><span class="line"></span><br><span class="line">- 实现callable接口，需要返回值类型</span><br><span class="line"></span><br><span class="line">- 重写call方法，抛出异常</span><br><span class="line"></span><br><span class="line">- 创建目标对象</span><br><span class="line"></span><br><span class="line">- 创建执行服务</span><br><span class="line"></span><br><span class="line">- 提交执行</span><br><span class="line"></span><br><span class="line">- 获取结果</span><br><span class="line"></span><br><span class="line">- 关闭服务</span><br><span class="line"></span><br><span class="line">- </span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  public class TestCallable implements Callable&lt;Boolean&gt; &#123;</span><br><span class="line">      @Override</span><br><span class="line">      public Boolean call() throws Exception &#123;   //实现call方法</span><br><span class="line">          for (int i = 0; i &lt; 20; i++) &#123;</span><br><span class="line">              System.out.println(&quot;我在看代码&quot;+i);</span><br><span class="line">          &#125;</span><br><span class="line">          return true;   //返回值</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">          TestCallable testCallable = new TestCallable();   //实现callable对象</span><br><span class="line">          ExecutorService ser = Executors.newFixedThreadPool(3);  //创建线程池</span><br><span class="line">          Future&lt;Boolean&gt; result = ser.submit(testCallable); //通过服务提交线程</span><br><span class="line">          boolean r1 = result.get();  //获得返回值</span><br><span class="line">          System.out.println(r1);</span><br><span class="line">          ser.shutdown();  //关闭服务</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p>特殊点：可以获得返回值，可以抛出一个异常</p><p><strong>总结</strong></p><ul><li>用Thread方法创建线程，可能会出现单继承局限问题</li><li>用runnable接口，灵活方便，可以一个对象被多个线程使用</li></ul><h3 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span> (number&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           number--;</span><br><span class="line">           System.out.println(Thread.currentThread().getName()+<span class="string">&quot;拿到了一张票,还剩&quot;</span>+number+<span class="string">&quot;张票&quot;</span>);</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               Thread.sleep(<span class="number">1000</span>);  <span class="comment">//线程睡眠,单位为毫秒</span></span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//run方法线程体</span></span><br><span class="line">    <span class="comment">//主线程方法体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建runnable实现类</span></span><br><span class="line">        <span class="type">ThreadDemo</span> <span class="variable">threadDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadDemo</span>();</span><br><span class="line">        <span class="comment">//创建三个线程对象，调用start方法</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(threadDemo,<span class="string">&quot;顶针&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(threadDemo,<span class="string">&quot;肖战&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(threadDemo,<span class="string">&quot;华晨宇&quot;</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个线程操作同一份资源时，会出现线程不安全，数据紊乱，比如两个人同时拿到一张票</p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><ul><li>静态代理模式：真实对象和代理对象都要实现同一个接口</li><li>代理对象要代理真实角色</li><li>如Thread代理runnable实现类对象，他们共同都接到runnable接口</li></ul><h3 id="Lambda表达式简化"><a href="#Lambda表达式简化" class="headerlink" title="Lambda表达式简化"></a>Lambda表达式简化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">testRunnable</span> <span class="operator">=</span> () -&gt; &#123;              <span class="comment">//去掉类和方法，只要一个  括号-&gt;方法体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在学习&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;  <span class="comment">//lambda表达式简化</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(testRunnable);</span><br><span class="line">    thread.start();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我在学习额&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>当内部方法体只有一行语句时，外部的大括号也可以省略</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">testLambda</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;我在测试简化&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h3><ul><li>设置标志位停止</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStop</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">aBoolean</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (aBoolean)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程正在运行&quot;</span>+i+<span class="string">&quot;次&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.aBoolean = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestStop</span> <span class="variable">testStop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestStop</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testStop).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程正在跑&quot;</span>+i);</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">100</span>)&#123;</span><br><span class="line">                testStop.stop();</span><br><span class="line">                System.out.println(<span class="string">&quot;线程停止了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程休眠-休眠不会释放锁"><a href="#线程休眠-休眠不会释放锁" class="headerlink" title="线程休眠  休眠不会释放锁"></a>线程休眠  <strong>休眠不会释放锁</strong></h3><ul><li><p>模拟网络延时:放大问题的发生性</p></li><li></li><li><p>&#96;&#96;&#96;java<br>public class TestRunnable implements Runnable{<br>private int number &#x3D; 10;<br>@Override<br>public void run() {<br>    while (true){<br>        if (number&lt;&#x3D;0){<br>            break;<br>        }<br>        number–;<br>        System.out.println(Thread.currentThread().getName()+”拿到了一张票，还剩”+number+”张”);<br>        try {<br>            Thread.sleep(1000);  &#x2F;&#x2F;进行1秒的延时<br>        } catch (InterruptedException e) {<br>            throw new RuntimeException(e);<br>        }<br>    }<br>}<br><br>public static void main(String[] args) {<br>    TestRunnable testRunnable &#x3D; new TestRunnable();;<br>    new Thread(testRunnable,”小明”).start();<br>    new Thread(testRunnable,”小红”).start();<br>    new Thread(testRunnable,”黄牛”).start();<br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 模拟网络倒计时</span><br><span class="line"></span><br><span class="line">- </span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  public class TestSleep2 implements Runnable&#123;</span><br><span class="line">      @Override</span><br><span class="line">      public void run() &#123;</span><br><span class="line">  </span><br><span class="line">      &#125;</span><br><span class="line">      public static void turnDown() throws InterruptedException &#123;</span><br><span class="line">          int number = 10;</span><br><span class="line">          while (true)&#123;   //十秒倒计时</span><br><span class="line">              Thread.sleep(1000);  </span><br><span class="line">              System.out.println(number--);  //每一秒输出一次当前number</span><br><span class="line">              if (number&lt;=0)&#123;</span><br><span class="line">                  break;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">          turnDown();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h3><ul><li>礼让不一定成功，全看cpu调度</li><li>语法 Thread.yield()</li></ul><h3 id="线程插队"><a href="#线程插队" class="headerlink" title="线程插队"></a>线程插队</h3><p>- </p><ul><li>&#96;&#96;&#96;java<br>public class TestJoin implements Runnable {<br>@Override<br>public void run() {<br>    for (int i &#x3D; 0; i &lt; 50; i++) {<br>        System.out.println(“线程vip来了”+i);<br>    }<br><br>}<br><br>public static void main(String[] args) throws InterruptedException {<br>    TestJoin testJoin &#x3D; new TestJoin();<br>    Thread thread &#x3D; new Thread(testJoin);<br>    thread.start();<br>    for (int i &#x3D; 0; i &lt; 30; i++) {<br>        if (i&#x3D;&#x3D;10){<br>            thread.join(); &#x2F;&#x2F;主线程跑了10次，让testjoin插队，强制执行<br><br>        }<br>        System.out.println(“main”+i);<br>    }<br><br>}<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 执行join后会强制执行完调用join的线程，再执行别的线程</span><br><span class="line"></span><br><span class="line">### 线程状态</span><br><span class="line"></span><br><span class="line">- NEW</span><br><span class="line">- RUNNABLE</span><br><span class="line">- TIME_WAITTING</span><br><span class="line">- TERMINATED</span><br><span class="line"></span><br><span class="line">死亡之后的线程不能再运行</span><br><span class="line"></span><br><span class="line">### 线程优先级PRIORITY</span><br><span class="line"></span><br><span class="line">优先级由数字1-10表示</span><br><span class="line"></span><br><span class="line">改变优先级:getPriority（）.setPriority（int xx）</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Thread thread = new Thread();</span><br><span class="line">    int priority1 = thread.getPriority();  //默认优先级为5</span><br><span class="line">    System.out.println(priority1);</span><br><span class="line">    thread.setPriority(10);</span><br><span class="line">    int priority2 = thread.getPriority(); //线程最大优先级为10</span><br><span class="line">    System.out.println(priority2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>线程优先级高不代表一定会调用到它</strong></p><h3 id="守护（deamon）线程"><a href="#守护（deamon）线程" class="headerlink" title="守护（deamon）线程"></a>守护（deamon）线程</h3><p>thread.setDaemon( BOOLEAN );</p><p><strong>守护线程不用必须执行完毕，用户线程一定要执行完毕</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDaemon</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">God</span> <span class="variable">god</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">God</span>();</span><br><span class="line">        <span class="type">You</span> <span class="variable">you</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">You</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(god);</span><br><span class="line">        thread.setDaemon(<span class="literal">true</span>); <span class="comment">//默认为false</span></span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(you);</span><br><span class="line">        thread1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">God</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;上帝保佑着我&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">You</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">36500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;开心活着&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;噶了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><p>多个线程操作同一个资源：并发思想</p><p>形成一个线程池队列，让线程在中间排队</p><p>核心：队列和锁  （安全性）synchronized</p><p>线程不安全原因：每个线程都有自己的工作内存，内存控制不当会造成数据不一致</p><p><strong>在方法中加入synchronized关键字</strong></p><ul><li>默认锁的是this对象</li><li>当需要锁的对象不是调用该方法的对象时，要用到锁代码块</li><li>Synchronized（需要锁的对象）{ 方法体 }</li></ul><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ul><li><p>多个线程互相拿着对方的资源，互相僵持，形成死锁</p></li><li></li><li><p>&#96;&#96;&#96;java<br>public class TestLock {<br>public static void main(String[] args) {<br>    makeup girl1 &#x3D; new makeup(0,”红”);<br>    makeup girl2 &#x3D; new makeup(2,”佰”);<br>    girl2.start();<br>    girl1.start();<br>}<br>}<br>class Lipstick{</p><p>}<br>class mirror{</p><p>}<br>class makeup extends Thread {<br>&#x2F;&#x2F;static保证只有一份资源<br>static Lipstick lipstick &#x3D; new Lipstick();<br>static mirror mirr &#x3D; new mirror();<br>int choice;<br>String herName;<br><br>makeup(int choice, String herName) {<br>    this.choice &#x3D; choice;<br>    this.herName &#x3D; herName;<br>}<br><br>@Override<br>public void run() {<br>    try {<br>        makeup1();<br>    } catch (InterruptedException e) {<br>        throw new RuntimeException(e);<br>    }<br>}<br><br>private void makeup1() throws InterruptedException {<br>    if (choice &#x3D;&#x3D; 0) {<br>        synchronized (lipstick) {  &#x2F;&#x2F;拿到口红的锁还想拿镜子的锁<br>            System.out.println(this.herName + “获得口红的锁”);<br>            Thread.sleep(1000);<br>            synchronized (mirr) {<br>                System.out.println(this.herName + “获得镜子的锁”);<br>            }<br>        }<br>    } else {<br>        synchronized (mirr) {   &#x2F;&#x2F;拿镜子的锁还想拿口红<br>            System.out.println(this.herName + “获得镜子的锁”);<br>            Thread.sleep(2000);<br>            synchronized (lipstick) {<br>                System.out.println(this.herName + “获得口红的锁”);<br>            }<br><br>        }<br>    }<br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">形成死锁原因，拿到相应的锁后，又想拿到对方的锁，但锁代码块未执行完，自身的锁不会归还，互相都在等待对方的锁，导致死锁</span><br><span class="line"></span><br><span class="line">总结产生的四个条件</span><br><span class="line"></span><br><span class="line">- 互斥条件：一个资源每次只能被一个资源使用</span><br><span class="line">- 请求与保持条件：一个进程因请求资源而阻塞时，对已经获得的资源不释放</span><br><span class="line">- 不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺</span><br><span class="line">- 循环等待条件：若干进程之间形成一种头尾相接循环等待资源的关系</span><br><span class="line"></span><br><span class="line">破坏死锁：破坏上述条件4个中的一个或多个即可</span><br><span class="line"></span><br><span class="line">### Lock锁</span><br><span class="line"></span><br><span class="line">ReentrantLock类实现了lock：可重入锁，代替原先的synchronized</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">class TestLock2 implements Runnable&#123;</span><br><span class="line">    private int number = 10;</span><br><span class="line">    private final ReentrantLock lock = new ReentrantLock(); //创建锁 private finall保证数据安全</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            try&#123;</span><br><span class="line">                lock.lock();  //try finall 加锁</span><br><span class="line">                if (number&gt;0)&#123;</span><br><span class="line">                    try&#123;</span><br><span class="line">                        Thread.sleep(1000);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        throw new RuntimeException(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(number--);</span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;finally &#123;</span><br><span class="line">                lock.unlock();  //finall中解锁  防止中途出现异常不解锁造成死锁</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Synchronized与Lock锁对比"><a href="#Synchronized与Lock锁对比" class="headerlink" title="Synchronized与Lock锁对比"></a>Synchronized与Lock锁对比</h3><ul><li>Lock是显式锁，可以看到加锁与解锁的区域，Synchronized锁是隐式锁，内部语句执行完之后自动解锁</li><li>Lock只有代码块锁，Synchronized锁有方法锁与代码块锁</li><li>Lock锁性能更好，可跨越性更好</li><li>使用顺序:lock锁&gt;同步代码块&gt;同步方法</li></ul><h3 id="线程协作：生产者消费者模式"><a href="#线程协作：生产者消费者模式" class="headerlink" title="线程协作：生产者消费者模式"></a>线程协作：生产者消费者模式</h3><p>wait（）线程等待，会释放锁</p><p>notify（）唤醒线程</p><h4 id="管程法"><a href="#管程法" class="headerlink" title="管程法"></a>管程法</h4><p>利用一个缓冲区，生产者生产后存放到缓冲区，消费者从缓冲区拿走</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SynContainer</span> <span class="variable">synContainer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynContainer</span>();</span><br><span class="line">        <span class="type">Productor</span> <span class="variable">productor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Productor</span>(synContainer);</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(synContainer);</span><br><span class="line">        productor.start();</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Productor</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    SynContainer synContainer;</span><br><span class="line"></span><br><span class="line">    Productor(SynContainer synContainer)&#123;</span><br><span class="line">        <span class="built_in">this</span>.synContainer = synContainer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产了&quot;</span>+i+<span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">            synContainer.push(<span class="keyword">new</span> <span class="title class_">Chicken</span>(i));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    SynContainer synContainer;</span><br><span class="line">    Consumer(SynContainer synContainer)&#123;</span><br><span class="line">        <span class="built_in">this</span>.synContainer = synContainer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            synContainer.pop();</span><br><span class="line">            System.out.println(<span class="string">&quot;消费了第&quot;</span>+i+<span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chicken</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Chicken</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SynContainer</span>&#123;</span><br><span class="line">    Chicken[] chickens = <span class="keyword">new</span> <span class="title class_">Chicken</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Chicken chicken)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count==chickens.length)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();  <span class="comment">//鸡满了则等待</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        chickens[count] = chicken;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();   <span class="comment">//唤醒消费者吃鸡</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Chicken <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();   <span class="comment">//没有鸡则等待</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="type">Chicken</span> <span class="variable">chicken</span> <span class="operator">=</span> chickens[count];</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();    <span class="comment">//唤醒消费者生产鸡</span></span><br><span class="line">        <span class="keyword">return</span> chicken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="信号灯法-if中用true-false-判断"><a href="#信号灯法-if中用true-false-判断" class="headerlink" title="信号灯法 if中用true false 判断"></a>信号灯法 if中用true false 判断</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPc2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Tv</span> <span class="variable">tv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tv</span>();</span><br><span class="line">        <span class="type">Acter</span> <span class="variable">acter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Acter</span>(tv);</span><br><span class="line">        <span class="type">Watcher</span> <span class="variable">watcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Watcher</span>(tv);</span><br><span class="line">        acter.start();</span><br><span class="line">        watcher.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Acter</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    Tv tv;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Acter</span><span class="params">(Tv tv)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.tv.act(<span class="string">&quot;歌剧&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.tv.act(<span class="string">&quot;广告&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    Tv tv;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Watcher</span><span class="params">(Tv tv)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                tv.watch();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tv</span>&#123;</span><br><span class="line">    String voice;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">act</span><span class="params">(String voice)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;演员表演了&quot;</span>+voice);</span><br><span class="line">            <span class="built_in">this</span>.voice = voice;</span><br><span class="line">            <span class="built_in">this</span>.flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">this</span>.notifyAll();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">watch</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;观众正在观看&quot;</span>+voice);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">        <span class="built_in">this</span>.flag=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>runnable接口的线程用execute去启动，关闭用shutdown</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPool</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>); <span class="comment">//创建线程池</span></span><br><span class="line">        executorService.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>()); <span class="comment">//用线程池启动MyThread线程</span></span><br><span class="line">        executorService.shutdown();  <span class="comment">//关闭线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><p><strong>重点：通过IP地址加端口可以定位到一台电脑上的一个软件</strong></p><p><strong>and 网络通信协议</strong> </p><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><p>IP地址：innetAddress 类</p><p>唯一定位一台网络上的计算机</p><p>IP地址分类</p><ul><li><p>IPV4 由四个字节组成 42亿 (公网)</p></li><li><p>IPV6 128位 8个无符号整数 (私网)</p></li></ul><p>IP地址中的ABCD类</p><ul><li><p>0-128 A类地址</p></li><li><p>128-192 B类地址</p></li><li><p>192-255 C类地址</p></li><li><p>255-后   D类地址</p></li></ul><p>域名：解决IP记忆问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">      <span class="type">InetAddress</span> <span class="variable">inet4Address</span> <span class="operator">=</span> Inet4Address.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);<span class="comment">//根据域名</span></span><br><span class="line">       System.out.println(inet4Address);</span><br><span class="line">       <span class="type">InetAddress</span> <span class="variable">inetAddress</span> <span class="operator">=</span> InetAddress.getLocalHost();<span class="comment">//获取本地主机</span></span><br><span class="line">       System.out.println(inetAddress);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>端口表示计算机上一个程序的进程</p><h2 id="注解和反射"><a href="#注解和反射" class="headerlink" title="注解和反射"></a>注解和反射</h2><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><ul><li>@Target描述注解可以在哪使用</li><li>@Retention用于描述注解的生命周期（RUNTIME&gt;CLASS&gt;SOURCE）</li><li>@Documentd 表明该注解可以存放在javadoc中</li><li>@Inherited 说明子类可以继承父类的注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAnnotaition</span> &#123;</span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.TYPE,ElementType.METHOD&#125;)</span> <span class="comment">//表示注解可以使用的地方</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span>   <span class="comment">//表示注解的生命周期，生效的时间</span></span><br><span class="line"><span class="meta">@Documented</span>  </span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123; <span class="comment">//自定义注解</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> &#123;</span><br><span class="line">    <span class="meta">@MyAnnotation2(name = &quot;勾八&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyAnnotation3(&quot;丁真&quot;)</span> <span class="comment">//仅当注解的参数名为value且仅有一个参数时，value才可以省略</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2&#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; <span class="comment">//定义注解的参数，不是一个方法</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">id</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;<span class="comment">//如果默认值为-1代表不存在</span></span><br><span class="line">    String[] schools() <span class="keyword">default</span> &#123;<span class="string">&quot;清华大学&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(value = ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation3&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>反射机制概述Reflection：是JAVA被视为动态语言的关键</p><h4 id="获取反射"><a href="#获取反射" class="headerlink" title="获取反射"></a>获取反射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestReflection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//通过反射获取类的class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;User&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;User&quot;</span>);</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println(c1.hashCode());<span class="comment">//一个类在一个内存中只有一个Class对象，所以他们的hashcode相同</span></span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;, id = &quot;</span> + id + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多种方式汇总</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestReflection2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> person.getClass();  <span class="comment">//用对象获得class对象</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Student.class;    <span class="comment">//用类获得class对象</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Student&quot;</span>);  <span class="comment">//用路径获得class对象</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//c1 c2 c3都是同一个class对象，因为一个类只有一个class对象</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> Integer.TYPE; <span class="comment">//用内置包装类获取class对象，只有内置包装类可以这样获得</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> c1.getSuperclass();<span class="comment">//获得父类类型</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以有class对象的类型：</p><ul><li>class类</li><li>接口</li><li>枚举</li><li>数组</li><li>注解</li><li>基本数据类型</li><li>void</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Object.class;   <span class="comment">//一个类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="type">int</span>[].class;    <span class="comment">//一维数组</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Comparable.class; <span class="comment">//接口</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="type">int</span>[][].class;   <span class="comment">//二维数组</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> Enum.class;    <span class="comment">//枚举</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c6</span> <span class="operator">=</span> Override.class;  <span class="comment">//注解</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c7</span> <span class="operator">=</span> Integer.class;  <span class="comment">//基本数据类型</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c8</span> <span class="operator">=</span> <span class="keyword">void</span>.class;    <span class="comment">//空数据类型    他的类为void</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c9</span> <span class="operator">=</span> Class.class;   <span class="comment">//一个类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3><p><img src="/2023/02/10/JAVA%E5%9F%BA%E7%A1%80%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221010171257232.png" alt="image-20221010171257232"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(a.m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类静态代码块初始化&quot;</span>); <span class="comment">//将静态代码块合并变为M=300,M=100，最后M赋值为100</span></span><br><span class="line">        m=<span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">100</span>;  <span class="comment">//加载后m有初始值为0  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类无参构造初始化&quot;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>加载到内存会产生一个class对象</p></li><li><p>链接，链接结束后，m&#x3D;0</p></li><li><p>创造A对象后，初始化，为m赋值  <clinit>(){</clinit></p><p> System.out.println(“A类静态代码块初始化”);</p><p> m&#x3D;300;</p><p> m &#x3D; 100</p><p>}</p></li></ol><h3 id="发生类的初始化条件"><a href="#发生类的初始化条件" class="headerlink" title="发生类的初始化条件"></a>发生类的初始化条件</h3><p>类的主动引用（一定会发生类的初始化）</p><ul><li>虚拟机启动时，会初始化main方法所在的类</li><li>new一个类的对象</li><li>调用类的静态成员或静态方法</li><li>对类进行反射调用</li><li>当初始化一个类，他的父类没有被初始化，先初始化他的父类</li></ul><p>类的被动引用（不会发生类的初始化）</p><ul><li>当访问一个静态区域时，只有真正声明这个变量的域会初始化（例如用子类调用父类的静态变量）</li><li>创建一个类的数组，不会发生初始化（创建一个 Son[] array数组不会初始化Son类）</li><li>引用常量不会触发类的初始化</li></ul><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>类加载器的作用：</p><ul><li>将class文件字节码加载到内存中，并将这些静态数据转换成方法区运行时的数据结构，然后在堆中生成一个代表这个类的class对象，作为方法区中类数据的访问入口</li><li>类缓存区：当一个类被加载到加载器中，他将维持一段时间，一段时间之后没被使用，则会被垃圾回收器回收</li></ul><p>双亲委派机制</p><ul><li>当定义了一个包，类后，系统会逐级根据系统类加载器，扩展类加载器，根加载器，向上查找是否存在同名的类，若有同名的类，则会用系统自带的包或类，保证安全性</li></ul><h3 id="获取类运行时的结构"><a href="#获取类运行时的结构" class="headerlink" title="获取类运行时的结构"></a>获取类运行时的结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;User01&quot;</span>);</span><br><span class="line">        System.out.println(c1.getName()); <span class="comment">//获得包名+类名</span></span><br><span class="line">        System.out.println(c1.getSimpleName());<span class="comment">//获得类名</span></span><br><span class="line">        Field[] fields = c1.getFields();  <span class="comment">//只能找到public属性</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Field[] fields1 = c1.getDeclaredFields();  <span class="comment">//找到所有属性</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields1) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Method[] methods1 = c1.getMethods(); <span class="comment">//找到本类及其父类的所有public方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods1) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Method[] methods = c1.getDeclaredMethods(); <span class="comment">//找到所有方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);<span class="comment">//根据方法名，参数找到方法</span></span><br><span class="line">        System.out.println(method);</span><br><span class="line"></span><br><span class="line">        Constructor[] constructor = c1.getConstructors();  <span class="comment">//获得全部public构造方法</span></span><br><span class="line">        Constructor[] constructors = c1.getDeclaredConstructors();<span class="comment">//获得全部构造方法</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> c1.getConstructor(String.class,<span class="type">int</span>.class,<span class="type">int</span>.class);<span class="comment">//根据参数获得指定的构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态创建对象，改变对象的值"><a href="#动态创建对象，改变对象的值" class="headerlink" title="动态创建对象，改变对象的值"></a>动态创建对象，改变对象的值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test09</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;User&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) c1.newInstance(); <span class="comment">//本质上调用了类的无参构造器，必须要有一个无参构造器</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">//通过构造器创建对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c1.getConstructor(String.class,<span class="type">int</span>.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> (User)constructor.newInstance(<span class="string">&quot;吊&quot;</span>,<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用反射获取方法，使用方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        method.invoke(user,<span class="string">&quot;曾胜&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射操作属性</span></span><br><span class="line">       <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">       field.setAccessible(<span class="literal">true</span>);  <span class="comment">//不能直接操作私有属性，我们需要跳过权限符检测</span></span><br><span class="line">       field.set(user , <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">       System.out.println(field.get(user));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取注解信息：用于创建数据库中的表"><a href="#获取注解信息：用于创建数据库中的表" class="headerlink" title="获取注解信息：用于创建数据库中的表"></a>获取注解信息：用于创建数据库中的表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test12</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Student2&quot;</span>);</span><br><span class="line">        Annotation[] annotations = c1.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得注解的value的值</span></span><br><span class="line">        <span class="type">Table11</span> <span class="variable">table11</span> <span class="operator">=</span> (Table11)c1.getAnnotation(Table11.class);</span><br><span class="line">        System.out.println(table11.value());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得属性值注解的value值</span></span><br><span class="line">        java.lang.reflect.<span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">FieldJin</span> <span class="variable">annotation</span> <span class="operator">=</span> field.getAnnotation(FieldJin.class);</span><br><span class="line">        System.out.println(annotation.clunmName());</span><br><span class="line">        System.out.println(annotation.type());</span><br><span class="line">        System.out.println(annotation.length());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Table11(&quot;DB-STUDENT&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student2</span>&#123;</span><br><span class="line">    <span class="meta">@FieldJin(clunmName = &quot;db.id&quot;,type = &quot;int&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="meta">@FieldJin(clunmName = &quot;db.age&quot;,type = &quot;int&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="meta">@FieldJin(clunmName = &quot;db.name&quot;,type = &quot;varchar&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student2</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student2&#123;id = &quot;</span> + id + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;, name = &quot;</span> + name + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Table11&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> FieldJin&#123;</span><br><span class="line">    String <span class="title function_">clunmName</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">type</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><h3 id="时间类"><a href="#时间类" class="headerlink" title="时间类"></a>时间类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTime</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();   <span class="comment">//当前时间</span></span><br><span class="line">        System.out.println(d);</span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">0l</span>); <span class="comment">//从时间原点开始过了0毫秒的时间</span></span><br><span class="line">        System.out.println(d1);</span><br><span class="line"></span><br><span class="line">        d1.setTime(<span class="number">1000l</span>);<span class="comment">//表示从时间原点开始过了1000毫秒的时间</span></span><br><span class="line">        System.out.println(d1);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> d1.getTime();<span class="comment">//获取时间的毫秒值</span></span><br><span class="line">        System.out.println(time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SimpeleDateFormat"><a href="#SimpeleDateFormat" class="headerlink" title="SimpeleDateFormat"></a>SimpeleDateFormat</h3><p>把时间变成我们喜欢的格式，或者把字符串变成时间的格式</p><ul><li>时间格式化形式：yyyy-MM-dd HH:mm:ss 或 yyyy年MM月dd日 HH:mm:ss</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>();</span><br><span class="line">    <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sdf.format(d);</span><br><span class="line">    System.out.println(str); <span class="comment">//默认格式2022/10/11 下午4:50</span></span><br><span class="line"></span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd HH:mm:ss&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> sdf1.format(d);</span><br><span class="line">    System.out.println(str1);   <span class="comment">//格式为2022年10月11 16:52:08</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>将字符串转换成时间格式</p></li><li><p>时间的格式一定要与字符串一样，否则会报错</p></li><li><p>&#96;&#96;&#96;java<br>String str2 &#x3D; “2022年10月11 16:52:08”;<br>SimpleDateFormat sdf2 &#x3D; new SimpleDateFormat(“yyyy年MM月dd HH:mm:ss”);<br>Date date &#x3D; sdf2.parse(str2);<br>System.out.println(date);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### Calendar类</span><br><span class="line"></span><br><span class="line">是一个抽象方法，不能创建对象，要调用内部getInstance方法创建Calendar对象</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">Calendar calendar = Calendar.getInstance();//根据不同时区返回不同对象，会把时间中的纪元，年月日，时分秒，都放到一个数组当中</span><br><span class="line">System.out.println(calendar);//默认表示当前时间</span><br><span class="line">calendar.setTime(date);//用date修改时间</span><br><span class="line">System.out.println(calendar);</span><br><span class="line">System.out.println(calendar.get(Calendar.MONTH));//获取指定年或月或日......、</span><br></pre></td></tr></table></figure></li></ul><p>修改时间则调用.set方法</p><p>注意Calendar中月份是0-11</p><p>LocalDate : 年 月 日</p><p>LocalTime : 时 分 秒</p><p>LocalDateTime : 年 月 日 时 分 秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">time</span> <span class="operator">=</span> LocalDateTime.now(); <span class="comment">//获取现在的时间</span></span><br></pre></td></tr></table></figure><h3 id="Jdk8新特性"><a href="#Jdk8新特性" class="headerlink" title="Jdk8新特性"></a>Jdk8新特性</h3><p>Date中的Instance：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.now(); <span class="comment">//获取当前时间</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123; <span class="comment">//计算时间间隔</span></span><br><span class="line">    <span class="type">LocalDate</span> <span class="variable">birthday</span> <span class="operator">=</span> LocalDate.of(<span class="number">2001</span>,<span class="number">5</span>,<span class="number">25</span>);</span><br><span class="line">    <span class="type">LocalDate</span> <span class="variable">now</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">    <span class="type">long</span> <span class="variable">between</span> <span class="operator">=</span> ChronoUnit.DAYS.between(birthday, now);</span><br><span class="line">    System.out.println(between);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是不是闰年</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">    <span class="type">LocalDate</span> <span class="variable">date</span> <span class="operator">=</span> LocalDate.of(<span class="number">2000</span>,<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="type">LocalDate</span> <span class="variable">date1</span> <span class="operator">=</span> date.minusDays(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (date1.getDayOfMonth()==<span class="number">29</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;是闰年&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;不是闰年&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    date.isLeapYear();<span class="comment">//判断是不是闰年的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>Java中的泛型是伪泛型，在编译成class文件时，泛型会被擦除，并且JAVA中泛型只会规定存储的变量类型，存到集合中，仍然是object类型，取出时集合会自动强转成泛型类型</p><ul><li>泛型不具备继承性，但数据具备继承性</li><li>如方法的形参需要的list泛型为父类，就不能传递一个泛型为子类的list，但泛型为父类的list可以添加类型为子类的数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">泛型方法</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;E&gt; <span class="keyword">void</span> <span class="title function_">addAll</span><span class="params">(List&lt;E&gt; list,E...e)</span>&#123;  <span class="comment">//自定义方法上添加泛型</span></span><br><span class="line">    <span class="keyword">for</span> (E e1 : e) &#123;</span><br><span class="line">        list.add(e1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型接口</p><p>实现类中实现泛型类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyArrayList2</span> <span class="keyword">implements</span> <span class="title class_">List</span>&lt;String&gt;</span><br></pre></td></tr></table></figure><p>实现类中延续接口泛型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyArrayList2</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;</span><br></pre></td></tr></table></figure><p>泛型通配符</p><ul><li>？表示不确定的类型</li><li>但是可以进行类型的限制</li><li>?  extends E 表示能接收E类或者E的所有子类</li><li>?  super E 表示能接受E类或者E的所有父类</li><li>综合练习</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">keepCat</span><span class="params">(ArrayList&lt;Cat&gt; list)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Cat cat : list) &#123;</span><br><span class="line">            cat.eat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">keepDog</span><span class="params">(ArrayList&lt;Dog&gt; list)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Dog dog : list) &#123;</span><br><span class="line">            dog.eat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">keepPet</span><span class="params">(ArrayList&lt;? extends Animal&gt;...list)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ArrayList&lt;? <span class="keyword">extends</span> <span class="title class_">Animal</span>&gt; animals : list) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Animal animal : animals) &#123;</span><br><span class="line">                animal.eat();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Cat&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Dog&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">BoSiCat</span> <span class="variable">cat1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BoSiCat</span>(<span class="string">&quot;小红&quot;</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="type">LiHuaCat</span> <span class="variable">cat2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LiHuaCat</span>(<span class="string">&quot;小黄&quot;</span>,<span class="number">5</span>);</span><br><span class="line">        list1.add(cat1);</span><br><span class="line">        list1.add(cat2);</span><br><span class="line">        <span class="type">Teddy</span> <span class="variable">dog1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teddy</span>(<span class="string">&quot;小蓝&quot;</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="type">HaShiQi</span> <span class="variable">dog2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HaShiQi</span>(<span class="string">&quot;小绿&quot;</span>,<span class="number">5</span>);</span><br><span class="line">        list2.add(dog1);</span><br><span class="line">        list2.add(dog2);</span><br><span class="line">        keepCat(list1);</span><br><span class="line">        keepDog(list2);</span><br><span class="line">        keepPet(list1,list2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Java/">Java</category>
      
      
      
    </item>
    
  </channel>
</rss>
