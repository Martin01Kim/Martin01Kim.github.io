<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>小金的学习日志</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>希望现在的自己配得上所期望的生活</description>
    <pubDate>Fri, 17 Mar 2023 10:09:38 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>通信总线</title>
      <link>http://example.com/2023/03/05/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/</link>
      <guid>http://example.com/2023/03/05/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/</guid>
      <pubDate>Sun, 05 Mar 2023 14:07:08 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;总线协议&quot;&gt;&lt;a href=&quot;#总线协议&quot; class=&quot;headerlink&quot; title=&quot;总线协议&quot;&gt;&lt;/a&gt;总线协议&lt;/h2&gt;&lt;p&gt;并行：同一时间总线能发若干个位数的数据&lt;/p&gt;
&lt;p&gt;串行：同一时间总线只发一位的数据，并一直维持这种传送方式&lt;/p&gt;
&lt;p&gt;单工：A只能给B传送数据&lt;/p&gt;
&lt;p&gt;双工：A可以给B传送数据，也可以从B接受数据&lt;/p&gt;
&lt;p&gt;半双工：接收数据，传送数据不能同时进行&lt;/p&gt;
&lt;p&gt;全双工：接收，传输可以同时进行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;波特率：串口通信速度(BPS)，每秒钟能传送位数的个数&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;串口&quot;&gt;&lt;a href=&quot;#串口&quot; class=&quot;headerlink&quot; title=&quot;串口&quot;&gt;&lt;/a&gt;串口&lt;/h3&gt;&lt;p&gt;串行通信接口(COM)：一次最多可以发送一个字节，发送多个字节必须先发送一个字节停止，再起始发送另一个字节&lt;/p&gt;
&lt;p&gt;其中有公头和母头之分&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;串行：计算机总线或其他数据传送线上，一次只传送一位元数据，并连续进行以上传送方式，防止累计误差的出现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并行：计算机总线或其他数据传送线上，一次传送多位元数据，速度比串行快&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;异步通信：发送数据方与接受数据方的时钟不一样&lt;/p&gt;
&lt;p&gt;同步通信：发送与接受方时钟相同&lt;/p&gt;
&lt;h3 id=&quot;UART&quot;&gt;&lt;a href=&quot;#UART&quot; class=&quot;headerlink&quot; title=&quot;UART&quot;&gt;&lt;/a&gt;UART&lt;/h3&gt;&lt;p&gt;通用异步收发器，串行，异步通用总线，有两条线，一个对外发送，一个对外接受，属于全双工通信线路&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接收器与发送器波特率误差不能超过百分之10&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;帧格式&quot;&gt;&lt;a href=&quot;#帧格式&quot; class=&quot;headerlink&quot; title=&quot;帧格式&quot;&gt;&lt;/a&gt;帧格式&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/2023/03/05/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/image-20230226144803956.png&quot; alt=&quot;image-20230226144803956&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;起始位，数据位，校验位（可有可无），停止位（1或2位）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;检验过程：检测数据位中1的个数，1若为偶数个则校验位为1，只能检查是否有错误，不能修正错误&lt;/p&gt;
&lt;p&gt;校验位加数据位中1的个数为偶数为偶校验，否则为奇校验&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TXD：发送数据口&lt;/li&gt;
&lt;li&gt;RXD：接收数据口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;电气接口不统一，不同器件的高低电平标准不一样&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抗干扰能力差&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据传输距离短&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="总线协议"><a href="#总线协议" class="headerlink" title="总线协议"></a>总线协议</h2><p>并行：同一时间总线能发若干个位数的数据</p><p>串行：同一时间总线只发一位的数据，并一直维持这种传送方式</p><p>单工：A只能给B传送数据</p><p>双工：A可以给B传送数据，也可以从B接受数据</p><p>半双工：接收数据，传送数据不能同时进行</p><p>全双工：接收，传输可以同时进行</p><p><strong>波特率：串口通信速度(BPS)，每秒钟能传送位数的个数</strong></p><h3 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h3><p>串行通信接口(COM)：一次最多可以发送一个字节，发送多个字节必须先发送一个字节停止，再起始发送另一个字节</p><p>其中有公头和母头之分</p><p><strong>串行：计算机总线或其他数据传送线上，一次只传送一位元数据，并连续进行以上传送方式，防止累计误差的出现</strong></p><p><strong>并行：计算机总线或其他数据传送线上，一次传送多位元数据，速度比串行快</strong></p><p>异步通信：发送数据方与接受数据方的时钟不一样</p><p>同步通信：发送与接受方时钟相同</p><h3 id="UART"><a href="#UART" class="headerlink" title="UART"></a>UART</h3><p>通用异步收发器，串行，异步通用总线，有两条线，一个对外发送，一个对外接受，属于全双工通信线路</p><p><strong>接收器与发送器波特率误差不能超过百分之10</strong></p><h4 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h4><p><img src="/2023/03/05/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/image-20230226144803956.png" alt="image-20230226144803956"></p><p><strong>起始位，数据位，校验位（可有可无），停止位（1或2位）</strong></p><p>检验过程：检测数据位中1的个数，1若为偶数个则校验位为1，只能检查是否有错误，不能修正错误</p><p>校验位加数据位中1的个数为偶数为偶校验，否则为奇校验</p><ul><li>TXD：发送数据口</li><li>RXD：接收数据口</li></ul><p>缺点：</p><ul><li><strong>电气接口不统一，不同器件的高低电平标准不一样</strong></li><li><strong>抗干扰能力差</strong></li><li><strong>数据传输距离短</strong></li></ul><span id="more"></span><h3 id="I2C总线协议（先发高位后发低位）"><a href="#I2C总线协议（先发高位后发低位）" class="headerlink" title="I2C总线协议（先发高位后发低位）"></a>I2C总线协议（先发高位后发低位）</h3><p>由两条线构成，一个SCK（串行时钟线），一个SDA（串行数据线）</p><p>特点：</p><ul><li>SDA传输高位先传，一次传8BIT（一个字节），传送一个字节之后接一个ACK&#x2F;NACK位</li><li>支持多主控，但同一时间只有一个主控</li><li>连接到总线的所有从机都有一个独立的7位地址，用来主机识别从机</li><li>总线空闲时需要加上拉电阻使其变为高电平</li><li>SDA与SCK是线与关系，有一个为低电平即都为低电平</li><li>多个主机同时使用总线时，需要仲裁的方式觉得哪个主机使用</li></ul><p>起始信号：</p><ul><li>SCL为高时，SDA从1变为0</li></ul><p>结束信号</p><ul><li>SCL为高时，SDA从变一</li></ul><p><strong>只有当SCL为0时，才会允许主机将要发送的数据写入SDA，SCL为1时，接收器读取数据</strong></p><p><strong>传输完8位数据后，第九位为ACK&#x2F;NACK，代表应答信号和非应答信号</strong></p><p>等数据接收完毕后，主机发送向从机发送一个NACK信号，告诉从机不要再发送信号了，之后再发送一个停止信号，释放总线</p><h4 id="对中断的处理"><a href="#对中断的处理" class="headerlink" title="对中断的处理"></a>对中断的处理</h4><p>从机对中断的处理为，将SCL总线拉低，使其进入等待状态，等准备完毕后，再将SCL拉高，使主机就绪</p><h4 id="主机发送数据流程"><a href="#主机发送数据流程" class="headerlink" title="主机发送数据流程"></a>主机发送数据流程</h4><ol><li>主机检测到主线空闲（SCK,SAD都为高电平），发送一个起始信号</li><li>主机发送一个8位数据（7位地址+R&#x2F;W读写位），<strong>R&#x2F;W位0时位写，R&#x2F;W为1时为读</strong></li><li>从机收到命令后，发送一个ACK（<strong>对SDA拉低代表应答</strong>）</li><li>主机接受之后发送第一个字节数据</li><li>从机受到后继续发送一个ACK</li><li>直到主机发送到最后一个字节时，并且受到从机ACK后，发送一个停止信号，结束通信</li></ol><h4 id="主机接受数据流程"><a href="#主机接受数据流程" class="headerlink" title="主机接受数据流程"></a>主机接受数据流程</h4><ol><li>主机开始发送信号，发送命令字节（7位地址+R&#x2F;W位&#x3D;1）</li><li>从机接收信号，发送一个字节数据</li><li>主机收到一个字节数据，发送一个ack</li><li>直到接收到最后一个数据，主机向从机发一个NACK（表示上一个字节接收完毕，下一个字节不要再发了），从机接收到信号之后停止传送数据</li><li>主机再发送一个停止信号，结束信号，退出总线</li></ol><h4 id="主机的仲裁流程"><a href="#主机的仲裁流程" class="headerlink" title="主机的仲裁流程"></a>主机的仲裁流程</h4><p>主机通过检测自身的SDA信号是否与总线SDA信号相同，来判断是否发生总线冲突，第一个使SDA从高电平跳至低电平的主机获得总线控</p><p>制权</p><h3 id="I2C时钟同步"><a href="#I2C时钟同步" class="headerlink" title="I2C时钟同步"></a>I2C时钟同步</h3><p><strong>SCL线的低电平周期与线路器件中低电平最长的周期相等</strong></p><p><strong>SCL线的高电平由高电平时钟周期最短的器件保持</strong></p><h4 id="相关硬件知识"><a href="#相关硬件知识" class="headerlink" title="相关硬件知识"></a>相关硬件知识</h4><ul><li>I2C总线相当于OD(开漏)，因为输出为高阻态，所以要加上拉电平将其拉到高电平确定输出</li><li>上拉电阻的最小值由上拉源确定，上拉电阻的最大值由总线电容决定</li></ul><p><img src="/2023/03/05/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/image-20230226013807179.png" alt="image-20230226013807179"></p><p><img src="/2023/03/05/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/image-20230226013824207.png" alt="image-20230226013824207"></p><ul><li>I2C总线串联保护电阻，抑制干扰脉冲进入电路，选值一般都很小</li></ul><h3 id="RS232"><a href="#RS232" class="headerlink" title="RS232"></a>RS232</h3><p>再UART协议的基准上，对其做了相应的电器标准</p><ul><li>规定采用标准的连接器，对每个引脚的作用，以及信号的电平做了规定</li></ul><p>规定的逻辑电平</p><ul><li>高电平：-5V ~  -15V为逻辑电平1</li><li>低电平:   5V  ~  15V为逻辑电平0</li></ul><p>缺点”</p><ul><li>接口的信号电平值比较高，容易烧毁芯片，又因为与TTL电平不兼容，所以要接232电平转换芯片</li><li>通信速度比较低，无法应用在高速场合</li><li>易产生共模干扰，抗噪声比较弱</li><li>传输距离比较短</li></ul><p><img src="/2023/03/05/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/image-20230316204559533.png" alt="image-20230316204559533"></p><h3 id="RS485"><a href="#RS485" class="headerlink" title="RS485"></a>RS485</h3><p><strong>半双工的工作方式</strong></p><p>类似RS232，也是一个电气标准，为了<strong>解决远距离条件，噪声大条件下信号的传输能力</strong>，该标准<strong>允许连接多个收发器</strong></p><p>信号：</p><p><strong>差分信号</strong>：通过两根线上电压去做相减，可以抑制共模干扰</p><p>规定采用<strong>差分信号</strong>进行数据传输，两线间的电压差达到**+2V到+6V<strong>时为逻辑电平1，两线间电压差再</strong>-2V到-6V**之间为逻辑电平0</p><p><strong>发送时同样需要将TTL转485，接收时要485转TTL</strong></p><p>优点：</p><ul><li>接口信号值电压较低</li><li>可以抑制共模干扰</li><li>可以组成网络</li><li>通信速度快</li></ul><h3 id="SPI总线（串行外设接口）先发高位后发低位"><a href="#SPI总线（串行外设接口）先发高位后发低位" class="headerlink" title="SPI总线（串行外设接口）先发高位后发低位"></a>SPI总线（串行外设接口）先发高位后发低位</h3><p>高速的，全双工的，同步的串行通信总线</p><p>一共有4根线：</p><ul><li>MISO(主机输入从机输出)</li><li>MOSI（主机输出从机输入）</li><li>SCLK（时钟信号）</li><li>CS（片选信号）：主机发送使能信号确定响应的从机，可以用多条线，用来响应不同的从机，对应电平由从机确定，发送完使能信号之后，其他不响应的从机仍要发一个使能信号，如果响应高电平，就发送低电平</li></ul><p><strong>与I2C区别，发送完一个字节的数据之后不需要应答信号即可发送下一个信号，发送时如果上升沿发送数据，下降沿就接收数据，没有起始信号，停止信号，应答信号</strong></p><h4 id="极性和相位"><a href="#极性和相位" class="headerlink" title="极性和相位"></a>极性和相位</h4><p>SPI总线有四种不同的工作方式取决于极性(CPOL)和相位(CPHA)</p><p>CPOL表示SCLK空闲时的状态</p><ul><li>CPOL&#x3D;0时表示SCLK空闲时为低电平</li><li>CPOL&#x3D;1时表示SCLK空闲时为高电平</li></ul><p>CPHA表示接收信号的时机</p><ul><li>CPHA&#x3D;0时表示第一个时钟沿接收信号</li><li>CPHA&#x3D;1表示第二个时钟沿接收信号</li></ul><p>与I2C的相同：</p><ul><li>均采用同步，串行方式</li><li>均采用TTL电平</li><li>均采用主从方式工作</li></ul><p>与I2C的区别：</p><ul><li>I2C通过从机地址确定工作的从机，SPI通过发送使能信号唤醒从机</li><li>I2C时钟的极性和相位是固定的，SPI是可调的</li><li>I2C有应答机制，SPI无应答机制</li><li>I2C是半双工，spi是全双工</li></ul><h3 id="USB"><a href="#USB" class="headerlink" title="USB"></a>USB</h3><p><strong>一共有4条线，分别为：Vbus，D+，D-，GND</strong></p><p><strong>反向不归零编码(NRZI):用信号电平翻转代表0，信号电平保持代表1，这种编码方式既可以保证数据传输的完整性，也不需要传输过程中包含独立的时钟,但是信号电平长时间保持时，会导致接收器丢失同步信号，所以在信号电平保持最长6个周期后，会将信号电平强制反转，保证时钟周期的同步，而接收器会扔掉自动翻转的0电平，不会对数据传输产生干扰</strong></p><p><img src="/2023/03/05/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/image-20230316202917950.png" alt="image-20230316202917950"></p><p>USB只允许有一个主机。可分为3个不同的模块</p><ul><li>客户软件：负责USB设备的通信，以实现其功能，不能直接访问USB设备，必须通过系统软件与总线接口进行访问，包括USB设备驱动程序和界面应用程序</li><li>USB系统软件：负责USB逻辑设备进行配置通信，同时管理客户软件启动的数据传输，包括USB总线驱动程序和USB主控制器驱动程序</li><li>USB总线接口：包括主控制器和根集线器，主控制器负责完成数据的传输，根集线器负责给usb系统提供一个或多个连接点</li></ul><p>USB设备主要有3个不同模块</p><ul><li>USB总线接口：是USB设备中的串行接口引擎</li><li>USB逻辑设备：被USB系统软件看成是一个端点的集合</li><li>功能单元：被客户软件看成是一个接口的集合</li></ul><p>他包括</p><ul><li>配置描述符</li><li>设备描述符</li><li>接口描述符</li><li>端点描述符</li><li>字符串描述符</li></ul><p><strong>设备：一个USB设备有一个或多个配置组成，但一定只有一个设备描述符</strong></p><p><strong>配置：USB设备的每一个配置都必须包含一个配置描述符</strong></p><p><strong>接口：一个配置可以由一个或多个接口组成，每一个接口必须由接口描述符组成</strong></p><p><strong>端点：是用于主机在各个USB设备中进行数据传输（0号端点可以支持输入或输出，但一般用于控制传输)</strong></p><p><strong>管道：与端点一一对应，一个设备有多少端点，通信时就可以用多少管道，通信时相互独立，传输方式由端点决定</strong></p><h4 id="USB拓扑结构"><a href="#USB拓扑结构" class="headerlink" title="USB拓扑结构"></a>USB拓扑结构</h4><p>USB主要有主机，集线器构成</p><p>拓扑结构中有3种元素</p><ul><li>主机</li><li>HUB（集线器）</li><li>设备</li></ul><p>最顶层为主机，连接到下一层的集线器，下一层的集线器再连接到更下一层的集线器与设备，如下图所示</p><p><img src="/2023/03/05/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/image-20230228173759767.png" alt="image-20230228173759767"></p><h4 id="当一个设备从集线器上接入时"><a href="#当一个设备从集线器上接入时" class="headerlink" title="当一个设备从集线器上接入时"></a>当一个设备从集线器上接入时</h4><ul><li>主机会检测到集线器状态的改变，发出一个命令使该端口有效并进行设置</li><li>设备接收到命令，进行响应，主机收到设备的响应，了解该设备用哪种驱动程序，并分配给其一个唯一的地址</li><li>主机发送内部设置请求</li></ul><h4 id="当一个设备从集线器上移除时"><a href="#当一个设备从集线器上移除时" class="headerlink" title="当一个设备从集线器上移除时"></a>当一个设备从集线器上移除时</h4><p>主线将其从可用资源列表上删除</p><h4 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h4><p>由包组成，一个包中由：</p><ul><li>同步字段：使USB设备与总线的包传输速率同步，固定为00000001</li><li>PID字段：用来表示数据封包的类型（令牌，数据，握手，特殊）</li></ul><p><img src="/2023/03/05/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/image-20230228175742798.png" alt="image-20230228175742798"></p><ul><li>数据字段：用来携带传输的数据，内容长度根据标识符，传输类型的不同而不同，先传低位，后传高位</li></ul><ol><li>分为ADDR数据域：由7位组成，用来寻址</li><li>ENDP数据域：由4位组成，寻址32个端点，端点1作为中断传输模式</li><li>帧序列号：当PID为SOF时，必须时一个11位的帧序列号，由主机产生，每产生一个加一，最大为0x7FF，最大时归0</li><li>数据：</li></ol><ul><li>CRC字段：循环冗余码，重要的信息由CRC16组成，其余的信息由CRC5组成</li><li>包结尾字段</li></ul><p>数据包的格式：</p><ul><li><p>令牌包：定义了传输数据的类型，是事务处理的第一个阶段，由IN,OUT,SETUP三个令牌包，分别为主机输入，主机输出作用，</p><p>与其他区别，除了PID,SYNC以及CRC5以外，由ENDP，ADDR两个字段</p></li><li><p>数据包：必须以8个字节为单位</p></li><li><p>握手包：仅包含一个数据域：一个SYNC字段，两个PID字段</p></li></ul><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p><strong>USB上一次信息接收或发送的过程称为事务</strong></p><p>类型包括：</p><ul><li>IN输入事务处理</li><li>OUT输出事务处理</li><li>SETUP设置事务处理</li></ul><p>输入事务时：</p><ul><li>主机发送一个令牌信息包</li><li>从机接收到后，如果设备正常运行，则发送一个数据包，若设备忙或设备出错，则发送一个握手包（NACK或STALL）</li><li>主机接收到后则回应一个握手包（ACK）</li></ul><p>输出事务时</p><ul><li>主机发送一个令牌信息包</li><li>紧接着主机再发送一个数据包</li><li>从机接收到后发送一个握手包（ACK），若设备忙或出错时则发送NACK或STALL握手包</li></ul><p>设置事务时与输出事务过程相同</p><p><strong>再USB当中，有4种传输类型</strong></p><ul><li>控制传输</li><li>中断传输</li><li>批量传输</li><li>同步传输</li></ul><h5 id="控制传输"><a href="#控制传输" class="headerlink" title="控制传输"></a>控制传输</h5><p>控制传输有2到3个阶段组成</p><ul><li>建立阶段（Setup）：主机从USB获取设备配置信息，并设置设备的配置值，数据交换包含了令牌包，数据包，握手包，它的作用是执行了一个设置的数据交换，并定义此次控制传输的内容</li><li>数据阶段（DATA）：根据数据阶段的数据传输方向，控制传输又可以分为3种：控制读取（读取USB描述符），控制写入（配置USB设备），无数据控制</li></ul><p>其中控制读取：</p><p>是将数据从设备读取到主机上，读取的数据是USB设备描述符，主机先发送一个IN令牌信息包，从机接收到后发送一个数据包，主机根据情况发送一个握手包，（ACK,NACK,STALL）</p><p>控制写入：</p><p>将数据从主机读取到设备上，数据为主机对USB的配置信息，主机先发送一个OUT令牌包，在发送数据包，设备最后发送握手包</p><ul><li>状态阶段（STATUS）：表示整个传输的过程已经完成，状态阶段的传输方向必须与数据阶段的方向相反</li></ul><p>每个阶段都由一个或多个事务组成</p><h5 id="批量传输"><a href="#批量传输" class="headerlink" title="批量传输"></a>批量传输</h5><ul><li>用于传输大量数据，保证数据不能出错，但对时间没有太大的要求</li><li>批量传输是可靠的传输，需要握手包来表明传输的结果，若数据量比较大，则会采用批量传输来完成全部数据的传输，其中PID会以翻转的形式传输如DATA0-DATA1-DATA0-DATA1，以保证发送端与接收端同步</li><li>USB允许连续3次以下的错误，如果连续发生错误后成功传输，则错误次数清零，当错误超过3次后，认为该端点功能错误，放弃传输</li><li>一次批量传输是指一次或多次批量事务传输</li><li>翻转同步：只有成功的事务传送才会使其翻转，否则会重新尝试本次传输</li></ul><h5 id="中断传输"><a href="#中断传输" class="headerlink" title="中断传输"></a>中断传输</h5><p>中断传输由IN事务和OUT事务组成</p><p>除流程上不支持PING以外，其他过程与批量传输相同，中断传输优先级较高，仅次于同步传输</p><p>中断传输总是用于对设备的查询，以确保是否有数据需要传输</p><h5 id="中断传输-1"><a href="#中断传输-1" class="headerlink" title="中断传输"></a>中断传输</h5><p>由两种包组成</p><ul><li>token</li><li>data</li></ul><p>不支持handshake和重传，因此他不可靠</p><p>他在传输中有着最高的优先级</p><p>同步传输适用于必须以固定速率抵达或在指定时刻抵达，可以容忍偶尔错误的数据上</p><h4 id="USB2-0的电路设计及保护"><a href="#USB2-0的电路设计及保护" class="headerlink" title="USB2.0的电路设计及保护"></a>USB2.0的电路设计及保护</h4><ul><li><p>L1为滤波磁珠，用于滤除电源上的干扰，磁珠阻抗选择范围为100Ω&#x2F;100MHz~1000Ω&#x2F;100MHz，典型值取600Ω&#x2F;100MHz，磁珠在选取时通流量应符合电路电流的要求；</p></li><li><p>L2为共模滤波电感，用于滤除差分信号上的共模干扰，磁珠阻抗选择范围为60Ω&#x2F;100MHz~120Ω&#x2F;100MHz，典型值取90Ω&#x2F;100MHz；</p></li><li><p>C1、C2为电源滤波电容，用于滤除电源上的干扰。C1、C2两个电容在取值上要相差100倍，典型值为10uF+0.1uF；小电容用于滤除电源上的高频干扰，大电容用于滤除电源线上的纹波干扰；</p></li><li><p>C3为接口地和数字地之间的跨接电容，典型值为1000pF&#x2F;2KV，容值也可根据实际测试情况进行调整；</p></li></ul><p><a href="https://img2020.cnblogs.com/blog/1298558/202010/1298558-20201020212713032-149768353.png"><img src="/2023/03/05/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/1298558-20201020212713032-149768353.png" alt="img"></a></p><p>其中D1,D2,D3为TVS，帮助快速泄放静电干扰</p><h4 id="PCB-Layout规则"><a href="#PCB-Layout规则" class="headerlink" title="PCB Layout规则"></a>PCB Layout规则</h4><ul><li>以差分式布线，参考面要连续，保证阻抗一致性</li><li>VBUS走线需要能承受1A的电流，以防止过流事件的发生</li><li>D+，D-走线必须等长，长度误差控制在5mil，并且不能走直角，需要钝角或圆弧走线，并且尽量不换层布线</li><li>与其他CLK或差分信号线之间的间距应该在20mil</li><li>保护器件与共模电感尽可能靠近接口</li><li>避免在晶振，晶体，时钟信号发生器周围布线</li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BA%BF/">通信总线</category>
      
      
      <category domain="http://example.com/tags/I2C%E3%80%81SPI%E3%80%81UART%E3%80%81RS232%E3%80%81RS485%E3%80%81USB/">I2C、SPI、UART、RS232、RS485、USB</category>
      
      
    </item>
    
    <item>
      <title>电力电子技术笔记</title>
      <link>http://example.com/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/</link>
      <guid>http://example.com/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/</guid>
      <pubDate>Sat, 04 Mar 2023 14:07:08 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;晶闸管&quot;&gt;&lt;a href=&quot;#晶闸管&quot; class=&quot;headerlink&quot; title=&quot;晶闸管&quot;&gt;&lt;/a&gt;晶闸管&lt;/h2&gt;&lt;p&gt;为3层PN结结构，有阴极，阳极，控制级&lt;/p&gt;
&lt;p&gt;工作流程；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阳极与电源相连&lt;/li&gt;
&lt;li&gt;阴极与</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="晶闸管"><a href="#晶闸管" class="headerlink" title="晶闸管"></a>晶闸管</h2><p>为3层PN结结构，有阴极，阳极，控制级</p><p>工作流程；</p><ul><li>阳极与电源相连</li><li>阴极与负载相连</li><li>晶闸管的门级（控制级）与阴极与控制晶闸管的电路相连，它属于半控型元器件</li></ul><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230317104500232.png" alt="image-20230317104500232"></p><p>阳极加上电压后，并不迅速导通，只有当控制级G加上正向电压，使VT1导通，晶闸管才会导通，此时去掉控制级上的电压，晶闸管仍会维持导通状态</p><h2 id="线性稳压器LDO"><a href="#线性稳压器LDO" class="headerlink" title="线性稳压器LDO"></a>线性稳压器LDO</h2><p><strong>线性稳压器分为：采样电路，调整管，放大电路，基准电压</strong></p><p>优点：成本低，噪音小，静态电流小，需要外接的元件也很少，一般只有旁路电容</p><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316190634844.png" alt="image-20230316190634844"></p><p>工作原理：输出电压通过采样电阻的分压，与基准电压去比较，输入给误差放大器，控制MOS管关断，其中MOS管可以看作一个滑动变阻器以此来保证输出电压Uo的稳定</p><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316191240815.png" alt="image-20230316191240815"></p><p>与DC-DC的区别</p><ul><li>输出电压为固定的</li><li>输入与输出电压差很小，而DC-DC的压差不一定，可以是降压也可以是升压，压差小的原因，压差大会导致流过MOS管，即滑动变阻器的电流变大，导致消耗的功率变高，所以低压差线性稳压器的压差要小</li><li>最大输出电流小，如果输出电流大的话调整管消耗的电流比较大</li><li>可以比较高，但一般来说效率低，DC-DC效率很高，一般在百分之80到百分之90</li><li>成本低，DC-DC成本较高，因为有电阻，电容，电感等器件</li></ul><p>注意78XX，79XX是线性稳压器件，并不是低压差线性稳压器（LDO），其要求输出电压比输入电压高2-3伏</p><h2 id="整流电路"><a href="#整流电路" class="headerlink" title="整流电路"></a>整流电路</h2><p>将交流电整成直流电</p><ul><li>按交流输入相数分为：单相电路和多相电路</li><li>按电路结构分为零式电路和桥式电路，零式又分为半波和全波</li><li>按组成器件分为不可控，半控，全控</li><li>按变压器二次测流的方向是单向还是双向分为单拍电路与双拍电路</li></ul><h3 id="单相半波可控整流电路"><a href="#单相半波可控整流电路" class="headerlink" title="单相半波可控整流电路"></a>单相半波可控整流电路</h3><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316155726993.png" alt="image-20230316155726993"></p><ul><li>触发延迟角：表示从晶闸管开始承受电压到施加触发脉冲的角度，用a表示，也称处发角或控制角</li><li>导通角：表示晶闸管在一个周期处于通态的角度</li></ul><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316160338798.png" alt="image-20230316160338798"></p><p>表示电压在一个周期内，从晶闸管导通后的函数面积除以2Π时间的平均值</p><p>阻感负载的特点：</p><p>电阻两端电流不能突变，对电流变化有抗拒作用</p><p>分析方法</p><ul><li>通过器件的理想化，将电路简化为分段线性电路</li><li>器件的每一种状态对应一种线性电路拓扑</li></ul><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316160757552.png" alt="image-20230316160757552"></p><h2 id="斩波电路"><a href="#斩波电路" class="headerlink" title="斩波电路"></a>斩波电路</h2><p>斩波电路的三种控制方式</p><ul><li><strong>脉冲宽度调制PWM：通过改变导通的时间，从而改变占空比，改变输出电压</strong></li><li><strong>脉冲频率调制PFM：导通时间不变，改变周期时间，从而改变导通占空比去控制输出电压（缺点，导通比的变化范围有限，输出电压，输出电流的谐波频率不固定，不利于设计）</strong></li><li>混合型：同时改变导通时间与周期时间</li></ul><h3 id="直流斩波电路（DC-DC）"><a href="#直流斩波电路（DC-DC）" class="headerlink" title="直流斩波电路（DC-DC）"></a>直流斩波电路（DC-DC）</h3><p>一共有两类斩波电路</p><ul><li>第一类要求输出在一定范围内可以调制</li><li>第二类要求输出在负载变化时，输出电压保持不变</li></ul><p><strong>将直流电变为另一固定电压或可调电压的直流电，一般指直接将直流电变为另一种直流电，不包括直流-交流-直流</strong></p><p>基本斩波电路一共有6种不同的斩波电路</p><ul><li>降压斩波电路</li><li>升压斩波电路</li><li>升降压斩波电路</li><li>CUK斩波电路</li><li>Sepic斩波电路</li><li>Zeta斩波电路</li></ul><h4 id="降压斩波电路（Buck电路）"><a href="#降压斩波电路（Buck电路）" class="headerlink" title="降压斩波电路（Buck电路）"></a>降压斩波电路（Buck电路）</h4><p>隔离型：表示输出的GND与输入的GND无关，也称为悬浮电源</p><p>非隔离型：表示输出的GND与输入的GND为同一GND</p><p>基本概念</p><ul><li>占空比：开通时间与周期的比值，决定了输出电压的平均值</li></ul><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316162541712.png" alt="image-20230316162541712"></p><p>原理：LC组成的低通滤波器，允许直流量通过，隔离谐波分量</p><p>平均电压为，输入电压与占空比相乘所得</p><ul><li><p>开关闭合时，二极管关断，电源通过电感，电阻输出</p></li><li><p>开关闭合式，二极管打开，变为续流二极管，使电感放电</p></li></ul><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316171954456.png" alt="image-20230316171954456"></p><p><strong>设计要求，电感对谐波的阻抗为wL，电容对谐波哦的阻抗为1&#x2F;wC，当电感阻抗远大于电容阻抗时，谐波在电感上产生的压降会远大于电容上产生的压降，这就会使，所得到的输出电压，为我们想要的直流分量，而谐波分量的压降都落在电感两端</strong></p><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316164659674.png" alt="image-20230316164659674"></p><p><strong>续流二极管：为输入负半周时，为电感提供放电回路，保护负载</strong></p><p><strong>电感选择较大电感，使电流脉动小，且电流连续，若电感小，电流不连续，则会出现上图图c的情况</strong></p><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316171116950.png" alt="image-20230316171116950"></p><p>输出功率与输入功率相同，通过控制PWM占空比，即通过控制开关管V的关断，即可控制输出的平均电压</p><p>工作流程：</p><p>MOS管开启，电源电压通过电感流入负载，并将电能存储在电感，电容中，当MOS管关断时，存储在电感，电容中的电能释放，流出电压通过负载，续流二极管流回电感，因为电路中电压很小，所以发热功率U*I很小，这也是为什么开关电源效率高的原因</p><p><strong>减少输出电压脉动的方法</strong></p><ul><li><strong>提高开关频率</strong></li><li><strong>加大电感</strong></li><li><strong>加大电容</strong></li></ul><p>保证电感电流连续所需要的条件</p><ul><li><strong>开关频率越高，电感L越大，所需要的负载电流Iok就越小</strong></li></ul><p>缺点：输出噪声较大</p><p>优点：效率高</p><p><strong>BUCK电路相关计算，伏秒法则</strong></p><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316230030306.png" alt="image-20230316230030306"></p><h4 id="隔离型BUCK变换器（单端正激变换器）"><a href="#隔离型BUCK变换器（单端正激变换器）" class="headerlink" title="隔离型BUCK变换器（单端正激变换器）"></a>隔离型BUCK变换器（单端正激变换器）</h4><p>在传统的BUCK变换器，中间加入了个隔离变压器</p><ul><li>引入了输入电源和负载电压的电气隔离</li><li>匹配输入电压和输出电压</li><li>输出多个不同的直流电压</li></ul><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316181415585.png" alt="image-20230316181415585"></p><p>绿色方框内为传统BUCK电路的开关，右侧为正常电路模型</p><p><strong>单端表示变压器磁通仅在单方面变化</strong></p><p><strong>正激表示电管开关管开启时将能量直接传送给负载</strong></p><h4 id="升压斩波型DC-DC电路（BOOST）"><a href="#升压斩波型DC-DC电路（BOOST）" class="headerlink" title="升压斩波型DC-DC电路（BOOST）"></a>升压斩波型DC-DC电路（BOOST）</h4><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316170011700.png" alt="image-20230316170011700"></p><p>工作流程：</p><ul><li>开关导通时，输入电压流向电感，电感电流线性增加，电感储能增加，电源向电感转移电能，此时负载通过电容C供电</li><li>开关关断时，电感释放能量，与电源同时向电容C，负载供电，提供电能</li></ul><p><strong>二极管的作用，防止在Mos管导通时，电容两端电压释放</strong></p><p><strong>这种工作原理我们称之为泵升原理</strong></p><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316174759474.png" alt="image-20230316174759474"></p><p>电压能升高的原因：</p><ul><li>电感中存储电能的泵升作用使输出电压升高</li><li>开关导通时，电容维持负载两端电压</li></ul><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316175742649.png" alt="image-20230316175742649"></p><p><strong>显然，要降低电压纹波，可以增加开关频率，电容量，来降低电压纹波</strong></p><p><strong>电感临界连续电流：</strong></p><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316175943922.png" alt="image-20230316175943922"></p><p>缺点：效率不高</p><p>优点：得到的电流较小</p><h4 id="升降压斩波电路-Buck-Boost"><a href="#升降压斩波电路-Buck-Boost" class="headerlink" title="升降压斩波电路(Buck-Boost)"></a>升降压斩波电路(Buck-Boost)</h4><p>Buck与Boost的组合，既可以升压，也可以降压，但要注意输出电容的下端为正，基本的Buck，Boost的输出电容都是上端为正</p><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316193557967.png" alt="image-20230316193557967"></p><h3 id="同步整流与异步整流"><a href="#同步整流与异步整流" class="headerlink" title="同步整流与异步整流"></a>同步整流与异步整流</h3><p>当功率管断开时，需要用不同的续流元器件进行续流，根据所用到的续流元器件种类的不同，可以分为同步整流与异步整流</p><p>以BUCK电路为例，若电路中只有一个MOS管，续流回路中所用的为二极管续流（不需要外加电路控制器通断），所形成的整流方式则为异步整流，</p><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316184204734.png" alt="image-20230316184204734"></p><p>若将续流回路中的二极管替换为MOS管，用额外的开关去控制其关断，则被称为同步整流，因为必须要根据电源的开关时序去同步控制S1,S2的关断</p><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316184334671.png" alt="image-20230316184334671"></p><p>异步整流与同步整流的两大区别：</p><ul><li>异步整流所使用的续流元器件为二极管，不需要额外的开关去控制其关断，而同步整流下侧使用的是MOS管，需要使用额外的开关控制器关断，如果S1，S2同步开启或关闭，则Vin会直接流入GND，所以需要一个滞留时间</li><li>在轻负载时，电感电流通过开关变成三角波，当负载电流变得非常少时，电感电流会下降至零交叉级，在此状态下，异步情况，二极管电流只能单向流动，因此橘色波形没有进入负领域的波形电流。同步模式，因为其可逆流，所以波形可以进入负领域，称为连续模式</li></ul><p>异步整流的优缺点：</p><ul><li>二极管两端压降恒定</li><li>效率低：因为二极管两端压降恒定，即使当回路中的电流很大时，二极管两端压降不变，在输出电压很低时，二极管两端所消耗的功率占比就会提高，所以大电流时功率低</li><li>生产成本比较便宜</li><li>可以用在输出电压较高的情况：因为二极管两端电压恒定，所以在输出电压很高的情况下，二极管所消耗的功率比率很降低，效率比较高，并且电路结构比较简单</li></ul><p>同步整流优缺点：</p><ul><li>一般使用的都是导通压降很低的MOS管</li><li>效率较高：因为MOS管的导通压降远小于二极管的导通压降，所以在相同电流时，在MOS管上损耗的功率远小于二极管上损耗的功率，所以效率比较高</li><li>需要额外的控制电路，因为MOS管需要驱动电路，使上下MOS管能同步，而非同步的二极管是自然整流的，不需要额外的控制电路驱动二极管关断</li><li>成本比较高</li></ul><p>所以总体来说，异步整流，同步整流需要考虑不同的点去选择</p><ul><li>效率</li><li>成本</li><li>可靠性：如果两个MOS管导通时间没有控制好，使两个MOS管同时导通，会使下方的控制MOS管损坏，而二极管很稳定</li></ul><p>思考：为什么在开关电源中，开关频率越高，电感越小，开关频率为什么不能太高</p><ul><li>在使用同一电感下，不同的开关频率，根据伏秒平衡，电感所充电的电能与释放的电能要相等，就会导致，在高的开关频率下，电感所需要存储，释放的电感就会小，因此不需要太大的电阻值</li><li>在高的开关频率下，流过开关管的电压与流过开关管的电流会有重合时间，这会导致在开关管上会有电能的损耗，所以开关频率越大，开关损耗就越大</li><li>并且开关有延迟时间，并不是开启之后立即导通，关闭之后立即关断</li></ul><h2 id="PWM控制的基本原理"><a href="#PWM控制的基本原理" class="headerlink" title="PWM控制的基本原理"></a>PWM控制的基本原理</h2><p>基本思想：</p><ul><li>冲量相等而形状不同的窄脉冲，如果加在具有惯性的环节上时，效果基本相同</li></ul><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316183140117.png" alt="image-20230316183140117"></p><p>不同的窄脉冲加在电路中，输出的电流形状基本一致，即为面积等效原理</p><p><strong>利用一组，等幅不等宽的脉冲，去表示一个正弦信号</strong></p><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316183428596.png" alt="image-20230316183428596"></p><ul><li>单极性PWM：等幅不等宽的脉冲，在一个半周期内仅有正值或负值</li><li>双极性PWM：等幅不等宽的脉冲，在所有周期，均有正值与负值两种极性</li></ul><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316183711780.png" alt="image-20230316183711780"></p><p>电流型逆变电路进行PWM控制，得到的就是电流型PWM</p><p>电压型逆变电路进行PWM控制，得到的就是电压型PWM</p><h2 id="单端反激式开关电源"><a href="#单端反激式开关电源" class="headerlink" title="单端反激式开关电源"></a>单端反激式开关电源</h2><p>反激式变换器</p><ul><li>由buck-boost变换器推演过来，将电路中的电感与MOS管换成一个隔离变压器，如下图所示</li></ul><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316222728924.png" alt="image-20230316222728924"></p><p>工作原理与Buck-Boost电路基本相似</p><p><strong>当开关管导通时，Vin给变压器种电感充电，此时输出电容放电，为负载提供电压，当开关管断开时，变压器放电，为电容充电的同时，给负载供电</strong></p><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316230853235.png" alt="image-20230316230853235"></p><p>相应的计算要掌握，关键点：伏秒平衡</p><p>何为单端反激式开关电源：</p><ul><li>单端：表示磁芯仅工作在磁滞回线的一侧</li><li>反激：表示开关管导通时，输出回路中的二极管截止，初级绕组NP存储能量，当开关断开时，初级绕组的能量通过次级绕组激VD1整流和电容C滤波后向负载输出</li></ul><p>优点：</p><ul><li>结构简单，可以同时输出不同的电压，且有较好的电压调整率</li></ul><p>缺点：</p><ul><li>电压纹波较大，外特性差，适用与固定负载</li></ul><p>原理框图</p><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316231608804.png" alt="image-20230316231608804"></p><p>正激与反激的区别</p><p><img src="/2023/03/04/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/image-20230316233239960.png" alt="image-20230316233239960"></p><p>正激指的是在开关管导通时，就已经有电流通过负载</p><p>​        <strong>根据变压器作用的不同来区分</strong></p><ul><li><p>反激：变压器起到隔离电气，电压匹配的作用，同时也起到储能的作用，总体来说，前半部分起到变压器的作用，而后半部分起到电感的作用</p></li><li><p>正激：变压器只起到了变压器的作用，没有起到电感的作用</p><p><strong>工作情况来分：</strong></p></li><li><p>正激：初级线圈工作时，次级线圈也在工作</p></li><li><p>反激：初级线圈工作时，次级线圈没有工作</p></li></ul><p><strong>正激与反激的工作最大区别是，当开关管关断时，正激的输出主要靠储能电感和续流二级管来维持输出，而反激的输出主要靠变压器次级释放能量来维持输出。</strong></p><h2 id="半桥式开关电源"><a href="#半桥式开关电源" class="headerlink" title="半桥式开关电源"></a>半桥式开关电源</h2><h2 id="全桥式开关电源"><a href="#全桥式开关电源" class="headerlink" title="全桥式开关电源"></a>全桥式开关电源</h2><h2 id="推挽式开关电源"><a href="#推挽式开关电源" class="headerlink" title="推挽式开关电源"></a>推挽式开关电源</h2>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%94%B5%E5%8A%9B%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/">电力电子技术</category>
      
      
      <category domain="http://example.com/tags/Buck-Boost-Ldo/">Buck,Boost,Ldo</category>
      
      
    </item>
    
    <item>
      <title>模电笔记</title>
      <link>http://example.com/2023/03/02/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/</link>
      <guid>http://example.com/2023/03/02/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/</guid>
      <pubDate>Thu, 02 Mar 2023 14:07:08 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;电阻&quot;&gt;&lt;a href=&quot;#电阻&quot; class=&quot;headerlink&quot; title=&quot;电阻&quot;&gt;&lt;/a&gt;电阻&lt;/h2&gt;&lt;h3 id=&quot;上拉电阻与下拉电阻&quot;&gt;&lt;a href=&quot;#上拉电阻与下拉电阻&quot; class=&quot;headerlink&quot; title=&quot;上拉电阻与下拉电阻&quot;&gt;&lt;/a&gt;&lt;strong&gt;上拉电阻与下拉电阻&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2023/03/02/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/image-20230316211019684.png&quot; alt=&quot;image-20230316211019684&quot;&gt;&lt;/p&gt;
&lt;p&gt;上拉电阻：使空闲状态时，电路保持在高电平&lt;/p&gt;
&lt;p&gt;下拉电阻：使空闲状态时，电路保持在低电平&lt;/p&gt;
&lt;h3 id=&quot;电阻的应用&quot;&gt;&lt;a href=&quot;#电阻的应用&quot; class=&quot;headerlink&quot; title=&quot;电阻的应用&quot;&gt;&lt;/a&gt;电阻的应用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;钳位：上下拉电阻，通常不希望高阻态的出现，通常使用上下拉电阻将点位限制在高电平或低电平&lt;/li&gt;
&lt;li&gt;拉电流：如I2C总线中，在总线上增加上拉电阻，增加总线上电流，提高驱动力&lt;/li&gt;
&lt;li&gt;增强抗干扰能力：针对于CMOS芯片中，不使用的引脚常常不会悬空，而是接一个上拉电阻提供协防电路&lt;/li&gt;
&lt;li&gt;阻抗匹配：长距离传输时，阻抗不匹配会引起反射，一般都会串联电阻消除阻抗不匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;计算方法&quot;&gt;&lt;a href=&quot;#计算方法&quot; class=&quot;headerlink&quot; title=&quot;计算方法&quot;&gt;&lt;/a&gt;计算方法&lt;/h3&gt;&lt;p&gt;常用的上拉电阻有4.7K，10K，应该如何选择呢&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上下拉的电阻可以根据阻值的大小，分为强拉和弱拉，拉电阻阻值越小，拉电流能力越强，但是相应的功耗也越大&lt;/li&gt;
&lt;li&gt;在高速电路中，过大的上拉电阻可能会导致信号的上升沿缓慢，过小的上拉电阻可能会导致信号的低电平过高（大于0V，可能会导致低电平被判定为高电平）&lt;/li&gt;
&lt;li&gt;针对于IO口内部带上下拉电阻，可以设置为高低电平模式，或高阻态模式，减小功耗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;阻值计算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通常来说，要确保高电平有效，上拉电阻要明显小于负载阻抗，否则会导致输出的高电平不足&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;电阻的最小值要保证电流不能超过场效应管的额定电流&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算出最大值和最小值，在中间取值即可，如果低电平要求严格，那么上拉电阻要尽可能的小，如果尽可能考虑低功耗，那么上拉电阻要尽可能大&lt;/p&gt;
&lt;p&gt;上文提到，阻抗不匹配会引起反射，反射的种类一共有4种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过冲&lt;/li&gt;
&lt;li&gt;振铃&lt;/li&gt;
&lt;li&gt;下冲&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2023/03/02/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/image-20230317101027940.png&quot; alt=&quot;image-20230317101027940&quot;&gt;&lt;/p&gt;
&lt;p&gt;阻抗匹配的目的是为了减少反射波叠加以避免过冲&lt;/p&gt;
&lt;h2 id=&quot;电容&quot;&gt;&lt;a href=&quot;#电容&quot; class=&quot;headerlink&quot; title=&quot;电容&quot;&gt;&lt;/a&gt;电容&lt;/h2&gt;&lt;p&gt;电容器的串并联分压公式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;串联公式：C&amp;#x3D;C1C2&amp;#x2F;(C1+C2)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并联公式C&amp;#x3D;C1+C2+C3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;补充部分：串联分压比V1&amp;#x3D;C2&amp;#x2F;(C1+C2)V…电容越大分得电压越小，交流直流条件下均如此&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并联分流比I1&amp;#x3D;C1&amp;#x2F;(C1+C2)I…电容越大通过的电流越大&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;电容阻抗与其频率有关，理想情况下频率越高阻抗越小，但实际情况下电容可看作一个电容电感串联的高效电路，因为电感频率越高阻抗越大，所以当频率高于电容谐振频率时，电容实际会表现出电感特性&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/03/02/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2R5eDE5OTM=,size_16,color_FFFFFF,t_70.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;电容降压&quot;&gt;&lt;a href=&quot;#电容降压&quot; class=&quot;headerlink&quot; title=&quot;电容降压&quot;&gt;&lt;/a&gt;电容降压&lt;/h3&gt;&lt;p&gt;利用电容容抗来取代回路中需要的电阻&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点:减少了降压元件所消耗的功率，既可以降压，又不消耗电能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实际使用时要注意:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要为电容提供一个可供其放电的回路，用电阻与电容串联，以防止实际使用后断电时触摸插孔会使电容放电导致触电。&lt;/p&gt;
&lt;p&gt;因负载通常都需要直流，所以回路中一般使用二极管来构成回路，由此衍生出如下两种降压电路&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;半波整流电路&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;电路中串联，并联两个二极管，D1为正半周期给RL提供负载，D2为C1提供放电回路，此时负载的电流为全波整流的一半，负半周期的电能送回给电源&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2023/03/02/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/20210119113015910.jpeg&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全波整流电路&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;为组件RL，正半周期都提供了良好的负载，此时负载的电流翻倍&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2023/03/02/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQwNzIzOA==,size_16,color_FFFFFF,t_70#pic_center.jpeg&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实际使用时，因为电路开启时，电容相当于短路，需要电容与一个电阻串联，防止后续器件烧伤，串联电阻的电阻值选取标准以后续器件的最小额定电流为准，当然实际情况电压会比额定电压大，所以电阻计算时应视情况而定&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="电阻"><a href="#电阻" class="headerlink" title="电阻"></a>电阻</h2><h3 id="上拉电阻与下拉电阻"><a href="#上拉电阻与下拉电阻" class="headerlink" title="上拉电阻与下拉电阻"></a><strong>上拉电阻与下拉电阻</strong></h3><p><img src="/2023/03/02/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/image-20230316211019684.png" alt="image-20230316211019684"></p><p>上拉电阻：使空闲状态时，电路保持在高电平</p><p>下拉电阻：使空闲状态时，电路保持在低电平</p><h3 id="电阻的应用"><a href="#电阻的应用" class="headerlink" title="电阻的应用"></a>电阻的应用</h3><ul><li>钳位：上下拉电阻，通常不希望高阻态的出现，通常使用上下拉电阻将点位限制在高电平或低电平</li><li>拉电流：如I2C总线中，在总线上增加上拉电阻，增加总线上电流，提高驱动力</li><li>增强抗干扰能力：针对于CMOS芯片中，不使用的引脚常常不会悬空，而是接一个上拉电阻提供协防电路</li><li>阻抗匹配：长距离传输时，阻抗不匹配会引起反射，一般都会串联电阻消除阻抗不匹配</li></ul><h3 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h3><p>常用的上拉电阻有4.7K，10K，应该如何选择呢</p><ul><li>上下拉的电阻可以根据阻值的大小，分为强拉和弱拉，拉电阻阻值越小，拉电流能力越强，但是相应的功耗也越大</li><li>在高速电路中，过大的上拉电阻可能会导致信号的上升沿缓慢，过小的上拉电阻可能会导致信号的低电平过高（大于0V，可能会导致低电平被判定为高电平）</li><li>针对于IO口内部带上下拉电阻，可以设置为高低电平模式，或高阻态模式，减小功耗</li></ul><p>阻值计算</p><ul><li><p>通常来说，要确保高电平有效，上拉电阻要明显小于负载阻抗，否则会导致输出的高电平不足</p></li><li><p>电阻的最小值要保证电流不能超过场效应管的额定电流</p></li></ul><p>计算出最大值和最小值，在中间取值即可，如果低电平要求严格，那么上拉电阻要尽可能的小，如果尽可能考虑低功耗，那么上拉电阻要尽可能大</p><p>上文提到，阻抗不匹配会引起反射，反射的种类一共有4种：</p><ul><li>过冲</li><li>振铃</li><li>下冲</li></ul><p><img src="/2023/03/02/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/image-20230317101027940.png" alt="image-20230317101027940"></p><p>阻抗匹配的目的是为了减少反射波叠加以避免过冲</p><h2 id="电容"><a href="#电容" class="headerlink" title="电容"></a>电容</h2><p>电容器的串并联分压公式</p><p><strong>串联公式：C&#x3D;C1C2&#x2F;(C1+C2)</strong></p><p><strong>并联公式C&#x3D;C1+C2+C3</strong></p><p><strong>补充部分：串联分压比V1&#x3D;C2&#x2F;(C1+C2)V…电容越大分得电压越小，交流直流条件下均如此</strong></p><p><strong>并联分流比I1&#x3D;C1&#x2F;(C1+C2)I…电容越大通过的电流越大</strong></p><p>电容阻抗与其频率有关，理想情况下频率越高阻抗越小，但实际情况下电容可看作一个电容电感串联的高效电路，因为电感频率越高阻抗越大，所以当频率高于电容谐振频率时，电容实际会表现出电感特性</p><p><img src="/2023/03/02/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2R5eDE5OTM=,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><h3 id="电容降压"><a href="#电容降压" class="headerlink" title="电容降压"></a>电容降压</h3><p>利用电容容抗来取代回路中需要的电阻</p><p><strong>优点:减少了降压元件所消耗的功率，既可以降压，又不消耗电能</strong></p><p><strong>实际使用时要注意:</strong></p><p>要为电容提供一个可供其放电的回路，用电阻与电容串联，以防止实际使用后断电时触摸插孔会使电容放电导致触电。</p><p>因负载通常都需要直流，所以回路中一般使用二极管来构成回路，由此衍生出如下两种降压电路</p><ul><li><p><strong>半波整流电路</strong></p></li><li><p>电路中串联，并联两个二极管，D1为正半周期给RL提供负载，D2为C1提供放电回路，此时负载的电流为全波整流的一半，负半周期的电能送回给电源</p></li></ul><p><img src="/2023/03/02/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/20210119113015910.jpeg" alt="在这里插入图片描述"></p><ul><li><strong>全波整流电路</strong></li><li>为组件RL，正半周期都提供了良好的负载，此时负载的电流翻倍</li></ul><p><img src="/2023/03/02/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQwNzIzOA==,size_16,color_FFFFFF,t_70#pic_center.jpeg" alt="在这里插入图片描述"></p><ul><li>实际使用时，因为电路开启时，电容相当于短路，需要电容与一个电阻串联，防止后续器件烧伤，串联电阻的电阻值选取标准以后续器件的最小额定电流为准，当然实际情况电压会比额定电压大，所以电阻计算时应视情况而定</li></ul><span id="more"></span><h3 id="电容滤波"><a href="#电容滤波" class="headerlink" title="电容滤波"></a>电容滤波</h3><p>由于大电容的制作工艺是多个导线缠绕制成，所以大电容工作时会表现出电感特性，即在高频信号下表现不好，而小电容因其体积小，所以其电感特性不明显，在高频信号下表现良好，所以可以采用大电容并联小电容的接法去过滤电路中的高频噪音和低频噪音</p><h2 id="电感"><a href="#电感" class="headerlink" title="电感"></a>电感</h2><p><strong>电感的电流不能突变</strong></p><h3 id="电感与磁珠的区别"><a href="#电感与磁珠的区别" class="headerlink" title="电感与磁珠的区别"></a>电感与磁珠的区别</h3><ol><li>电感是储能元件，磁珠是能量转换器件</li><li>电感多用于滤波回路，磁珠多用于信号回路</li><li>电感多用于中低频网络，磁珠常用于高频电路中</li></ol><h2 id="二极管"><a href="#二极管" class="headerlink" title="二极管"></a>二极管</h2><p>P型材料：用+3价硼原子从+4价的硅原子抢夺一个电子，硼原子带负电，硅原子留下空穴带正电，空穴即为多子</p><p>N型材料：用+5价磷原子，给予+4价硅原子一个电子，磷原子带正电，硅原子多一个电子带负电，电子为多子</p><p>PN结原理：扩散运动（多子），漂移运动（少子）</p><ul><li>施加正偏电压时，扩散运动增强，空间电荷区变窄</li><li>施加反偏电压时，漂移运动增强，空间电荷区变宽</li></ul><p>伏安特性曲线：</p><p><img src="/2023/03/02/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/image-20230225134328895.png" alt="image-20230225134328895"></p><p><strong>导通电压：由于本身的扩散运动会使PN结内部产生一个内电场，外部施加正向电压时其电场需要大于内电场，才能增强其扩散运动产生电流，硅二极管一般为0.7V</strong></p><p><strong>反向饱和电流：</strong></p><ul><li><strong>施加反向电压时的与横轴平行的电流，当施加反向电压时，几乎所有的少子都参与了漂移运动，所以外部来看反向饱和电流恒定</strong></li><li><strong>当大到一定程度时，破坏了PN结结构，价电子挣脱共价键的束缚形成电流，击穿电压</strong></li></ul><p><img src="/2023/03/02/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/image-20230225134835165.png" alt="image-20230225134835165"></p><p>uT为温度的电压当量</p><p>在电路中，对二极管同时施加直流电源和交流电源，则可将二极管视作一个电阻</p><h3 id="二极管的反向恢复过程"><a href="#二极管的反向恢复过程" class="headerlink" title="二极管的反向恢复过程"></a>二极管的反向恢复过程</h3><p>理想情况下，当电路中给予二极管一个远大于导通电压的电压时，突然使其反向，电路中的电流应立即截止，但实际情况为，电路中电流会先反向，而后缓慢截止</p><p><img src="/2023/03/02/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQwNzIzOA==,size_16,color_FFFFFF,t_70#pic_center-1678972112443-9.png" alt="在这里插入图片描述"></p><p>称之为二极管的反向恢复过程</p><p>产生的原因：</p><ul><li>在正向导通时，P区的空穴与N区的电子并不会在空间电荷区中立即复合，而是在一定的路程内，边漂移边扩散，使P区积攒电子，N区积攒空穴</li></ul><p><img src="/2023/03/02/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDQwNzIzOA==,size_16,color_FFFFFF,t_70#pic_center-1678972116083-12.png" alt="在这里插入图片描述"></p><ul><li>突然间施加反向电压时，P区的电子，与N区的空穴会被拽回到相应的区域，形成反向漂移电流，所以会导致UI图中的反向电流</li><li>漂移的过程，电子与空穴复合，电流会慢慢减小，直至变为正常的反向饱和电流</li></ul><p>因为二极管的反向恢复过程，所以二极管不能再快速连续的脉冲下当做开关，</p><h3 id="肖特基二极管"><a href="#肖特基二极管" class="headerlink" title="肖特基二极管"></a>肖特基二极管</h3><p>对应于传统二极管，肖特基二极管的优点是</p><ul><li>反向恢复时间非常短</li><li>导通电压低</li><li>漏电流比较大，反向击穿电压比较低</li></ul><p>对应于场效应管，肖特基二极管的区别是</p><ul><li>肖特基二极管低功耗，超高速，反向恢复时间短，一般用于整流电路，场效应管是三极管，输入阻抗高，功耗低，噪音小，漏电流小，开关特性好，一般用于放大电路</li></ul><h3 id="两个二极管串联的意义"><a href="#两个二极管串联的意义" class="headerlink" title="两个二极管串联的意义"></a>两个二极管串联的意义</h3><p>当要求二极管承受的电压值大于其反向击穿电压时，一个二极管无法满足要求，此时就可以用两个二极管串联，利用二极管反向的反向电阻分压，将反向电压平均分配，但由于每个二极管的反向电阻不一定相同，则应每个二极管再并联一个电阻，使其电阻近乎相同，从而做到均分反向电压</p><h3 id="续流二极管"><a href="#续流二极管" class="headerlink" title="续流二极管"></a>续流二极管</h3><p>消除回路中大量的反向电动势，保护元器件</p><p><img src="/2023/03/02/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/image-20230218153844988.png" alt="image-20230218153844988"></p><p>在图3 中KR 在VT 导通时，上面电压为上正下负，电流方向由上向下。在VT 关断时会，KR中电流突然中断，会产生感应电势，其方向是力图保持电流不变，即总想保持KR 电流方向为由下至下。这个感应电势与电源电压迭加后加在ＶＴ两端，容易使ＶＴ出穿。为此加上ＶＤ，将ＫＲ产生的感应电势短路掉，电注是你所说的“顺时针方向在二极管和继电器所的小回路里面流动”，从而保护ＶＴ</p><h3 id="瞬态电压抑制器"><a href="#瞬态电压抑制器" class="headerlink" title="瞬态电压抑制器"></a>瞬态电压抑制器</h3><p>利用二极管的反向击穿原理，与器件并联接入，当电路中电压过大，大于TVS的反向击穿电压时，TVS会从高阻态变为低电阻状态，同时将器件两端电压钳制在较低水平，保护电路，当电压恢复正常后，TVS管又变为高阻态，电路正常工作</p><h2 id="三极管"><a href="#三极管" class="headerlink" title="三极管"></a>三极管</h2><p>不同工作状态下所利用的场景不同</p><p><strong>一般来说，放大区用于放大电路中</strong></p><p><strong>而在数字电路中的三极管一般工作在饱和区和截止区，利用其开关特性</strong></p><h3 id="MOS管"><a href="#MOS管" class="headerlink" title="MOS管"></a>MOS管</h3><ul><li>结型：利用PN结特性，使用时要让栅源电压小于0，栅源电压越小，产生沟道越窄，同样会产生夹断现象，<strong>VGS不能大与0，会使GS的PN结导通</strong></li></ul><p><img src="/2023/03/02/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/image-20230227182851518.png" alt="image-20230227182851518"></p><ul><li>绝缘栅型：栅极下加入一个SIO2绝缘层，利用电场力吸引电子产生沟道，使漏源导通</li></ul><h4 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h4><p>因为MOS管栅极无电流，输入端无伏安特性曲线，所以没有输入特性，故用特殊的转移特性表示其特性曲线</p><p><img src="/2023/03/02/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/image-20230227183136034.png" alt="image-20230227183136034"></p><h3 id="三极管与MOS的对比"><a href="#三极管与MOS的对比" class="headerlink" title="三极管与MOS的对比"></a>三极管与MOS的对比</h3><p>1）．场效应管的源极S、栅极G、漏极D分别对应于三极管的发射极e、基极b、集电极c，它们的作用相似，图1-6-A所示是N沟道MOS管和NPN型晶体三极管引脚，图1-6-B所示是P沟道MOS管和PNP型晶体三极管引脚对应图。</p><p>2)．场效应管是电压控制电流器件，由VGS控制ID，普通的晶体三极管是电流控制电流器件，由IB控制IC。MOS管道放大系数是（跨导gm）当栅极电压改变一伏时能引起漏极电流变化多少安培。晶体三极管是电流放大系数（贝塔β）当基极电流改变一毫安时能引起集电极电流变化多少。</p><p>3)．场效应管栅极和其它电极是绝缘的，不产生电流；而三极管工作时基极电流IB决定集电极电流IC。因此场效应管的输入电阻比三极管的输入电阻高的多。</p><p>4)．场效应管只有多数载流子参与导电；三极管有多数载流子和少数载流子两种载流子参与导电，因少数载流子浓度受温度、辐射等因素影响较大，所以场效应管比三极管的温度稳定性好。</p><p>5)．场效应管在源极未与衬底连在一起时，源极和漏极可以互换使用，且特性变化不大，而三极管的集电极与发射极互换使用时，其特性差异很大，b 值将减小很多。</p><p>6)．场效应管的噪声系数很小，在低噪声放大电路的输入级及要求信噪比较高的电路中要选用场效应管。</p><p>7)．场效应管和普通晶体三极管均可组成各种放大电路和开关电路，但是场效应管制造工艺简单，并且又具有普通晶体三极管不能比拟的优秀特性，在各种电路及应用中正逐步的取代普通晶体三极管，目前的大规模和超大规模集成电路中，已经广泛的采用场效应管。</p><h3 id="IGBT"><a href="#IGBT" class="headerlink" title="IGBT"></a>IGBT</h3><p>由一个三极管与MOS管组合而成，使其有MOS管高输入阻抗的优点，同时还有三极管双载流的优点。实现驱动功率小，饱和压降低的好处</p><h3 id="作为开关使用时，MOS相比于三极管的好处"><a href="#作为开关使用时，MOS相比于三极管的好处" class="headerlink" title="作为开关使用时，MOS相比于三极管的好处"></a>作为开关使用时，MOS相比于三极管的好处</h3><ul><li>开关特性好:由于MOS管只靠多子导电，所以不存在少子储电特性，因此关断很迅速</li><li>输入阻抗高：由于MOS管栅极与衬底中有绝缘层隔开，可以看作为电容，所有有很大的输入阻抗</li><li>无二次击穿：当三极管温度上升时，会导致集电流电流上升，而集电极电流上升则会导致温度上升，形成恶循环，而mos管则具有与三极管相反的电流，温度特性，当温度上升时，电流反而会变小，从而温度会下降</li><li>MOS管导通后呈现纯阻性：三极管在饱和状态下时，可看作两个正偏的二极管，有极低的压降，但是这个压降为非线性电阻，不能利用欧姆定律去计算，而MOS管导通时呈现纯阻性状态，可以利用欧姆定律计算，从而可以使其并联在电路中，所以一个MOS管功率不够时，则可以多个MOS管并联</li></ul><h2 id="晶振"><a href="#晶振" class="headerlink" title="晶振"></a>晶振</h2><p>通电时产生机械振荡，施加力时会产生电</p><p>起振条件：</p><ul><li>输入与输出相位差为360：可以使输出返回到输入端的波形正好重叠，实现输出的放大</li><li>AF&gt;&#x3D;1:说明输入信号在回路中逛了一圈后又回到输入端，信号幅度比原来更大</li></ul><p>起振测量方法：</p><ul><li>测量无源晶振频率输入脚与输出脚两端电压差，一般为芯片电压Vcc的2分之1</li><li>直接用示波器测量，占空比为百分之50，平均电压为1&#x2F;2 Vcc</li></ul><h3 id="为什么要外加电容"><a href="#为什么要外加电容" class="headerlink" title="为什么要外加电容"></a>为什么要外加电容</h3><p>使晶体两端电容近似相当于负载电容，满足谐振条件使其起振</p><p>晶体旁的两个电容要接地，为三点式分压电容，接地点就是分压点</p><h3 id="为什么外加电阻"><a href="#为什么外加电阻" class="headerlink" title="为什么外加电阻"></a>为什么外加电阻</h3><p>晶体的内部芯片电路，可以看作是以一个增益很大的放大器，接入电阻相当于引入反馈，使晶体更稳定的工作</p><h3 id="晶振为什么不能放置在PCB边缘"><a href="#晶振为什么不能放置在PCB边缘" class="headerlink" title="晶振为什么不能放置在PCB边缘"></a>晶振为什么不能放置在PCB边缘</h3><p>会产生EMC辐射干扰电路</p><h3 id="32-768KHZ晶振作用"><a href="#32-768KHZ晶振作用" class="headerlink" title="32.768KHZ晶振作用"></a>32.768KHZ晶振作用</h3><p>32768为2的15次方，作为单片机中的时钟信号，将其15等分即能获得频率为1HZ的信号</p><h2 id="放大电路"><a href="#放大电路" class="headerlink" title="放大电路"></a>放大电路</h2><p>共射级放大电路：</p><p>为什么输出电阻很大时，输出相当于电流源，输出电阻很小时，输出相当于电压源</p><p>原因：<strong>根据戴维南等效定律，从负载RL向电路看，可以等效为一个电压源和一个电阻串联，所以可得到相应的Uo，Io，根据公式可算出，当R0很大时，负载电阻的变化对电流几乎没影响，但对电压影响很大，R0很小时，负载电阻变化对电压几乎没影响，但对电流影响很大</strong></p><p>放大电路中，射级偏置电压Re的作用：</p><p><strong>将输出与输入之间联系起来，Ic的升高引起Ie升高，从而导致Ue升高，再导致Ube分得的电压下降，导致Ib下降，反过来影响Ic，形成反馈</strong></p><p>Rb2的作用是温度B基级电压，让流过Ib2的电流远大于Ib，可以将Rb1，Rb2，在B点电压近似于两电阻分压</p><h3 id="复合管"><a href="#复合管" class="headerlink" title="复合管"></a>复合管</h3><p>由两个三极管构成，让他在高功率电路上近似看成一个三极管组成的电路构成，放大电路大约为两个三极管放大倍数相乘</p><h3 id="多级放大电路"><a href="#多级放大电路" class="headerlink" title="多级放大电路"></a>多级放大电路</h3><p>构成要求：在电压源有输入内阻的情况下，保证尽可能大的放大倍数情况下，当负载变化时，输出电压基本不变</p><p><strong>放大倍数为：输入电阻Ri与电压源内阻R0之比，输入电阻越大，放大倍数越大</strong></p><p>理想输入级：射级跟随器（共集电极电路），保证输入电阻很大</p><p>中间级：共射级放大电路</p><p>输出级：共基级放大电路（保证输出电阻小，且可以放大电压）</p><p>耦合方式：不同放大电路之间的连接方式</p><ul><li>直接耦合：低频特性好，易于集成，缺点：Q点调试困难</li><li>阻容耦合：无法集成</li><li>变压器耦合：</li></ul><h2 id="稳压器"><a href="#稳压器" class="headerlink" title="稳压器"></a>稳压器</h2><h3 id="串联型稳压器"><a href="#串联型稳压器" class="headerlink" title="串联型稳压器"></a>串联型稳压器</h3><h3 id="三端稳压器"><a href="#三端稳压器" class="headerlink" title="三端稳压器"></a>三端稳压器</h3><h2 id="运算放大器"><a href="#运算放大器" class="headerlink" title="运算放大器"></a>运算放大器</h2><h3 id="同相比例"><a href="#同相比例" class="headerlink" title="同相比例"></a>同相比例</h3><h3 id="返相比例"><a href="#返相比例" class="headerlink" title="返相比例"></a>返相比例</h3><h3 id="差动放大器"><a href="#差动放大器" class="headerlink" title="差动放大器"></a>差动放大器</h3>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/">模拟电子电路</category>
      
      
      
    </item>
    
    <item>
      <title>数电笔记</title>
      <link>http://example.com/2023/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/</link>
      <guid>http://example.com/2023/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/</guid>
      <pubDate>Fri, 24 Feb 2023 14:07:08 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;数电&quot;&gt;&lt;a href=&quot;#数电&quot; class=&quot;headerlink&quot; title=&quot;数电&quot;&gt;&lt;/a&gt;数电&lt;/h1&gt;&lt;h2 id=&quot;码制&quot;&gt;&lt;a href=&quot;#码制&quot; class=&quot;headerlink&quot; title=&quot;码制&quot;&gt;&lt;/a&gt;码制&lt;/h2&gt;&lt;p&gt;二进制：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为了解决二进制表示0时会有两组二进制数的问题引入补码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230226225432200.png&quot; alt=&quot;image-20230226225432200&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;正数的补码与原码相同&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;负数的补码等于数值位每一位取反加一&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2023/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230226230332992.png&quot; alt=&quot;image-20230226230332992&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果要进行数值位扩展，用8位二进制码表示5，正数加0，负数加1&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="数电"><a href="#数电" class="headerlink" title="数电"></a>数电</h1><h2 id="码制"><a href="#码制" class="headerlink" title="码制"></a>码制</h2><p>二进制：</p><p><strong>为了解决二进制表示0时会有两组二进制数的问题引入补码</strong></p><p><img src="/2023/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230226225432200.png" alt="image-20230226225432200"></p><ul><li><strong>正数的补码与原码相同</strong></li><li><strong>负数的补码等于数值位每一位取反加一</strong></li></ul><p><img src="/2023/02/24/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230226230332992.png" alt="image-20230226230332992"></p><p>如果要进行数值位扩展，用8位二进制码表示5，正数加0，负数加1</p><span id="more"></span><h2 id="卡诺图"><a href="#卡诺图" class="headerlink" title="卡诺图"></a>卡诺图</h2><h2 id="CMOS与TTL门电路"><a href="#CMOS与TTL门电路" class="headerlink" title="CMOS与TTL门电路"></a>CMOS与TTL门电路</h2><h3 id="CMOS"><a href="#CMOS" class="headerlink" title="CMOS"></a>CMOS</h3><h3 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h3><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><h3 id="JK触发器"><a href="#JK触发器" class="headerlink" title="JK触发器"></a>JK触发器</h3><h3 id="D触发器"><a href="#D触发器" class="headerlink" title="D触发器"></a>D触发器</h3><h3 id="RS触发器"><a href="#RS触发器" class="headerlink" title="RS触发器"></a>RS触发器</h3><h2 id="计数器集成芯片"><a href="#计数器集成芯片" class="headerlink" title="计数器集成芯片"></a>计数器集成芯片</h2><h3 id="74138译码器"><a href="#74138译码器" class="headerlink" title="74138译码器"></a>74138译码器</h3><h3 id="74151数据选择器"><a href="#74151数据选择器" class="headerlink" title="74151数据选择器"></a>74151数据选择器</h3><h3 id="74160与74161计数器"><a href="#74160与74161计数器" class="headerlink" title="74160与74161计数器"></a>74160与74161计数器</h3><h2 id="振荡器"><a href="#振荡器" class="headerlink" title="振荡器"></a>振荡器</h2><h3 id="施密特触发器"><a href="#施密特触发器" class="headerlink" title="施密特触发器"></a>施密特触发器</h3><h3 id="多谐触发器"><a href="#多谐触发器" class="headerlink" title="多谐触发器"></a>多谐触发器</h3><h3 id="单稳态触发器"><a href="#单稳态触发器" class="headerlink" title="单稳态触发器"></a>单稳态触发器</h3>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF/">数字电子电路</category>
      
      
      
    </item>
    
    <item>
      <title>单片机笔记</title>
      <link>http://example.com/2023/01/25/%E5%8D%95%E7%89%87%E6%9C%BA/</link>
      <guid>http://example.com/2023/01/25/%E5%8D%95%E7%89%87%E6%9C%BA/</guid>
      <pubDate>Wed, 25 Jan 2023 14:07:08 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;单片机&quot;&gt;&lt;a href=&quot;#单片机&quot; class=&quot;headerlink&quot; title=&quot;单片机&quot;&gt;&lt;/a&gt;单片机&lt;/h1&gt;&lt;p&gt;RAM：随机存储器，一般被称作运行内存，读取速度快，下电后数据不保留&lt;/p&gt;
&lt;p&gt;ROM：只读存储器，与RAM不同，不同于软盘与光盘，不易损坏，且存储容量较大，断电不丢失数据&lt;/p&gt;
&lt;h2 id=&quot;AT89S51&quot;&gt;&lt;a href=&quot;#AT89S51&quot; class=&quot;headerlink&quot; title=&quot;AT89S51&quot;&gt;&lt;/a&gt;AT89S51&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;8位微处理器：包括运算器与控制器，有位处理器&lt;/li&gt;
&lt;li&gt;数据存储器（128B RAM）：最多可扩至64KB，片内RAM为高速RAM&lt;/li&gt;
&lt;li&gt;程序存储器（4KB FLASH ROM）:最多可扩展至64KB&lt;/li&gt;
&lt;li&gt;4个8位IO口&lt;/li&gt;
&lt;li&gt;全双工异步串口：4种工作方式&lt;/li&gt;
&lt;li&gt;2个16位定时器&amp;#x2F;计数器：有4种工作方式&lt;/li&gt;
&lt;li&gt;1个看门狗定时器：计数器，检测系统是否跑飞或者死循环，对系统发出复位信号，使系统复位&lt;/li&gt;
&lt;li&gt;中断系统：5个中断源，5个中断向量（中断服务程序的入口）,2级中断优先级&lt;/li&gt;
&lt;li&gt;特殊功能寄存器SFR 26个：控制寄存器和状态寄存器，映射在片内RAM区80H~FFH之内&lt;/li&gt;
&lt;li&gt;低功耗的空闲模式和掉电模式&lt;/li&gt;
&lt;li&gt;3个程序加密位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相比于89C51，89S51最显著的优点是有一个ISP（在线可编程功能）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/01/25/%E5%8D%95%E7%89%87%E6%9C%BA/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230315103444131.png&quot; alt=&quot;image-20230315103444131&quot;&gt;&lt;/p&gt;
&lt;p&gt;40个引脚各个功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电源引脚：Vcc（5V电源），Vss（数字地）&lt;/li&gt;
&lt;li&gt;时钟引脚：XTAL1（输入源，使用片内震荡源时外接石英晶体，电容，使用外部震荡源时，该引脚悬空），XTAL2（片内震荡源反相放大器输出源）&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;控制引脚&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;RST&lt;/td&gt;
&lt;td&gt;复位信号输入，复位时必须加两个机器周期的高电平，正常时应该为TTL低电平&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EA*&lt;/td&gt;
&lt;td&gt;EA&amp;#x3D;1时，决定程序访问的ROM，PC值小于0FFFH时访问片内的FLASH，大于0FFFH时访问片外FLASH；EA&amp;#x3D;0时，只访问片外FLASH，地址为0000H~FFFFH，一般默认接高电平&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ALE&lt;/td&gt;
&lt;td&gt;访问外部存储器提供的低八位地址锁存信号，将低8位地址锁存在片外地址锁存器中，运行时一直有时钟信号输出，位晶振频率的六分之一，可通过特殊功能寄存器禁止时钟信号输出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PROG*&lt;/td&gt;
&lt;td&gt;对片内FLASH编程脉冲输入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PSEN*&lt;/td&gt;
&lt;td&gt;片外存储器读选通信号，低有效&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;IO口&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;P0&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;漏极开路（OD）的双向口&lt;/strong&gt;，可作为系统总线的低8位地址线与数据总线的分时复用口，也可作通用IO口，需要加上拉电阻，此时变为准双向口（没有高阻态），可负载8个低功耗型的TTL负载&lt;/td&gt;
&lt;td&gt;作为总线口输入输出时一定要先写1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P1&lt;/td&gt;
&lt;td&gt;准双向口，内部含有上拉电阻，可驱动4个低功耗型TTL负载，其中P1.5&amp;#x2F;P1.6&amp;#x2F;P1.7是用于对FLASH存储器进行编程和校验的SPI总线，分别是MOSI(串行数据输入)，MISO(串行数据输出)，SCK（移位脉冲引脚）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P2&lt;/td&gt;
&lt;td&gt;准双向口，内部有上拉电阻，可以作为系统总线的高8位地址总线使用&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P3&lt;/td&gt;
&lt;td&gt;准双向口，内部有上拉电阻&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;准双向口使用时要先写1&lt;/strong&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="单片机"><a href="#单片机" class="headerlink" title="单片机"></a>单片机</h1><p>RAM：随机存储器，一般被称作运行内存，读取速度快，下电后数据不保留</p><p>ROM：只读存储器，与RAM不同，不同于软盘与光盘，不易损坏，且存储容量较大，断电不丢失数据</p><h2 id="AT89S51"><a href="#AT89S51" class="headerlink" title="AT89S51"></a>AT89S51</h2><ul><li>8位微处理器：包括运算器与控制器，有位处理器</li><li>数据存储器（128B RAM）：最多可扩至64KB，片内RAM为高速RAM</li><li>程序存储器（4KB FLASH ROM）:最多可扩展至64KB</li><li>4个8位IO口</li><li>全双工异步串口：4种工作方式</li><li>2个16位定时器&#x2F;计数器：有4种工作方式</li><li>1个看门狗定时器：计数器，检测系统是否跑飞或者死循环，对系统发出复位信号，使系统复位</li><li>中断系统：5个中断源，5个中断向量（中断服务程序的入口）,2级中断优先级</li><li>特殊功能寄存器SFR 26个：控制寄存器和状态寄存器，映射在片内RAM区80H~FFH之内</li><li>低功耗的空闲模式和掉电模式</li><li>3个程序加密位</li></ul><p>相比于89C51，89S51最显著的优点是有一个ISP（在线可编程功能）</p><p><img src="/2023/01/25/%E5%8D%95%E7%89%87%E6%9C%BA/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230315103444131.png" alt="image-20230315103444131"></p><p>40个引脚各个功能：</p><ul><li>电源引脚：Vcc（5V电源），Vss（数字地）</li><li>时钟引脚：XTAL1（输入源，使用片内震荡源时外接石英晶体，电容，使用外部震荡源时，该引脚悬空），XTAL2（片内震荡源反相放大器输出源）</li></ul><table><thead><tr><th>控制引脚</th><th>功能</th></tr></thead><tbody><tr><td>RST</td><td>复位信号输入，复位时必须加两个机器周期的高电平，正常时应该为TTL低电平</td></tr><tr><td>EA*</td><td>EA&#x3D;1时，决定程序访问的ROM，PC值小于0FFFH时访问片内的FLASH，大于0FFFH时访问片外FLASH；EA&#x3D;0时，只访问片外FLASH，地址为0000H~FFFFH，一般默认接高电平</td></tr><tr><td>ALE</td><td>访问外部存储器提供的低八位地址锁存信号，将低8位地址锁存在片外地址锁存器中，运行时一直有时钟信号输出，位晶振频率的六分之一，可通过特殊功能寄存器禁止时钟信号输出</td></tr><tr><td>PROG*</td><td>对片内FLASH编程脉冲输入</td></tr><tr><td>PSEN*</td><td>片外存储器读选通信号，低有效</td></tr></tbody></table><table><thead><tr><th>IO口</th><th></th><th></th></tr></thead><tbody><tr><td>P0</td><td><strong>漏极开路（OD）的双向口</strong>，可作为系统总线的低8位地址线与数据总线的分时复用口，也可作通用IO口，需要加上拉电阻，此时变为准双向口（没有高阻态），可负载8个低功耗型的TTL负载</td><td>作为总线口输入输出时一定要先写1</td></tr><tr><td>P1</td><td>准双向口，内部含有上拉电阻，可驱动4个低功耗型TTL负载，其中P1.5&#x2F;P1.6&#x2F;P1.7是用于对FLASH存储器进行编程和校验的SPI总线，分别是MOSI(串行数据输入)，MISO(串行数据输出)，SCK（移位脉冲引脚）</td><td></td></tr><tr><td>P2</td><td>准双向口，内部有上拉电阻，可以作为系统总线的高8位地址总线使用</td><td></td></tr><tr><td>P3</td><td>准双向口，内部有上拉电阻</td><td></td></tr></tbody></table><p><strong>准双向口使用时要先写1</strong></p><span id="more"></span><p><strong>CPU</strong></p><ul><li>运算器：对操作数进行算术，逻辑和位操作运算</li></ul><p>组成：算术逻辑运算单元ALU，累加器A，位处理器，程序状态字寄存器PSW，以及两个暂存器</p><p><strong>ALU：可以对8位变量进行逻辑运算，算术运算</strong></p><p><strong>A：使用最频繁的寄存器，可作为ALU的输入数据源之一，也可当作运算结果的存放单元，大多数数据都通过A，数据中转站，为避免瓶颈阻塞，单片机提供了不经过累加器的指令</strong></p><p><strong>PSW：字节地址为DOH</strong></p><p><img src="/2023/01/25/%E5%8D%95%E7%89%87%E6%9C%BA/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230315111238235.png" alt="image-20230315111238235"></p><ol><li><strong>Cy：进位标志位，当有进位产生时为1，在位处理器时为，是累加器</strong></li><li><strong>Ac：辅助进位标志位，使用BCD码时，当低4位向高4位有进位时为1</strong></li><li><strong>F0：由用户使用的状态标志位，用指令使他置1或清0，控制程序流向</strong></li><li><strong>RS1，RS0：寄存器区选择位，分别用来选择4组不同的寄存器地址，（00H~1FH）</strong></li><li><strong>OV：溢出标志位</strong></li><li><strong>P：奇偶校验位，1表示累加器A中“1”的个数为奇数</strong></li></ol><ul><li>控制器</li></ul><ol><li>PC：程序计数器，是一个独立的16位计数器，用户不可访问，复位时PC位0000H，从程序存储器0000H开始读指令，取一个后自动加1，位宽决定能够访问的程序范围</li></ol><p><strong>存储器：哈佛结构，有各自的访问指令，分为4类</strong></p><ul><li>程序存储器(分为片内和片外两部分)：Flash Rom 最多为4KB，片外可扩至64KB</li></ul><p><strong>片内4KB FLASH，地址为0000H<del>0FFFH，16位地址总线，片外扩至64KB时，地址为0000H</del>FFFFH，有5个固定单元为中断源入口地址，分别为00003H~0023H，每个依次相隔8位，分别为外部中断0，定时器0，外部中断1，定时器1，串行口</strong></p><p><img src="/2023/01/25/%E5%8D%95%E7%89%87%E6%9C%BA/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230315112839522.png" alt="image-20230315112839522"></p><ul><li>数据存储器（分为片内片外两部分）：片内RAM最多为128B，片外可扩至64KB</li></ul><p><strong>程序存储器可扩展最大RAM由地址线决定，89S51地址线为16根，所以可扩展2的16次幂，即64KB，片内片外的低128B地址是相同的，但由于访问指令不同所以不冲突</strong></p><p><img src="/2023/01/25/%E5%8D%95%E7%89%87%E6%9C%BA/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230315115705939.png" alt="image-20230315115705939"></p><ul><li>特殊功能寄存器SFR：各功能部件的控制寄存器和状态寄存器</li></ul><p><strong>映射在片内80H~FFH，仅有字节地址末尾为8和0的特殊功能寄存器可以进行位寻址</strong></p><p><img src="/2023/01/25/%E5%8D%95%E7%89%87%E6%9C%BA/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230315115922552.png" alt="image-20230315115922552"></p><p><img src="/2023/01/25/%E5%8D%95%E7%89%87%E6%9C%BA/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230315122332406.png" alt="image-20230315122332406"></p><p><strong>堆栈指针SP：主要保护断点（保护跳转前程序指针）和现场保护（保护寄存器中的值），复位后默认为07H，使用时需要重新设置堆栈指针地址，一般设在片内RAM最上层</strong></p><p><strong>寄存器B：主要用于乘除法的数据存储，A*B时，高8位放入B寄存器，低8位放入A寄存器，除法时，商放入A寄存器，余数放入B寄存器</strong></p><p><strong>辅助寄存器AUXR：DISALE(ALE的禁止允许位，为0时允许)，DISRT0（控制看门狗是否在溢出情况下对系统进行复位，为0时允许复位），WDIDLE（单片机在空闲模式下看门狗是否计数，为0时允许计数）</strong></p><p><strong>数据指针DPTR0与DPTR1：DPTR0为89C51原有的数据指针，DPTR1为新增加的数据指针，AUXR1寄存器用于选择使用哪个数据指针，为0时使用DPTR0，数据指针也可以作为一个独立的16位寄存器使用，或两个8位的寄存器使用</strong></p><p><strong>辅助寄存器AUXR1：DPS用于选择使用哪个数据指针，地址为A2H</strong></p><p><strong>看门狗计数器WDT：14位计数器和看门狗定时器复位寄存器</strong></p><ul><li>位地址空间：211个可寻址位，128片内RAM，83位SFR区</li></ul><p>128位在RAM中20H~2FH单元中，每个单元为8位，一共128位，每一位可以置1清0，也可以进行8位的读或写</p><p>剩余的位在特殊功能寄存器中，一共有11个寄存器可供位寻址，一共88位，由5位未用</p><p><img src="/2023/01/25/%E5%8D%95%E7%89%87%E6%9C%BA/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230315104510770.png" alt="image-20230315104510770"></p><p><strong>串行IO口属于带锁存功能的特殊寄存器，字节地址分别为80H,90H,A0H,B0H</strong></p><h3 id="时钟电路与时序"><a href="#时钟电路与时序" class="headerlink" title="时钟电路与时序"></a>时钟电路与时序</h3><p>时钟电路产生必须的控制信号，严格按时执行指令，执行程序时，CPU首先取指令，然后译码，由时序电路产生的一系列控制信号完成规定的操作</p><p>时序信号分为两类</p><ul><li>对片内各个功能部件进行控制，用户无需了解</li><li><strong>对片外存储器或I&#x2F;O的控制</strong></li></ul><p><strong>时钟频率直接影响单片机运行速度</strong></p><p>分为两种</p><ul><li>内部时钟方式：内部集成了一个高增益的反相放大器，外部只需要接一个晶振（11.0592）两个电容即可</li><li>外部时钟方式：利用现成的外部振荡器产生脉冲信号，一般用于控制多个单片机，使用外部振荡器时XLAT2要悬空</li></ul><p>时钟周期：时钟信号的基本时间单位</p><p>机器周期：单片机完成一个基本操作所需要的时间，一个机器周期可能包含若干个时钟周期，S51位12个时钟周期为一个机器周期，<strong>一个机器周期有6个状态，1个状态有2拍，一拍代表一个时钟周期</strong></p><p>指令周期：执行一条指令所需要的时间，一般一个指令周期为一个机器周期</p><p><strong>复位时只需要在RST引脚给一个两个机器周期的高电平即可复位</strong></p><p><strong>单片机最小系统：单片机，时钟电路，复位电路</strong></p><h3 id="低功耗模式"><a href="#低功耗模式" class="headerlink" title="低功耗模式"></a>低功耗模式</h3><p><strong>空闲模式IDLE：切断驱动CPU的时钟，退出方式：响应中断，硬件复位</strong></p><p><strong>掉电保持模式PD：切断所有时钟，维持单片机中RAM，特殊功能寄存器中的内容，该模式可以由内部电源供电</strong></p><p>PCON特殊功能寄存器（87H）：</p><ul><li>SMOD：串行通信波特率的选择</li><li>GF1：通用标志位</li><li>GF0：通用标志位</li><li>PD：掉电保持模式控制位，为1时进入掉电保持模式</li><li>IDL：空闲状态控制位，为1时进入空闲状态</li></ul><h3 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h3><p>寻址方式：指令中说明操作数所在位置的方法</p><ul><li><p>寄存器寻址：如MOV A，Rx 将Rx中的数送入A累加器中，Rx为当前使用的寄存器组中的R0<del>R7，即RAM中的00H</del>1FH</p></li><li><p>直接寻址：如MOV  A，40H表示把RAM中40H所指向的数据送入累加器A中，也可以MOV   30H , 40H意思为把40H所指向的数据送入30H中，<strong>是访问片内所有特殊功能寄存器的唯一方式</strong></p></li><li><p><strong>寄存器间接寻址：如MOV A , @Ri (I&#x3D;0或1)     表示Ri中存放的是操作数的地址，通过该地址找到该数据存到累加器A中</strong></p></li><li><p>立即数寻址方式：如 MOVC A ,#40H ，表示直接将40H送给累加器A</p></li><li><p><strong>基址加变址寻址方式：基址寄存器只能是PC或DPTR，变址为累加器A，如MOV A , @A+DPTR，两者相加作为16位地址进行寻址</strong></p></li><li></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/">单片机原理及应用</category>
      
      
      
    </item>
    
    <item>
      <title>PCB常用规则</title>
      <link>http://example.com/2023/01/14/PCB%20Layout/</link>
      <guid>http://example.com/2023/01/14/PCB%20Layout/</guid>
      <pubDate>Sat, 14 Jan 2023 14:07:08 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;PCB&quot;&gt;&lt;a href=&quot;#PCB&quot; class=&quot;headerlink&quot; title=&quot;PCB&quot;&gt;&lt;/a&gt;PCB&lt;/h1&gt;&lt;h2 id=&quot;PCB模块化设计&quot;&gt;&lt;a href=&quot;#PCB模块化设计&quot; class=&quot;headerlink&quot; title=&quot;PCB模块化设计&quot;&gt;&lt;/a&gt;PCB模块化设计&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2023/01/14/PCB%20Layout/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230226171410492.png&quot; alt=&quot;image-20230226171410492&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU等放到中间&lt;/li&gt;
&lt;li&gt;电源置于左侧&lt;/li&gt;
&lt;li&gt;上下为接口&lt;/li&gt;
&lt;li&gt;右侧为继电器和蜂鸣器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;布局原则&quot;&gt;&lt;a href=&quot;#布局原则&quot; class=&quot;headerlink&quot; title=&quot;布局原则&quot;&gt;&lt;/a&gt;布局原则&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;先大后小，先难后易，重要的&lt;strong&gt;单元电路&lt;/strong&gt;，&lt;strong&gt;核心元器件&lt;/strong&gt;应该优先进行布局。如MCU&lt;/li&gt;
&lt;li&gt;去耦电容应该尽量靠近IC芯片的电源管脚附近，并使电源与地之间的回路尽可能减小，防止干扰&lt;/li&gt;
&lt;li&gt;相同的结构电路部分尽量使用对称布局&lt;/li&gt;
&lt;li&gt;同一类型的插装元件在X或Y方向上应该尽量朝同一个方向布置，同一种类型的有极性元器件也要力争在X或Y方向上保持一致（尽量让正极都朝上或朝下）&lt;/li&gt;
&lt;li&gt;发热元件应均匀分布，保证散热，但除温度检测元件以外的温度敏感元件应远离发热元件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高电压大电流信号&lt;/strong&gt;与&lt;strong&gt;低电压小电流信号&lt;/strong&gt;应完全分开，&lt;strong&gt;模拟信号&lt;/strong&gt;与&lt;strong&gt;数字信号&lt;/strong&gt;分开，&lt;strong&gt;高频信号&lt;/strong&gt;与&lt;strong&gt;低频信号&lt;/strong&gt;分开，&lt;strong&gt;高频元器件之间的间隔要充分&lt;/strong&gt;，使用同一电源的器件尽量安排在同一区域，以便于将来的电源分隔&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h1><h2 id="PCB模块化设计"><a href="#PCB模块化设计" class="headerlink" title="PCB模块化设计"></a>PCB模块化设计</h2><p><img src="/2023/01/14/PCB%20Layout/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230226171410492.png" alt="image-20230226171410492"></p><ul><li>CPU等放到中间</li><li>电源置于左侧</li><li>上下为接口</li><li>右侧为继电器和蜂鸣器</li></ul><h2 id="布局原则"><a href="#布局原则" class="headerlink" title="布局原则"></a>布局原则</h2><ul><li>先大后小，先难后易，重要的<strong>单元电路</strong>，<strong>核心元器件</strong>应该优先进行布局。如MCU</li><li>去耦电容应该尽量靠近IC芯片的电源管脚附近，并使电源与地之间的回路尽可能减小，防止干扰</li><li>相同的结构电路部分尽量使用对称布局</li><li>同一类型的插装元件在X或Y方向上应该尽量朝同一个方向布置，同一种类型的有极性元器件也要力争在X或Y方向上保持一致（尽量让正极都朝上或朝下）</li><li>发热元件应均匀分布，保证散热，但除温度检测元件以外的温度敏感元件应远离发热元件</li><li><strong>高电压大电流信号</strong>与<strong>低电压小电流信号</strong>应完全分开，<strong>模拟信号</strong>与<strong>数字信号</strong>分开，<strong>高频信号</strong>与<strong>低频信号</strong>分开，<strong>高频元器件之间的间隔要充分</strong>，使用同一电源的器件尽量安排在同一区域，以便于将来的电源分隔</li></ul><span id="more"></span><h3 id="布线规则"><a href="#布线规则" class="headerlink" title="布线规则"></a>布线规则</h3><p>线宽规则：地线＞电源线线＞信号线</p><p>一般来说地线与电源线都分层铺铜处理</p><p>放置时，应遵循沿信号流向布线的原则，避免环绕</p><ul><li>3W原则：尽量保证平行线之间的间距大于三倍线宽</li><li>20H规则：电源层与底层之间电场是会变化的，会向外发出辐射，简称边缘效应，将电源层内缩，使电场只在接地层范围内传导，距离尽量大于20H（电源层与接地层之间的介质厚度）</li><li>5-5规则：当频率大于5Mhz或脉冲上升时间小于5ns时，要使用多层板</li><li>信号线与其回路形成的面积要尽可能小</li><li>消除串扰：保证3W原则，或在平行线中插入接地的隔离线，减小布线层与地平面的距离</li><li>对于高频信号，要将其用地线包裹</li><li>相邻层走线方向要正交控制，即相邻层走线互相垂直</li><li>不允许出现浮空多余的走线</li><li>同一网络的走线宽度应该保持一致，避免出现阻抗不匹配现象，产生反射</li><li>防止信号线出线闭环</li><li>走线尽可能的短</li><li>走线避免出现锐角或直角</li><li>要添加必要的去耦电容，电源与器件连接时中间要加入滤波，旁路，去耦电容尽可能靠近电源</li></ul><h2 id="蓝牙模块"><a href="#蓝牙模块" class="headerlink" title="蓝牙模块"></a>蓝牙模块</h2><ul><li>布局时，天线部分附近应该没有铜箔，即附近挖空</li><li>晶振部分，晶振是一个强干扰源，要远离天线部分，天线负责信号收发，如果有干扰的话会影响信号</li><li>天线匹配部分一般都是走一字型或L型</li><li>电源引脚做好退耦</li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/PCB-Layout/">PCB Layout</category>
      
      
      
    </item>
    
    <item>
      <title>Servlet入门</title>
      <link>http://example.com/2022/10/23/Servelet/</link>
      <guid>http://example.com/2022/10/23/Servelet/</guid>
      <pubDate>Sun, 23 Oct 2022 14:07:08 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Servlet&quot;&gt;&lt;a href=&quot;#Servlet&quot; class=&quot;headerlink&quot; title=&quot;Servlet&quot;&gt;&lt;/a&gt;Servlet&lt;/h1&gt;&lt;h2 id=&quot;快速入门&quot;&gt;&lt;a href=&quot;#快速入门&quot; class=&quot;headerlink&quot; title=&quot;快速入门&quot;&gt;&lt;/a&gt;快速入门&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;导入Javax.servelet依赖坐标&lt;/li&gt;
&lt;li&gt;创建一个类，实现servelet接口，并重写接口中的所有方法&lt;/li&gt;
&lt;li&gt;将类中加入webservlet注释，给定url路径&lt;/li&gt;
&lt;li&gt;启动tomcat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2022/10/23/Servelet/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221108090251260.png&quot; alt=&quot;image-20221108090251260&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;生命周期&quot;&gt;&lt;a href=&quot;#生命周期&quot; class=&quot;headerlink&quot; title=&quot;生命周期&quot;&gt;&lt;/a&gt;生命周期&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;当第一次被访问时，由web服务器创建servlat对象，当loadonstartup&amp;gt;&amp;#x3D;0时，则在服务器启动时就会创建Servlet对象&lt;/li&gt;
&lt;li&gt;被创建后，用init（）方法初始化servlat对象，如完成一些加载配置，创建链接等初始化工作。该方法只能调用一次&lt;/li&gt;
&lt;li&gt;每次请求servlet时，web服务器都会调用service方法对请求进行处理&lt;/li&gt;
&lt;li&gt;当需要释放内存或关闭服务器时，servlet对象会被销毁，web服务器会调用destory方法完成资源的回收，该方法也只能调用一次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;扩大局部变量作用域方法：创建一个成员变量，用this.name &amp;#x3D; name;将局部变量的值赋给成员变量，再由其他方法调用&lt;/p&gt;
&lt;h2 id=&quot;UrlPattern&quot;&gt;&lt;a href=&quot;#UrlPattern&quot; class=&quot;headerlink&quot; title=&quot;UrlPattern&quot;&gt;&lt;/a&gt;UrlPattern&lt;/h2&gt;&lt;p&gt;多个访问路径的配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;精确匹配    urlPatterns &amp;#x3D; {“&amp;#x2F;demo1”,”&amp;#x2F;demo2”}&lt;/li&gt;
&lt;li&gt;目录匹配    urlPatterns &amp;#x3D; {“&amp;#x2F;user&amp;#x2F;*”}  代表user目录下的任意路径&lt;/li&gt;
&lt;li&gt;扩展名匹配  urlPatterns &amp;#x3D; {“&amp;#x2F;*.do”}     代表扩展名为do的任意路径&lt;/li&gt;
&lt;li&gt;任意匹配    urlPatterns &amp;#x3D; {“&amp;#x2F;*”} 代表任意路径&lt;/li&gt;
&lt;li&gt;当一个路径同时满足多个匹配时，精确匹配优先级最高&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ul><li>导入Javax.servelet依赖坐标</li><li>创建一个类，实现servelet接口，并重写接口中的所有方法</li><li>将类中加入webservlet注释，给定url路径</li><li>启动tomcat</li></ul><p><img src="/2022/10/23/Servelet/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221108090251260.png" alt="image-20221108090251260"></p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul><li>当第一次被访问时，由web服务器创建servlat对象，当loadonstartup&gt;&#x3D;0时，则在服务器启动时就会创建Servlet对象</li><li>被创建后，用init（）方法初始化servlat对象，如完成一些加载配置，创建链接等初始化工作。该方法只能调用一次</li><li>每次请求servlet时，web服务器都会调用service方法对请求进行处理</li><li>当需要释放内存或关闭服务器时，servlet对象会被销毁，web服务器会调用destory方法完成资源的回收，该方法也只能调用一次</li></ul><p>扩大局部变量作用域方法：创建一个成员变量，用this.name &#x3D; name;将局部变量的值赋给成员变量，再由其他方法调用</p><h2 id="UrlPattern"><a href="#UrlPattern" class="headerlink" title="UrlPattern"></a>UrlPattern</h2><p>多个访问路径的配置</p><ul><li>精确匹配    urlPatterns &#x3D; {“&#x2F;demo1”,”&#x2F;demo2”}</li><li>目录匹配    urlPatterns &#x3D; {“&#x2F;user&#x2F;*”}  代表user目录下的任意路径</li><li>扩展名匹配  urlPatterns &#x3D; {“&#x2F;*.do”}     代表扩展名为do的任意路径</li><li>任意匹配    urlPatterns &#x3D; {“&#x2F;*”} 代表任意路径</li><li>当一个路径同时满足多个匹配时，精确匹配优先级最高</li></ul><span id="more"></span><h2 id="XML配置"><a href="#XML配置" class="headerlink" title="XML配置"></a>XML配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> //servlet文件名</span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.jdc.test.ServletDemo2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> /servlet全类名路径</span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Demo2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> //与上方设置的文件名相同</span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> //设置url路径</span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Request和Response"><a href="#Request和Response" class="headerlink" title="Request和Response"></a>Request和Response</h2><ul><li><strong>request对象负责接收客户端发出的请求数据</strong></li><li><strong>response对象负责发送服务端产生的数据</strong></li></ul><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><p>获取三种不同位置的数据</p><ul><li>请求行</li></ul><ol><li>getMethod（）：获取请求方式</li><li>getContextPath（）：获取虚拟目录</li><li>getRequestURL（）：获取url</li><li>getRequestURI（）：获取URI</li><li>getQueryString（）：获取请求参数</li></ol><ul><li>请求头</li></ul><ol><li>getHeader():获取请求头的数据</li></ol><ul><li>请求体</li></ul><ol><li>BufferedReader    getReader():获取字符输入流数据</li><li>ServletInputString  getInputStream():获取字节输入流数据</li></ol><hr><p><strong>针对get，post方法获取参数的通用方法</strong></p><ul><li>getParameterMap():获取所有参数的map集合</li><li>getParameterValues():获取特定参数的值的数据集合</li><li>getParameterNames():获取map集合中的所有键，返回的是枚举</li><li>getParameter():根据键获取单个参数值</li></ul><p><img src="/2022/10/23/Servelet/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221108111849643.png" alt="image-20221108111849643"></p><h4 id="请求中文乱码解决"><a href="#请求中文乱码解决" class="headerlink" title="请求中文乱码解决"></a>请求中文乱码解决</h4><p>设置响应头的contenttype，将charset设置为UTF-8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp.setHeader(<span class="string">&quot;content-type&quot;</span>,<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="请求转发（forward）"><a href="#请求转发（forward）" class="headerlink" title="请求转发（forward）"></a>请求转发（forward）</h4><p>一种在服务器内部资源跳转的形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getRequestDispatcher(<span class="string">&quot;要跳转的url路径&quot;</span>).forward(req,resp);</span><br></pre></td></tr></table></figure><p>跳转资源共享的三种语句</p><table><thead><tr><th>返回值类型</th><th>语句</th><th>作用</th></tr></thead><tbody><tr><td>void</td><td>setAttribute(String string,Object o)</td><td>为request域中添加变量</td></tr><tr><td>Object</td><td>getAttribute(String string)</td><td>根据string值获取request域中的变量</td></tr><tr><td>void</td><td>removeAttribute(String string)</td><td>根据string值移除request域中的键值对</td></tr></tbody></table><p>转发特点</p><ul><li>客户端路径不发生变化</li><li>只能在服务器内部转发资源</li><li>转发是一次请求，可以在转发过程中用request共享数据</li></ul><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><p>响应行</p><ul><li>void    setStatus（int sc）：设置响应状态码</li></ul><p>响应头</p><ul><li>void   setHeader(键，值)：设置响应头</li></ul><p>响应体</p><ul><li>PrintWriter   getWriter()：获取字符输出流</li><li>ServletOutPutStream     getOutPutStream（）：获取字节输出流</li></ul><h4 id="重定向（redirect）"><a href="#重定向（redirect）" class="headerlink" title="重定向（redirect）"></a>重定向（redirect）</h4><p>一种资源跳转的方式：将处理不了的资源转给别的服务器处理，将状态码（302）以及对应服务器位置（响应头）返还给客户端，告诉客户端去找别的服务器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp.sendRedirect(<span class="string">&quot;B服务器路径&quot;</span>) <span class="comment">//B服务器路径要加虚拟路径名称</span></span><br></pre></td></tr></table></figure><p>三个特点：与请求的forward特点相反</p><ul><li>浏览器地址栏发生变化</li><li>可以重定向到任意资源</li><li>发送了两次请求，不能共享数据</li></ul><h2 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h2><p>判定条件：明确路径的使用对象</p><ul><li>浏览器使用：需要虚拟路径</li><li>服务器使用：不需要虚拟路径</li></ul><h2 id="字节输出流与输入流对拷"><a href="#字节输出流与输入流对拷" class="headerlink" title="字节输出流与输入流对拷"></a>字节输出流与输入流对拷</h2><p>导入commons-io依赖坐标</p><p>其中IOUtills中的copy方法即可完成</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/JavaWeb/">JavaWeb</category>
      
      
      
    </item>
    
    <item>
      <title>HTML入门</title>
      <link>http://example.com/2022/10/06/Html/</link>
      <guid>http://example.com/2022/10/06/Html/</guid>
      <pubDate>Thu, 06 Oct 2022 14:07:08 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;HTML-结构层&quot;&gt;&lt;a href=&quot;#HTML-结构层&quot; class=&quot;headerlink&quot; title=&quot;HTML 结构层&quot;&gt;&lt;/a&gt;HTML 结构层&lt;/h1&gt;&lt;h2 id=&quot;基础标签&quot;&gt;&lt;a href=&quot;#基础标签&quot; class=&quot;headerlink&quot; title=&quot;基础标签&quot;&gt;&lt;/a&gt;基础标签&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;   //定义字符集&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;快速入门&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;   //设置页面标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;color&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;aqua&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;只因你太美&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;font&lt;/span&gt;&amp;gt;&lt;/span&gt;  //设置文字颜色，页面内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;   //一号标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      蔡徐坤的大只因 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;H2&lt;/span&gt;&amp;gt;&lt;/span&gt;   //二号标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      蔡徐坤第二大的只因&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;H2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      蔡徐坤的第三大只因&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h4&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      蔡徐坤的第四大只因&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h4&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;hr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;color&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;#00008b&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;face&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;楷体&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;size&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;只因你太美&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;font&lt;/span&gt;&amp;gt;&lt;/span&gt;  //字体颜色 字体格式 字体大小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;b&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;center&lt;/span&gt;&amp;gt;&lt;/span&gt;河大今日报&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;center&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;b&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;   //字体居中 加粗&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;“希望可以站在我们探索的起点上，不断奔向星辰大海。”&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;  //&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;P&lt;/span&gt;&amp;gt;&lt;/span&gt;段落 &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;I&lt;/span&gt;&amp;gt;&lt;/span&gt;斜体&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;u&lt;/span&gt;&amp;gt;&lt;/span&gt;近日，我国第四批预备航天员选拔工作正式启动。中国航天员，正期待着与你一起探索浩瀚宇宙、遇见别样风景、感受中国式浪漫。你有梦、就来闯，中国空间站等你来出差！&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;u&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;  //斜体，分段&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="HTML-结构层"><a href="#HTML-结构层" class="headerlink" title="HTML 结构层"></a>HTML 结构层</h1><h2 id="基础标签"><a href="#基础标签" class="headerlink" title="基础标签"></a>基础标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>   //定义字符集</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>快速入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span>   //设置页面标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;aqua&quot;</span>&gt;</span>只因你太美<span class="tag">&lt;/<span class="name">font</span>&gt;</span>  //设置文字颜色，页面内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>   //一号标题</span><br><span class="line">      蔡徐坤的大只因 </span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">H2</span>&gt;</span>   //二号标题</span><br><span class="line">      蔡徐坤第二大的只因</span><br><span class="line">  <span class="tag">&lt;/<span class="name">H2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">      蔡徐坤的第三大只因</span><br><span class="line">  <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">      蔡徐坤的第四大只因</span><br><span class="line">  <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#00008b&quot;</span> <span class="attr">face</span>=<span class="string">&quot;楷体&quot;</span> <span class="attr">size</span>=<span class="string">&quot;5&quot;</span>&gt;</span>只因你太美<span class="tag">&lt;/<span class="name">font</span>&gt;</span>  //字体颜色 字体格式 字体大小</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>河大今日报<span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>   //字体居中 加粗</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>“希望可以站在我们探索的起点上，不断奔向星辰大海。”<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  //<span class="tag">&lt;<span class="name">P</span>&gt;</span>段落 <span class="tag">&lt;<span class="name">I</span>&gt;</span>斜体</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">u</span>&gt;</span>近日，我国第四批预备航天员选拔工作正式启动。中国航天员，正期待着与你一起探索浩瀚宇宙、遇见别样风景、感受中国式浪漫。你有梦、就来闯，中国空间站等你来出差！<span class="tag">&lt;/<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  //斜体，分段</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="图片，视频，音频标签"><a href="#图片，视频，音频标签" class="headerlink" title="图片，视频，音频标签"></a>图片，视频，音频标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;a.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>图片标签 ：</strong></p><p>**SRC： URL路径 **</p><p><strong>width：宽</strong></p><p><strong>height：高</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;b.mp3&quot;</span> <span class="attr">controls</span> = <span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Controls：音频播放控制器</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;c.mp4&quot;</span> <span class="attr">controls</span> = <span class="string">&quot;controls&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Controls：视频播放控制器</strong></p><hr><p><strong>URL路径</strong></p><p><strong>相对路径：相对Html文件的位置关系</strong></p><p><strong>.&#x2F;表示当前目录下</strong></p><p><strong>..&#x2F;表示上一级目录</strong></p><p><strong>当两个文件如：html&#x2F;img&#x2F;111.img</strong></p><p><strong>第二个文件为 ：html&#x2F;audio&#x2F;222.mp4</strong></p><p><strong>因为img与audio平级</strong></p><p><strong>所以需要..&#x2F;返回上一级目录再找到audio，222.MP4</strong></p><p><strong>即..&#x2F;audio&#x2F;222.MP4</strong></p><p>绝对路径：完整路径</p><h2 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>点我去B站<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">     //跳转的URL路径                   // _Self即为在当前页面跳转超链接</span><br></pre></td></tr></table></figure><h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span> //ol为有序列表，ul为无序列表</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>鸡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>太<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>美<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span>&gt;</span>  //设置分隔符，表格宽度</span><br><span class="line">     <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;centre&quot;</span>&gt;</span>   //设置表头内容居中</span><br><span class="line">设置列合并 <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspawn</span>=<span class="string">&quot;2&quot;</span>&gt;</span>鸡<span class="tag">&lt;/<span class="name">th</span>&gt;</span> //表头</span><br><span class="line">         <span class="tag">&lt;<span class="name">th</span>&gt;</span>你<span class="tag">&lt;/<span class="name">th</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">th</span>&gt;</span>太<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">th</span>&gt;</span>美<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>   //设置表格内容居中</span><br><span class="line">设置行合并 <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspawn</span>=<span class="string">&quot;2&quot;</span>&gt;</span>你知道<span class="tag">&lt;/<span class="name">td</span>&gt;</span>  //表格</span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>我家哥哥<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>有<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>多努力吗<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>列扩展为将</p><h2 id="布局标签"><a href="#布局标签" class="headerlink" title="布局标签"></a>布局标签</h2><div>    块级标签，占一整行<p><span>  行内标签，占包裹内容de</span></p><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><p>action属性：指定表单数据提交的URL，表单项要想提交数据必须指定name属性</p><p>method属性：指定表单提交方式，get或post方式</p><p><strong>(默认值)get：请求参数会拼接在URL后面，长度有限制，仅支持4KB</strong></p><p><strong>post：请求参数会在请求协议的请求体中,长度无限制</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;userPassword&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;userSex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;userSex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        //选择框名字要保证一致，才能互斥，或者多选</span><br><span class="line">        //记得选择框要给一个value值，改变上传至服务器的值</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;userHobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;旅游&quot;</span>&gt;</span>旅游<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;userHobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;电影&quot;</span>&gt;</span>电影<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;userHobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;游戏&quot;</span>&gt;</span>游戏<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>上传个人证件<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;userInformation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我提交所有内容&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>type取值类型：</p><p>text：任意文本内容</p><p>password：密码内容</p><p>radio：单选选项</p><p>checkBox：复选选项，可以同时选择多个</p><p>file；上传文件</p><p>hidden：隐藏数据输入</p><p>submit：提交按钮</p><p>reset：重置按钮</p><p>button：点击按钮</p><h2 id="表单项标签"><a href="#表单项标签" class="headerlink" title="表单项标签"></a>表单项标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span> //选项</span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;个人简介&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Select下拉列表</p><p>textarea文本框</p></div>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/JavaWeb/">JavaWeb</category>
      
      
      
    </item>
    
    <item>
      <title>Mysql学习</title>
      <link>http://example.com/2022/09/28/JavaWeb/</link>
      <guid>http://example.com/2022/09/28/JavaWeb/</guid>
      <pubDate>Wed, 28 Sep 2022 14:07:08 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;Mysql基础&quot;&gt;&lt;a href=&quot;#Mysql基础&quot; class=&quot;headerlink&quot; title=&quot;Mysql基础&quot;&gt;&lt;/a&gt;Mysql基础&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;连接层&lt;/li&gt;
&lt;li&gt;服务层&lt;/li&gt;
&lt;li&gt;引擎层&lt;/li&gt;
&lt;li&gt;存储层&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;DDL-x2F-DML-x2F-DQL：对数据库，表进行操作的语句&quot;&gt;&lt;a href=&quot;#DDL-x2F-DML-x2F-DQL：对数据库，表进行操作的语句&quot; class=&quot;headerlink&quot; title=&quot;DDL&amp;#x2F;DML&amp;#x2F;DQL：对数据库，表进行操作的语句&quot;&gt;&lt;/a&gt;&lt;strong&gt;DDL&amp;#x2F;DML&amp;#x2F;DQL：对数据库，表进行操作的语句&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Create database name;  创建一个名为name的数据库&lt;/p&gt;
&lt;p&gt;drop database name;     删除一个名为name的数据库&lt;/p&gt;
&lt;p&gt;use database name;        进入数据库&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;show tables;   显示所有表&lt;/p&gt;
&lt;p&gt;desc table ; 查询表的结构&lt;/p&gt;
&lt;p&gt;create table tb_user(	id int comment ‘编号’	,	name varchar(20),	password varchar(20)	);  创建表，comment注释&lt;/p&gt;
&lt;p&gt;drop table name；删除表&lt;/p&gt;
&lt;p&gt;alter table  表名  rename to   新名字；     重命名&lt;/p&gt;
&lt;p&gt;alter table 表名   add 名称，数据类型       添加一列 	           &lt;/p&gt;
&lt;p&gt;alter table 表名   modify 名字，数据类型；修改一列的数据类型&lt;/p&gt;
&lt;p&gt;alter table 表名  rename to 新表名;     修改列名&lt;/p&gt;
&lt;p&gt;alter table 表名  change 名字，新名字，数据类型；  列名与数据类型一起修改&lt;/p&gt;
&lt;p&gt;alter table 表名  drop 列名；删除某列&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;整数 int                               id int&lt;/p&gt;
&lt;p&gt;字符串 varchar（长度）  name varchar(20);  存储两个字符，就会开辟两个空间，最大开辟20个   节省空间，性能低&lt;/p&gt;
&lt;p&gt; char 定长字符串              name char(10)  若存储两个字符，仍然会被看作10个空间，没存储的空间用空格代替    存储性能高，浪费空间&lt;/p&gt;
&lt;p&gt;Date 日期                          birthday date&lt;/p&gt;
&lt;p&gt;TIME 时间                          lunch time&lt;/p&gt;
&lt;p&gt;DateTime 日期+时间       anniversary datetime&lt;/p&gt;
&lt;p&gt;浮点数double（总长度，小数点后保留几位） money double(	5	,	2	);  表示存储0-100.00的数&lt;/p&gt;
&lt;hr&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="Mysql基础"><a href="#Mysql基础" class="headerlink" title="Mysql基础"></a>Mysql基础</h1><ul><li>连接层</li><li>服务层</li><li>引擎层</li><li>存储层</li></ul><h2 id="DDL-x2F-DML-x2F-DQL：对数据库，表进行操作的语句"><a href="#DDL-x2F-DML-x2F-DQL：对数据库，表进行操作的语句" class="headerlink" title="DDL&#x2F;DML&#x2F;DQL：对数据库，表进行操作的语句"></a><strong>DDL&#x2F;DML&#x2F;DQL：对数据库，表进行操作的语句</strong></h2><p>Create database name;  创建一个名为name的数据库</p><p>drop database name;     删除一个名为name的数据库</p><p>use database name;        进入数据库</p><hr><p>show tables;   显示所有表</p><p>desc table ; 查询表的结构</p><p>create table tb_user(id int comment ‘编号’,name varchar(20),password varchar(20));  创建表，comment注释</p><p>drop table name；删除表</p><p>alter table  表名  rename to   新名字；     重命名</p><p>alter table 表名   add 名称，数据类型       添加一列            </p><p>alter table 表名   modify 名字，数据类型；修改一列的数据类型</p><p>alter table 表名  rename to 新表名;     修改列名</p><p>alter table 表名  change 名字，新名字，数据类型；  列名与数据类型一起修改</p><p>alter table 表名  drop 列名；删除某列</p><hr><p>整数 int                               id int</p><p>字符串 varchar（长度）  name varchar(20);  存储两个字符，就会开辟两个空间，最大开辟20个   节省空间，性能低</p><p> char 定长字符串              name char(10)  若存储两个字符，仍然会被看作10个空间，没存储的空间用空格代替    存储性能高，浪费空间</p><p>Date 日期                          birthday date</p><p>TIME 时间                          lunch time</p><p>DateTime 日期+时间       anniversary datetime</p><p>浮点数double（总长度，小数点后保留几位） money double(5,2);  表示存储0-100.00的数</p><hr><span id="more"></span><ul><li><p><strong>查询所有数据</strong></p></li><li><p>select 属性1，属性2 from student;  </p></li><li><p><strong>查询id为？的数据</strong></p></li><li><p>select 属性1，属性2 from student where id&#x3D;?;</p></li><li><p>&#96;&#96;&#96;mysql<br>select distinct joindate as ‘入职日期’ from emp  ;   &#x2F;&#x2F;查询数据除重，对查询列起别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- **按照特定条件统计分析，如求和，求最大值**</span><br><span class="line"></span><br><span class="line">- select 聚合函数(列名) from 表名；</span><br><span class="line"></span><br><span class="line">- 聚合函数：</span><br><span class="line"></span><br><span class="line">  max,count,min,avg,sum</span><br><span class="line"></span><br><span class="line">  **注意:所有NULL值不参与聚合函数的运算**</span><br><span class="line"></span><br><span class="line">- **where后还可以加或被替换为** </span><br><span class="line"></span><br><span class="line">1. limit 从第几条显示，每页显示几条数据</span><br><span class="line"></span><br><span class="line">2. order by  排序查找  **ASC升序，DESC降序**</span><br><span class="line"></span><br><span class="line">   例:先根据mgr升序排序，如果mgr相同，再根据salary升序排序</span><br><span class="line"></span><br><span class="line">   `select * from emp where mgr is not null order by mgr Asc,salary ASC ;`</span><br><span class="line"></span><br><span class="line">3. group by 分组查找</span><br><span class="line"></span><br><span class="line">4. having 分组后条件查找</span><br><span class="line"></span><br><span class="line">5. like 模糊查找（_表示单个字符  %为任意字符）</span><br><span class="line"></span><br><span class="line">6. in(值1，值2，值3)  范围查找，表示where id = 括号内的这些值的所有数据</span><br><span class="line"></span><br><span class="line">7. ......</span><br><span class="line"></span><br><span class="line">​**Where与Having区别**</span><br><span class="line"></span><br><span class="line">1. Where分组之前过滤</span><br><span class="line">2. Having分组之后过滤</span><br><span class="line"></span><br><span class="line">​             综合示例：在emp表中计算出不同mgr的人，排除mgr为null的人（分组前过滤）</span><br><span class="line"></span><br><span class="line">​DQL语句执行顺序：</span><br><span class="line"></span><br><span class="line">1. 执行from</span><br><span class="line">2. 执行Where</span><br><span class="line">3. 执行Group by , Having</span><br><span class="line">4. 执行Select</span><br><span class="line">5. 执行order by</span><br><span class="line">6. 执行limit</span><br><span class="line"></span><br><span class="line">​             `select mgr,count(*) as &#x27;mgr中每组人数&#x27; from emp where mgr is not null group by mgr ;`</span><br><span class="line"></span><br><span class="line">- **为表添加数据**</span><br><span class="line"></span><br><span class="line">- insert into student(属性1，属性2)    values ( 值1，值2)  //插入指定字段的值</span><br><span class="line"></span><br><span class="line">  insert into student values(值1，值2)；     //插入全部字段的值</span><br><span class="line"></span><br><span class="line">- **批量插入**</span><br><span class="line">- insert into  student  values(值1，值2),(值1，值2),(值1，值2); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- **修改id位置的属性1的值**</span><br><span class="line">- update student set 属性1=值1 where id=?;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- **删除id=?的数据**</span><br><span class="line">- delete from studetn where id=?; </span><br><span class="line"></span><br><span class="line">## DCL:控制数据库的访问权限</span><br><span class="line"></span><br><span class="line">Create USER &#x27;用户名&#x27;@&#x27;主机名&#x27; identified by &#x27;密码&#x27;;</span><br><span class="line"></span><br><span class="line">**若想在任意主机上访问数据库，则主机名为%**</span><br><span class="line"></span><br><span class="line">ALTER USER &#x27;用户名&#x27;@&#x27;主机名&#x27; Identified with   mysql_native_password    by &#x27;新密码&#x27;;</span><br><span class="line"></span><br><span class="line">DROP USER &#x27;用户名&#x27;@&#x27;主机名&#x27;；</span><br><span class="line"></span><br><span class="line">## 约束</span><br><span class="line"></span><br><span class="line">主键约束 primary key</span><br><span class="line"></span><br><span class="line">非空约束 not null</span><br><span class="line"></span><br><span class="line">唯一约束 unique</span><br><span class="line"></span><br><span class="line">默认约束 default 值</span><br><span class="line"></span><br><span class="line">条件约束 CHECK</span><br><span class="line"></span><br><span class="line">外键约束 foreign  key   reference 主表（键）                 将两个表之间的数据建立连接</span><br><span class="line"></span><br><span class="line">alter table  表名  add   constraint 外键名 foreign key 从键 reference 主表(主键)</span><br><span class="line"></span><br><span class="line">#### 外键增删约束</span><br><span class="line"></span><br><span class="line">Cascade：当主表有增删操作时，会把子表对应的数据删除</span><br><span class="line"></span><br><span class="line">- ON UPDATE CASCADE</span><br><span class="line">- ON DELETE CASCADE</span><br><span class="line"></span><br><span class="line">SetNull:当主表有删除操作时，会把子表中对应的数据变为NULL</span><br><span class="line"></span><br><span class="line">## 事务</span><br><span class="line"></span><br><span class="line">一种机制，一种操作序列，包含了一组操作数据库的命令，这一组命令要么同时成功，要么同时失败</span><br><span class="line"></span><br><span class="line">BEGIN; 开启事务</span><br><span class="line"></span><br><span class="line">COMMIT; 提交事务</span><br><span class="line"></span><br><span class="line">ROLLBACK; 回滚事务</span><br><span class="line"></span><br><span class="line">事务四大特征：</span><br><span class="line"></span><br><span class="line">- 原子性：不可分割的最小操作单位，要么同时成功，要么同时失败</span><br><span class="line"></span><br><span class="line">- 一致性：事务完成时，必须使所有数据保持一致状态</span><br><span class="line"></span><br><span class="line">- 隔离性：多个事务之间，操作的可见性</span><br><span class="line"></span><br><span class="line">- 持久性：事务一但提交或回滚，对数据的影响就是永久的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```mysql</span><br><span class="line">begin;</span><br><span class="line">update account set money = money-1000 where name = &#x27;张三&#x27;;</span><br><span class="line">update account set money = money+1000 where name = &#x27;李四&#x27;;</span><br><span class="line">commit ;</span><br><span class="line">rollback ;</span><br></pre></td></tr></table></figure></li></ul><h2 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h2><ul><li>脏读：一个事务读取到另一个事务还没有提交的数据</li><li>不可重复读：一个事务先后读取到同一个数据，但读到的两个数据不同</li><li>幻读：一个事务按照条件查询时没查询到对应的数据行，但在插入数据时，这行数据又出现，好像出现了幻影</li></ul><p>解决方法：事务的隔离级别</p><ul><li>Read Uncommited  读未提交 ：所有问题都会出现</li><li>Read commited  读已提交 ：脏读不会出现</li><li>Repetable Read 默认隔离级别 ：幻读会出现</li><li>Serializable 序列化 ：所有问题都可以解决</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select @@transaction_isolation; //查看当前会话隔离级别</span><br><span class="line">set session transaction isolation level SERIALIZABLE ; //修改当前会话隔离级别</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>CONCAT(str1,str2,str3….) 字符串拼接</p><p>LOWWER(str)  字符串变成小写</p><p>UPPER(str)   字符串变成大写</p><p>LPAD(str,n,pad)  将字符串左边填充pad直到长度为n，pad自定</p><p>RPAD(str,n,pad)  将字符串右边填充pad直到长度为n，pad自定</p><p>trim(str)  去除字符串两边的空格，不会去除字符串内部的空格</p><p>subString(str,start,len)  字符串从start截取，截取len长度  <strong>注意，数据库中的下标从1开始</strong></p><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><ul><li>ceil()  向上取整</li><li>floor()   向下取整</li><li>rand()  生成0-1随机数</li><li>round(value，n)  四舍五入，参数n代表返回的数保留几位小数</li><li>mod()   取模</li></ul><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><ul><li>CURDATE();获取当前年月日 </li><li>CURTIME();获取当前时分秒</li><li>NOW();获取当前年月日，时分秒</li><li>YEAR(DATE);获取年</li><li>MONTH(DATE);获取月</li><li>DAY(DATE);获取日</li><li>DATEDIFF(DATE1,DATE2) 获取两个时间的间隔时间</li><li>DATE_ADD(DATE, INTERVAL value type) ;在指定type上加或减一个value的值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select date_add(now(),INTERVAL 70 DAY);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select ename,datediff(now(),joindate) as &#x27;EntryDays&#x27; from emp where mgr is not null order by EntryDays ASC</span><br></pre></td></tr></table></figure><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><ul><li>if(value，t，f) 如果Value为真，返回T，否则返回F</li><li>IFNULL(value1，value2)   如果value1不为null，返回value1，否则返回value2</li><li>CASE WHEN [value1] THEN[RES1] …….. ELSE[default] END  如果value1为真，返回res1，….如果都不为真，返回default</li><li>Case [expr]  when [value1] Then [res1] …… ELSE[default] END 如果expr值等于value1，返回res1，如果都不相等，返回default</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select *,if(salary &gt; 20000 ,&#x27;高薪&#x27; ,&#x27;低薪&#x27; ) from emp order by salary desc;</span><br><span class="line">//查询所有员工，如果工资高于20000则为高薪，否贼为低薪</span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p>表间关系</p><ul><li>一对多：多的那方为外键的从键</li><li>多对多：需要额外新建一个表，设置两个键，分别为另外两个表的从键</li><li>一对一：用于单表拆分，提升效率，设置外键时要设置为Unique</li></ul><p>多表查询时会出现笛卡尔积，若想消除多余的笛卡尔积，则只需要让外键关联的两个键值相等即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *  from emp,dept where emp.dept_id = dept.id;</span><br></pre></td></tr></table></figure><p>内连接：查询两个表交集条件可以为on或者where</p><ul><li>隐式内连接    Select * from 表1,表2 where</li><li>显示内连接    Select * from 表1 INNER Join 表2 where…</li></ul><p>外连接：注意条件为on</p><ul><li>左外连接:查询左表全部以及两表交集</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *  from emp  left outer join dept  on emp.dept_id = dept.id;</span><br></pre></td></tr></table></figure><ul><li>右外连接:右表全部以及两表交集</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *  from emp  right outer join dept  on emp.dept_id = dept.id;</span><br></pre></td></tr></table></figure><p>自连接：与自身连接查询，必须使用表的别名</p><ul><li><p>把一个表当成两张表，用不同的别名分别代表不同的表</p></li><li><p>查询员工的领导, 没有领导也需要查询出来</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select a.name,b.name &#x27;领导名字&#x27; from emp a left join emp b on a.manager_id = b.id;</span><br></pre></td></tr></table></figure><h2 id="联合查询-union-，union-all"><a href="#联合查询-union-，union-all" class="headerlink" title="联合查询-union ，union all"></a>联合查询-union ，union all</h2><ul><li><p>使用条件，两次查询的列数要相同</p></li><li><p>union all会将两次查询结果直接合并</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where salary&lt;5000</span><br><span class="line">union all</span><br><span class="line">select * from emp where mgr&gt;1004;</span><br></pre></td></tr></table></figure><ul><li>union会将查询后的结果合并后去重</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where salary&lt;5000</span><br><span class="line">union </span><br><span class="line">select * from emp where mgr&gt;1004;</span><br></pre></td></tr></table></figure><h2 id="嵌套查询-x2F-子查询"><a href="#嵌套查询-x2F-子查询" class="headerlink" title="嵌套查询&#x2F;子查询"></a>嵌套查询&#x2F;子查询</h2><p>Select语句中嵌套了一个Select语句，内部的select语句为嵌套查询</p><p>子查询语句要被括号包住</p><ul><li>标量子查询：内部select语句返回的是一个量</li><li>列子查询：内部的select返回的是一列数据</li><li>常用操作符：any， some， all， in， not in</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where salary &gt; all (select salary from emp where dept_id = 10);</span><br></pre></td></tr></table></figure><ul><li>行子查询；内部的select语句返回的是一行的数据</li><li>常用操作符:&#x3D; ,&lt;&gt; ,in, not in</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where (name,manager_id) = (select name,manager_id from emp where name = &#x27;张无忌&#x27;)</span><br></pre></td></tr></table></figure><ul><li>表子查询；内部的select语句返回的是一张表的数据</li><li>常用操作符 in</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where (name,manager_id) in (select name,manager_id from emp where name = &#x27;张无忌&#x27;)</span><br></pre></td></tr></table></figure><h2 id="存储引擎各自特点"><a href="#存储引擎各自特点" class="headerlink" title="存储引擎各自特点"></a>存储引擎各自特点</h2><h3 id="INNODB-默认引擎-事务，外键，行级锁"><a href="#INNODB-默认引擎-事务，外键，行级锁" class="headerlink" title="INNODB(默认引擎): 事务，外键，行级锁"></a>INNODB(默认引擎): 事务，外键，行级锁</h3><p>高可靠性，高性能，DML遵循ACID模型,支持事务；</p><p>行级锁，提高并发访问性能；</p><p>支持外键约束，保证数据的完整性和正确性</p><p>存储文件名: XXX.ibd，每一张表对应一张表空间文件</p><ul><li>一个表空间包含若干个段Segment，一个段中包含多个区Extent，一个区包含若干个页Page，一个页包含若干个行Row</li><li>一个区大小1MB ,一个页大小16KB ,一个区可以包含64个页</li></ul><h3 id="MYIsam：不支持事务，不支持外键，不支持行锁，支持表锁"><a href="#MYIsam：不支持事务，不支持外键，不支持行锁，支持表锁" class="headerlink" title="MYIsam：不支持事务，不支持外键，不支持行锁，支持表锁"></a>MYIsam：不支持事务，不支持外键，不支持行锁，支持表锁</h3><p>存储性能较快</p><p>创建文件</p><ol><li>xxx.sdi 存储表结构</li><li>xxx.myd   存储数据</li><li>xxx.myi  存储索引</li></ol><h3 id="MeMory：内存存放，支持Hash索引"><a href="#MeMory：内存存放，支持Hash索引" class="headerlink" title="MeMory：内存存放，支持Hash索引"></a>MeMory：内存存放，支持Hash索引</h3><p>读性能较快，但是断电时数据会丢失</p><p>存储文件名:xxx.sdi 存储表结构</p><h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择:"></a>存储引擎的选择:</h3><ul><li>InnoDB：如果对事务的完整性，并发性比较高，并且有很多的删改操作，少量的读，增加操作，是唯一选择</li><li>MyIsam：经常执行读操作，插入操作，有很少的更新删除操作，对事务的并发性，完整性要求也不高</li><li>Memory：大小有限制，并且无法保证安全性，只用于临时表和缓存</li></ul><h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p>连接步骤：</p><p>•给出url、username，password其中url背下来！</p><p>•使用DriveManager类来得到Connection对象！</p><p><strong>具体代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbcTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;jdx525&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取链接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(URL,USER,PASSWORD);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;update account set money = 2000 where id=1&quot;</span>;</span><br><span class="line">        <span class="comment">//执行sql对象</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> statement.executeUpdate(str); <span class="comment">//返回值为受影响的行数</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h2><p><strong>作用：注册驱动  获取数据库连接</strong></p><h2 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h2><p><strong>获取执行sql的对象，管理事务</strong></p><p>createStatement</p><p>prepareStatement（sql）  防止sql注入</p><p>prepareCall（sql）</p><p><strong>获取事务管理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    connection.setAutoCommit(<span class="literal">false</span>);   <span class="comment">//开启事务</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> statement.executeUpdate(str1); <span class="comment">//返回值为受影响的行数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> statement.executeUpdate(str2); <span class="comment">//返回值为受影响的行数</span></span><br><span class="line">    System.out.println(a);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>/<span class="number">0</span>;</span><br><span class="line">    connection.commit();    <span class="comment">//提交事务</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    connection.rollback();   <span class="comment">//事务回滚</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h2><p><strong>执行sql方法</strong></p><p><strong>返回值int        executeUpdate（str）   执行DML,DDL语句  （ 对数据的操作）</strong></p><p>**返回值resultset      executeQuery （str）   执行DQL语句  （查询数据 ）  **   </p><h2 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h2><p>结果集对象</p><p>返回值resultset      executeQuery （str）   执行DQL语句  （查询数据 ） </p><p><strong>resultset.next（）返回值为boolean，判断当前行是否有效</strong></p><p><strong>resultset.getXXX（参数）获取数据 返回值自己定义</strong></p><p><strong>参数有两种形式：1.列的编号</strong></p><p>​                               <strong>2.列对应的名称</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbcTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;jdx525&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ArrayList&lt;Account&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(str1);</span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;money&quot;</span>);</span><br><span class="line">            <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(i1,name,money);</span><br><span class="line">            list.add(account);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个Account类，将从数据库中获取的数据装入Account对象中，再将Account对象装入ArrayList，输出list</p><h2 id="prepareStatement"><a href="#prepareStatement" class="headerlink" title="prepareStatement"></a>prepareStatement</h2><p>防止SQL注入</p><p>SQL注入原理：将敏感字符进行转义</p><p><strong>预防原理：用问号做为占位符替代之前拼接字符串的操作,外部在输入特殊语句时，会将 ‘ 转义，使处理sql语句时内部会变为一个字符串，不会产生 or ‘1’ &#x3D; ‘1’语句</strong></p><p><strong>sql语句：”select * from account where user &#x3D; ? and password &#x3D; ?”;</strong></p><p><strong>prepareStatement &#x3D; connection.prepareStatement（sql语句）</strong></p><p><strong>perparedStatement.setXXX（index,value,index2,value2）;分别给问号赋值，下标从一开始</strong> </p><p><strong>XXX为数据类型，内部为具体值</strong></p><p>执行：executeQuerry（）不需要传递sql语句</p><p><strong>整体运行效率更高：</strong></p><p><strong>创建preparedStatement时，就已经将sql语句发送给服务器去检查编译，不需要执行时再检查编译</strong></p><p><strong>当两条sql语句模板相同时，只需要写一条sql语句，去更改两次占位符的值就可以，减少了发送给服务器去检查编译的次数</strong></p><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p><strong>允许资源的复用。提高运行效率，避免连接遗漏</strong></p><p><strong>内部存放多个connection</strong></p><p>标准接口：datasource</p><p>Durid基本配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">driverClassName = com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//test?useSSL=false&amp;useServePrepStmts=true</span></span><br><span class="line">username = <span class="type">root</span></span><br><span class="line"><span class="variable">password</span> <span class="operator">=</span> jdx525</span><br><span class="line">#初始化连接数</span><br><span class="line">initialSize=<span class="number">5</span></span><br><span class="line">#最大连接数</span><br><span class="line">maxActive=<span class="number">10</span></span><br><span class="line">#最大等待时间</span><br><span class="line">maxWait = <span class="number">3000</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\JDBCPractise\\src\\Druid.properties&quot;</span>));</span><br><span class="line">        <span class="comment">//创建数据池</span></span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(prop);</span><br><span class="line">        <span class="comment">//获取数据连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概使用流程</p><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>配置时一定要遵循前后顺序</p><p><a href="https://mybatis.net.cn/configuration.html">配置_MyBatis中文网</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=<span class="string">&quot;driver&quot;</span> value=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;jdbc:mysql:///mybatis&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;username&quot;</span> value= <span class="string">&quot;root&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;jdx525&quot;</span>&gt;&lt;/property&gt;</span><br></pre></td></tr></table></figure><p><strong>编写SQL映射文件，配置文件中加载对应的sql映射文件</strong>（从mybatis官网上查找对应文件语句）</p><p><strong>加载核心配置文件，获取sqlsession</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mapper代理开发"><a href="#Mapper代理开发" class="headerlink" title="Mapper代理开发"></a><strong>Mapper代理开发</strong></h2><p>四个步骤</p><ul><li>创建一个与映射文件同名的接口，并将接口与映射文件放在同一个目录下</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221107154357740.png" alt="image-20221107154357740"></p><p><strong>因为MAVEN项目要保证配置文件与执行文件分开，所以只需要在resources文件夹下创建一个与mapper接口同路径的文件夹，将映射文件放进即可，具体原理可以用maven的compile编译查看层次结构</strong></p><ul><li>设置映射文件的namespace为mapper接口全限定名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">&quot;com.jdc.mapper.userMapper&quot;</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>在mapper接口中定义方法，方法名就是映射文件中sql语句的id值，保证参数类型和返回类型一致</li><li>编译执行语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取sqlSession</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//创建UserMapper对象</span></span><br><span class="line"><span class="type">userMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(userMapper.class);</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line"><span class="type">List</span> <span class="variable">users</span> <span class="operator">=</span> userMapper.selectAll();</span><br><span class="line">System.out.println(users);</span><br></pre></td></tr></table></figure><p><strong>注意将映射文件装进同名mapper包下时，可以在mybatis映射文件中修改mapper路径，改为package扫描模式</strong></p><p><em>数据库的字段与pojo类的字段名字不一样时，数据不能自动封装，有两种方案</em>*</p><p>①对查询字段起别名，让别名与pojo类对应字段名字一样</p><p>②创建一个sql片段，将重复字段变成一个常量，类似JAVA中的一个变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;sql id=<span class="string">&quot;brand_coloum&quot;</span>&gt;  <span class="comment">//创建sql片段</span></span><br><span class="line">   brand_name as brandName , company_name as companyName</span><br><span class="line">&lt;/sql&gt;</span><br><span class="line">&lt;include refid=<span class="string">&quot;brand_coloum&quot;</span>/&gt;  <span class="comment">//使用时只需要输入这段话即可</span></span><br></pre></td></tr></table></figure><p><strong>③resultMap</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=<span class="string">&quot;brand_resultMap&quot;</span> type=<span class="string">&quot;brand&quot;</span>&gt;</span><br><span class="line">    &lt;!--id子标签用来完成主键字段的映射</span><br><span class="line">    result子标签用来完成一般字段映射--&gt;</span><br><span class="line">             &lt;!--table列名                   pojo属性名--&gt;</span><br><span class="line">    &lt;result column=<span class="string">&quot;company_name&quot;</span> property=<span class="string">&quot;companyName&quot;</span>/&gt;</span><br><span class="line">    &lt;result column=<span class="string">&quot;brand_name&quot;</span> property=<span class="string">&quot;brandName&quot;</span>/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;select1All&quot;</span> resultMap=<span class="string">&quot;brand_resultMap&quot;</span>&gt;</span><br><span class="line">    select * from tb_brand</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p><strong>注意，定义完resultMap属性后，要用resultMap属性去替换 sql语句中的返回值resultType</strong></p><h2 id="带参查询"><a href="#带参查询" class="headerlink" title="带参查询"></a>带参查询</h2><p><strong>参数占位符：</strong></p><p><strong>①#{}  编译时，会换成？，防止sql注入</strong></p><p><strong>②￥{}  编译时，会拼成 id &#x3D; int ，容易发生sql注入</strong></p><p><strong>特殊字符处理：当输入&lt;号，因xml原因，会将xml认为为标签开始括号</strong></p><p>①转义字符：将&lt;号换成&amp;lt；</p><p>②CDATA区 ：将内部看作文本  ， 写时直接输入CD然后点提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;![CDATA[</span><br><span class="line">    填入符号</span><br><span class="line">]]&gt;</span><br></pre></td></tr></table></figure><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Brand&gt; <span class="title function_">selectByMore</span><span class="params">(<span class="meta">@Param(&quot;company&quot;)</span> String company,<span class="meta">@Param(&quot;brand&quot;)</span> String brand,<span class="meta">@Param(&quot;status&quot;)</span> <span class="type">int</span> status)</span>;                      <span class="comment">//占位符大括号内名字</span></span><br></pre></td></tr></table></figure><p>多参数输入时，用@Param表明当前数据输入给哪个占位符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Brand&gt; <span class="title function_">selectByMore</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure><p>当占位符参数属于同一个对象时，可以输入一个对象，注意，占位符内的名字要与pojo类中字段的名字一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Brand&gt; <span class="title function_">selectByMore</span><span class="params">(Map map)</span>;</span><br></pre></td></tr></table></figure><p>键对应占位符中的内容，值对应要输入的内容</p><p><strong>因为使用了模糊查询，要注意输入的数据两边需要加入%</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Brand&gt; list = brandmapper.selectByMore(<span class="string">&quot;%华为%&quot;</span>,<span class="string">&quot;%华为%&quot;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="动态查询"><a href="#动态查询" class="headerlink" title="动态查询"></a>动态查询</h2><p><a href="https://mybatis.net.cn/dynamic-sql.html">动态 SQL_MyBatis中文网</a></p><p>where后的1&#x3D;1作为缓冲条件，防止起始条件没输入导致报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectByMore&quot;</span> resultMap=<span class="string">&quot;brand_resultMap&quot;</span>&gt;</span><br><span class="line">    select * from tb_brand where <span class="number">1</span>=<span class="number">1</span></span><br><span class="line">       &lt;<span class="keyword">if</span> test=<span class="string">&quot;company!=null and company !=&#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">           and company_name like #&#123;company&#125;</span><br><span class="line">       &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">       &lt;<span class="keyword">if</span> test=<span class="string">&quot;status!=null&quot;</span>&gt;</span><br><span class="line">            <span class="type">and</span> <span class="variable">status</span> <span class="operator">=</span> #&#123;status&#125;</span><br><span class="line">       &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">       &lt;<span class="keyword">if</span> test=<span class="string">&quot;brand!=null and brand != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and brand_name like #&#123;brand&#125;</span><br><span class="line">       &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectByMore&quot;</span> resultMap=<span class="string">&quot;brand_resultMap&quot;</span>&gt;</span><br><span class="line">    select * from tb_brand</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">       &lt;<span class="keyword">if</span> test=<span class="string">&quot;company!=null and company !=&#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">           and company_name like #&#123;company&#125;</span><br><span class="line">       &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">       &lt;<span class="keyword">if</span> test=<span class="string">&quot;status!=null&quot;</span>&gt;</span><br><span class="line">            <span class="type">and</span> <span class="variable">status</span> <span class="operator">=</span> #&#123;status&#125;</span><br><span class="line">       &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">       &lt;<span class="keyword">if</span> test=<span class="string">&quot;brand!=null and brand != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and brand_name like #&#123;brand&#125;</span><br><span class="line">       &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p><strong>方案二：用<where>包裹查询条件，根据用户填写条件不同实现动态查询，若只有一个参数，则会去掉对应sql语句前的</where></strong></p><p><strong>and，防止报错</strong></p><h3 id="单选择多条件动态查询"><a href="#单选择多条件动态查询" class="headerlink" title="单选择多条件动态查询"></a>单选择多条件动态查询</h3><p>从多个条件选择一个进行查询</p><p>choose（when，otherwise） 类似JAVA中的Switch Case  ，otherwise为default</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectByMore&quot;</span> resultMap=<span class="string">&quot;brand_resultMap&quot;</span>&gt;</span><br><span class="line">    select * from tb_brand where</span><br><span class="line">    &lt;choose&gt;</span><br><span class="line">        &lt;when test=<span class="string">&quot;company!=null and company !=&#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            company_name like #&#123;company&#125;</span><br><span class="line">        &lt;/when&gt;</span><br><span class="line">        &lt;when test=<span class="string">&quot;brand!=null and brand != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            brand_name like #&#123;brand&#125;</span><br><span class="line">        &lt;/when&gt;</span><br><span class="line">        &lt;when test=<span class="string">&quot;status!=null&quot;</span>&gt;</span><br><span class="line">            status = #&#123;status&#125;</span><br><span class="line">        &lt;/when&gt;</span><br><span class="line">        &lt;otherwise&gt;</span><br><span class="line">            <span class="number">1</span>=<span class="number">1</span></span><br><span class="line">        &lt;/otherwise&gt;</span><br><span class="line">    &lt;/choose&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>其中1&#x3D;1也可以去掉，用<where>去将条件包裹，防止不输入条件报错</where></p><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p>mybatis中会自动开启事务，添加时去用sqlsession.commit();去提交事务</p><p>不想开启事务，则需要在openSession中填入true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span>  sqlSessionFactory.openSession();   <span class="comment">//是否开启事务，默认开启</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Brand</span>(<span class="number">4</span>, <span class="number">100</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    brandmapper.insertIntoBrand(brand);</span><br><span class="line">    sqlSession.commit();   <span class="comment">//提交事务</span></span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    sqlSession.rollback();   <span class="comment">//回滚事务</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主键返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">                              设置为<span class="literal">true</span>                   指向id的属性名称</span><br><span class="line">&lt;insert id=<span class="string">&quot;insertIntoBrand&quot;</span> useGeneratedKeys=<span class="string">&quot;true&quot;</span> keyProperty=<span class="string">&quot;id&quot;</span>&gt;</span><br><span class="line">                                  </span><br><span class="line"> insert into <span class="title function_">tb_brand</span><span class="params">(brand_name,company_name,ordered,description,status)</span> </span><br><span class="line">                                  </span><br><span class="line">  values (#&#123;brandName&#125;,#&#123;companyName&#125;,#&#123;ordered&#125;,#&#123;description&#125;,#&#123;status&#125;)</span><br><span class="line">                                  </span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><p>修改数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=<span class="string">&quot;updateBrand&quot;</span>&gt;</span><br><span class="line">    update tb_brand</span><br><span class="line">&lt;set&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">&quot;brandName!=null&quot;</span>&gt;</span><br><span class="line">    brand_name = #&#123;brandName&#125;</span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">&quot;companyName!=null&quot;</span>&gt;</span><br><span class="line">    company_name = #&#123;companyName&#125;</span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">&quot;ordered != null&quot;</span>&gt;</span><br><span class="line">    ordered = #&#123;ordered&#125;</span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">&quot;description!=null&quot;</span>&gt;</span><br><span class="line">    description = #&#123;description&#125;</span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">&quot;status!=null and status betweend 0 and 1&quot;</span>&gt;</span><br><span class="line">    status = #&#123;status&#125;</span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line">    <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete id=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span><br><span class="line">        delete from tb_brand where  id <span class="title function_">in</span><span class="params">(         //每个id之间用逗号分隔，开始前输入括号，用）结尾</span></span><br><span class="line"><span class="params">               &lt;foreach collection=<span class="string">&quot;ids&quot;</span> item=<span class="string">&quot;id&quot;</span> separator=<span class="string">&quot;,&quot;</span> open=<span class="string">&quot;(&quot;</span> close=<span class="string">&quot;)&quot;</span>&gt; </span></span><br><span class="line"><span class="params">    //遍历送进来的数组</span></span><br><span class="line"><span class="params">                   #&#123;id&#125;</span></span><br><span class="line"><span class="params">               &lt;/foreach&gt;</span></span><br><span class="line"><span class="params">                        )</span>;</span><br><span class="line">    &lt;/delete&gt;</span><br></pre></td></tr></table></figure><p>注意 当collection内不为array时，要在方法参数中加@param指定参数传递给collection内的内容</p><h2 id="Mybatis参数传递"><a href="#Mybatis参数传递" class="headerlink" title="Mybatis参数传递"></a>Mybatis参数传递</h2><h3 id="多个参数传递，会封装进Map集合中"><a href="#多个参数传递，会封装进Map集合中" class="headerlink" title="多个参数传递，会封装进Map集合中"></a><strong>多个参数传递，会封装进Map集合中</strong></h3><p><strong>其中一个参数对应的下标为arg0，param1</strong></p><p><strong>新添加一个参数，对应参数就加一，变为arg1，param2</strong></p><p><strong>所以多个参数传递时，若没有@param指定，则会用arg0去调用</strong></p><p><strong>使用@Param注释之后，则会改变对应的arg键的名称</strong></p><p><strong>例如@Param（”name“） 下面调用时则会找#{}内是否有name，有则将值传递到sql语句中</strong></p><h3 id="单个参数"><a href="#单个参数" class="headerlink" title="单个参数"></a>单个参数</h3><p>传递类型</p><p>1.pojo类型：直接使用，注意pojo属性名一定要和参数占位符内容一致</p><p>2.Map集合：直接使用，键名要和参数占位符名称一致</p><p>3.其他类型，如int：直接使用</p><p>4.collection：会先转换成一个Map类型的数据，键为arg0，collection</p><p>5.list ：同理会转换成一个Map集合，键为arg0，collection，list</p><p>6.array：同理，键为arg0，array</p><h2 id="使用注解完成增删改查"><a href="#使用注解完成增删改查" class="headerlink" title="使用注解完成增删改查"></a>使用注解完成增删改查</h2><p>@Select 括号内写语句</p><p>@Insert   括号内写语句</p><p>@Update  括号内写语句</p><p>@Delete  括号内写语句</p><p><strong>使用注解完成简单的功能</strong></p><p><strong>复杂的功能需要用XML来完成，如动态查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from tb_user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><h1 id="JavaWeb核心"><a href="#JavaWeb核心" class="headerlink" title="JavaWeb核心"></a>JavaWeb核心</h1><h2 id="Http传输协议"><a href="#Http传输协议" class="headerlink" title="Http传输协议"></a>Http传输协议</h2><p>基于Tcp协议：面向连接，安全（三次握手）</p><p>请求响应模型：一次请求对应一次响应</p><p>无状态的协议：对于事务处理没有记忆能力，每次请求响应都是独立的</p><p>缺点：多次请求不能共享数据，JAVA使用会话技术解决不能共享数据的问题</p><p>优点：速度更快</p><h2 id="请求数据部分"><a href="#请求数据部分" class="headerlink" title="请求数据部分"></a>请求数据部分</h2><p>三部分：</p><p>请求行：get或post或….&#x2F;请求资源路径   http&#x2F;协议版本</p><p>请求头：key：value格式</p><p>请求体：Post请求的最后一部分，在请求头空一行的位置</p><p><strong>get与post区别，get的请求参数在请求行内，没有请求体，且长度有限制</strong></p><p><strong>post请求参数在请求体中</strong></p><h2 id="响应数据部分"><a href="#响应数据部分" class="headerlink" title="响应数据部分"></a>响应数据部分</h2><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221005171337632.png" alt="image-20221005171337632"></p><p>响应行：HTTP&#x2F;1.1 表示协议及版本号  . 200表示状态码  ，OK状态码描述</p><p>响应头: KEY : VALUE格式</p><p>响应体：存放响应数据</p><h2 id="状态码大类"><a href="#状态码大类" class="headerlink" title="状态码大类"></a>状态码大类</h2><table><thead><tr><th>状态码分类</th><th>说明</th></tr></thead><tbody><tr><td>1xx</td><td><strong>响应中</strong>——临时状态码，表示请求已经接受，告诉客户端应该继续请求或者如果它已经完成则忽略它</td></tr><tr><td>2xx</td><td><strong>成功</strong>——表示请求已经被成功接收，处理已完成</td></tr><tr><td>3xx</td><td><strong>重定向</strong>——重定向到其它地方：它让客户端再发起一个请求以完成整个处理。</td></tr><tr><td>4xx</td><td><strong>客户端错误</strong>——处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等</td></tr><tr><td>5xx</td><td><strong>服务器端错误</strong>——处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</td></tr></tbody></table><p>状态码大全：<a href="https://cloud.tencent.com/developer/chapter/13553">https://cloud.tencent.com/developer/chapter/13553</a> </p><h2 id="常见的响应状态码"><a href="#常见的响应状态码" class="headerlink" title="常见的响应状态码"></a>常见的响应状态码</h2><table><thead><tr><th>状态码</th><th>英文描述</th><th>解释</th></tr></thead><tbody><tr><td>200</td><td><strong><code>OK</code></strong></td><td>客户端请求成功，即<strong>处理成功</strong>，这是我们最想看到的状态码</td></tr><tr><td>302</td><td><strong><code>Found</code></strong></td><td>指示所请求的资源已移动到由<code>Location</code>响应头给定的 URL，浏览器会自动重新访问到这个页面</td></tr><tr><td>304</td><td><strong><code>Not Modified</code></strong></td><td>告诉客户端，你请求的资源至上次取得后，服务端并未更改，你直接用你本地缓存吧。隐式重定向</td></tr><tr><td>400</td><td><strong><code>Bad Request</code></strong></td><td>客户端请求有<strong>语法错误</strong>，不能被服务器所理解</td></tr><tr><td>403</td><td><strong><code>Forbidden</code></strong></td><td>服务器收到请求，但是<strong>拒绝提供服务</strong>，比如：没有权限访问相关资源</td></tr><tr><td>404</td><td><strong><code>Not Found</code></strong></td><td><strong>请求资源不存在</strong>，一般是URL输入有误，或者网站资源被删除了</td></tr><tr><td>428</td><td><strong><code>Precondition Required</code></strong></td><td><strong>服务器要求有条件的请求</strong>，告诉客户端要想访问该资源，必须携带特定的请求头</td></tr><tr><td>429</td><td><strong><code>Too Many Requests</code></strong></td><td><strong>太多请求</strong>，可以限制客户端请求某个资源的数量，配合 Retry-After(多长时间后可以请求)响应头一起使用</td></tr><tr><td>431</td><td><strong><code> Request Header Fields Too Large</code></strong></td><td><strong>请求头太大</strong>，服务器不愿意处理请求，因为它的头部字段太大。请求可以在减少请求头域的大小后重新提交。</td></tr><tr><td>405</td><td><strong><code>Method Not Allowed</code></strong></td><td>请求方式有误，比如应该用GET请求方式的资源，用了POST</td></tr><tr><td>500</td><td><strong><code>Internal Server Error</code></strong></td><td><strong>服务器发生不可预期的错误</strong>。服务器出异常了，赶紧看日志去吧</td></tr><tr><td>503</td><td><strong><code>Service Unavailable</code></strong></td><td><strong>服务器尚未准备好处理请求</strong>，服务器刚刚启动，还未初始化好</td></tr><tr><td>511</td><td><strong><code>Network Authentication Required</code></strong></td><td><strong>客户端需要进行身份验证才能获得网络访问权限</strong></td></tr></tbody></table><h1 id="Mysql进阶"><a href="#Mysql进阶" class="headerlink" title="Mysql进阶"></a>Mysql进阶</h1><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>是帮助Mysql高效获取数据的数据结构（有序）</p><ul><li>B+Tree索引</li><li>Hash索引 只能进行精确匹配 ，仅能在memory引擎下使用</li><li>B-tree 空间索引，仅在MyIsam下使用</li><li>Full-text全文索引，Memory下不支持</li></ul><p>二叉树缺点：顺序存储时，结构会退化成链表，效率低，数据多时，层级较深，效率也比较低</p><h2 id="B-Tree：多路平衡查找树"><a href="#B-Tree：多路平衡查找树" class="headerlink" title="B-Tree：多路平衡查找树"></a>B-Tree：多路平衡查找树</h2><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221018153850695.png" alt="image-20221018153850695"></p><p>当数据小于20时走最左边的指针，数据在20-30中间时走第二个指针，再30-62中间走中间的指针，以此类推，当有N个Key时，有N+1个指针，Key下挂着具体的数据</p><p>构建B树顺序</p><ul><li>假设最大度数为5时，前四个数据会按序放到第一个结点中，当第五个数据加入后，中间的数据会向上发生裂变，将两边的数据变为左右子树</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221018154731328.png" alt="image-20221018154731328"></p><ul><li>第六个数据加入后，若比中间的数据大，则添加到右子树当中，反之则添加到左子树当中</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221018154744388.png" alt="image-20221018154744388"></p><ul><li>继续添加后，当任意左右子树有4个key后，再向其添加数据，则仍会发生裂变，子树中间的数据向上发生裂变，到父节点中，原子树变成父节点的两个子树</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221018154711360.png" alt="image-20221018154711360"></p><ul><li>当演化到如下情况后</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221018154905540.png" alt="image-20221018154905540"></p><ul><li>父节点饱和，含4个key，此时子树若进行向上分裂，父节点也变成5个key，此时父节点继续向上分裂，结果如下</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221018155059348.png" alt="image-20221018155059348"></p><h2 id="B-Tree：B树变种"><a href="#B-Tree：B树变种" class="headerlink" title="B+Tree：B树变种"></a>B+Tree：B树变种</h2><p>区别:所有的元素都会出现在叶子节点中，非叶子节点起到索引作用，而B树元素存放在每一个结点中</p><p>存储演变</p><ul><li>大致过程与B树一样，但在向上分裂时，向上分裂的元素会保留在叶子节点中，叶子节点形成一个单向链表</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221018155535596.png" alt="image-20221018155535596"></p><ul><li>继续添加元素，若左右子树发生向上分裂，同样，如下图</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221018155644838.png" alt="image-20221018155644838"></p><p>在Mysql中，在相邻的叶子节点中增加了一个链表指针，形成了一个带有顺序指针的B+Tree</p><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221018155828803.png" alt="image-20221018155828803"></p><h2 id="Hash索引"><a href="#Hash索引" class="headerlink" title="Hash索引"></a>Hash索引</h2><p>采用一定的Hash算法，将键算出对应的hash值，映射到对应的槽位上，然后存储在hash表中，查找效率高，不发生hash碰撞的情况下，通常只需要一次索引就够了</p><p><strong>在InnoDB中，有自适应hash功能，根据我们的查询条件，会自动将B+树构建为Hash索引</strong></p><h2 id="为什么使用B-树"><a href="#为什么使用B-树" class="headerlink" title="为什么使用B+树"></a>为什么使用B+树</h2><p>相较于二叉树，在顺序存储时二叉树会退化成链表结构，存储效率比较低，在大量存储数据时，红黑树层级会高，存储效率也比较低，相较于B树，一个页中既存放KEY,指针，又存放数据，导致同一个结点中能存放的key和指针比较少，而B+树所有数据存放在叶子结点中，非叶子节点作为索引使用，所以一个结点能存放的key和指针相对来说比较多，层级会更少，并且B+树形成了一个链表，便于范围搜索和排序，相较于HASH索引，只支持精确匹配，不支持范围匹配与排序操作</p><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><ul><li>主键索引 PRIMARY，只能有一个</li><li>唯一索引 UNIQUE</li><li>常规索引</li><li>全文索引 FULLTEXT,查找文中的关键字</li></ul><p>在InnoDB中，根据索引的存储形式，又可分为以下两种</p><ul><li>聚集索引：将数据存储与索引放到了一起，索引结构的叶子节点是行数据</li><li>二级索引：数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221018183237138.png" alt="image-20221018183237138"></p><p>聚集索引必须有，且只有一个</p><p>聚集索引选取规则</p><ul><li>如果有主键，主键则为聚集索引</li><li>如果没有主键，则唯一索引为聚集索引</li><li>如果都没有，则会自动生成一个rollid作为隐藏的聚集索引</li></ul><p>回表索引步骤：</p><ul><li>例如Select * from user where name &#x3D; ‘kit’;</li><li>会先通过二级索引找到对应的主键id值</li><li>找到主键id值后再通过聚集索引找到对应的行数据</li></ul><p>当条件为id &#x3D; ？时，会比 name &#x3D; ？效率更高，因为id字段查找可以直接走聚集索引，不需要走二级索引找到其对应的id</p><h2 id="索引相关语句"><a href="#索引相关语句" class="headerlink" title="索引相关语句"></a>索引相关语句</h2><p>创建索引语句：CREATE [Unique&#x2F;FullText] INDEX index_name ON table_name(table_col_name1,……)</p><p><strong>当内部列名语句为多个时创建的是联合索引</strong></p><p>查看当前表索引：SHOW INDEX FROM table_name;</p><p>删除索引：DROP INDEX index_name ON table_name</p><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><ul><li>查看执行语句频次</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global status like &#x27;com_______&#x27;</span><br></pre></td></tr></table></figure><ul><li>慢查询日志</li><li>show variables like ‘slow_query_log’;查看慢查询是否开启</li></ul><p>​       在&#x2F;etc&#x2F;my.cnf中新增如下语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#慢查询日志</span><br><span class="line">slow_query_log = 1  //打开慢查询日志</span><br><span class="line"></span><br><span class="line">long_query_time = 2  //设置慢查询时间上限，即超过几秒为慢查询</span><br></pre></td></tr></table></figure><p>​      <strong>在&#x2F;var&#x2F;lib&#x2F;mysql文件夹下的localhost_slow文件中查看慢查询语句</strong></p><p>​      <strong>tail -f localhost_slow.log查看慢查询文件尾部实时输出的内容</strong></p><ul><li>ShowProfiles</li><li>帮我们了解时间都消耗到哪里去了，通过have_profiling参数能看到当前mysql是否支持showProfiles</li></ul><p>​默认是关闭的，所以需要set profiling &#x3D; 1;去打开</p><ul><li>查看语句show profilies;</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221019163125919.png" alt="image-20221019163125919"></p><ul><li>查看具体语句执行阶段消耗时间 show profile for query query_id;</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221019163315971.png" alt="image-20221019163315971"></p><ul><li><strong>explain执行计划(重要)</strong></li><li>可以获取具体sql语句的连接情况和连接信息，是否应用了索引</li><li>语法：在任意select语句之前加入explain</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221019165505924.png" alt="image-20221019165505924"></p><ul><li>id表示sql语句表的执行顺序，id值相同表示从上到下执行，id值不同越大的先执行</li><li>selectType表示查询的类型</li><li><strong>type表示访问的类型由好到坏依次是NULL , system , const , eq_ref , ref,  range , index , all也是主要需要优化的东西</strong></li><li><strong>一般不可能优化为NULL，因为NULL的条件是查询时不使用任何表，System一般访问系统表才会出现，根据主键或者唯一索引一般会出现const（聚集索引），ref表示使用非唯一性的索引进行查询，all表示全表扫描，index表示用了索引但对索引进行了遍历</strong></li><li><strong>possible_keys：表示可能用到的索引</strong></li><li><strong>key表示实际用到的索引</strong></li><li><strong>key_len使用到的索引的字节数</strong></li><li>rows表示必须要执行查询的行数</li><li><strong>filtered表示返回结果的行数占需要读取行数的百分比，越高越好</strong></li><li>extra其他没有展示的信息在这里展示</li></ul><h2 id="索引使用原则"><a href="#索引使用原则" class="headerlink" title="索引使用原则"></a>索引使用原则</h2><ul><li>最左前缀法则</li></ul><p>针对于联合索引，查询时需要从索引最左边的列开始，并且不跳过最左边的列，如果跳跃某一列，则会使这一列后面的索引失效，索引最左边的字段必须存在</p><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221019181020343.png" alt="image-20221019181020343"></p><p>当最左边profession条件没有出现时，就不会使用这个联合索引，因为没有遵循最左前缀法则</p><ul><li>范围查询</li></ul><p>在联合索引中，出现范围（&lt;,&gt;）查询，则出现范围查询的列的右侧索引失效,注意可以使用大于等于或小于等于</p><ul><li>索引失效情况1</li><li>当对索引字段进行函数运算，对应索引会失效</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221019182419349.png" alt="image-20221019182419349"></p><ul><li>失效情况2</li><li>如果索引字段为varchar类型查询时没有加单引号则索引失效</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221019183132630.png" alt="image-20221019183132630"></p><ul><li>失效情况3</li><li>如果模糊匹配时，仅仅是尾部模糊匹配  ‘软件%’ 不会失效，头部模糊匹配  ‘%15’  会失效</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221019183046987.png" alt="image-20221019183046987"></p><ul><li>失效情况3</li><li>如果用or分割的条件，两侧都有索引时才会生效，否则都不会生效</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221019183610472.png" alt="image-20221019183610472"></p><ul><li>失效情况4</li><li>如果在执行sql语句时，mysql评估使用索引比走全表扫描还慢，则会走全表扫描</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221019183917703.png" alt="image-20221019183917703"></p><p>因为这张表绝大数据都满足这个条件，所以会走全表扫描，此时索引就会失效</p><ul><li>sql提示</li><li>当联合索引与单列索引都重复指定了一个字段时，需要自定一个sql提示去指定查询该字段时使用那个索引</li><li>具体语法以及使用效果</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221019185325986.png" alt="image-20221019185325986"></p><ul><li>其中Use 使用某个索引， ingore不要使用某个索引，force必须使用某个索引，其中use可能也不会使用该索引，仅仅是建议</li></ul><h2 id="覆盖索引和回表查询"><a href="#覆盖索引和回表查询" class="headerlink" title="覆盖索引和回表查询"></a>覆盖索引和回表查询</h2><p>覆盖索引指，当需要查询的数据都能在索引中找到，尽量使用覆盖索引，减少使用select *语句</p><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221019192601260.png" alt="image-20221019192601260"></p><p>注意两个语句查询的内容以及表中的extra</p><p>当使用了覆盖查询时效率会高，因为不需要使用回表查询，查询的数据在索引中就能找到</p><h2 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h2><p>当字段类型为字符串时，有时候需要索引很长的字符串，这就会导致字符串的索引很大，查询时，浪费大量磁盘的IO,影响查询效率。此时可以将字符串的一部分前缀建立成索引，可以节省索引的空间，提高效率</p><ul><li>CREATE INDEX index_name ON table_name(colunm_name(n));</li></ul><p>索引的长度n由选择性决定，即不重复的值在所有值中占的比重，越大越好，如唯一索引的选择性即为1</p><p>计算索引的选择性语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(distinct substring(email,1,10))/count(*) from tb_user;</span><br></pre></td></tr></table></figure><p>可以不断改变截取的长度，根据需求觉得是取选择性高的还是在保证选择性的前提下尽可能空间小</p><h2 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h2><ol><li>数据量比较大的表</li><li>查询比较频繁的表</li><li>针对常作于查询条件，即经常出现在where，orderby，groupby的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引效率越高</li><li>如果是字符串类型的字段，且字符串长度很长，可以考虑前缀索引</li><li>尽量使用联合索引，减少使用单列索引，注意最左前缀法则</li><li>要控制索引的数量，索引的数量越多，增删改的效率越低，并且维护索引的代价也会增大</li><li>如果索引列不能存储null值，建表时请用not null约束字段，当优化器知道每列是否包含null值时，可以更好的确定哪个索引最有效的用于查询</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>当多信息查询时，推荐建立一个联合索引，移除回表查询步骤，提高效率，当有单列索引干扰时，要使用use指定语句使用哪个索引</li></ul><h2 id="SQL其他语句优化"><a href="#SQL其他语句优化" class="headerlink" title="SQL其他语句优化"></a>SQL其他语句优化</h2><h3 id="Insert优化"><a href="#Insert优化" class="headerlink" title="Insert优化"></a>Insert优化</h3><ol><li>大量数据插入，建议使用批量插入</li><li>建议使用手动事务提交，避免频繁开关事务，性能降低</li><li>主键顺序插入性能高于乱序插入</li></ol><p>大批量数据插入建议使用load指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p --local-infile;  //表示当前客户端连接服务器时需要加载本地文件</span><br><span class="line">set global local_infile = 1; //设置允许本地文件读取</span><br><span class="line">load data local infile &#x27;文件名&#x27; into table 表名 fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure><h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><ul><li>数据组织方式</li></ul><p>在InnoDB引擎中，表数据都是根据表的<strong>主键顺序</strong>组织存放的，这种存储方式被称为索引组织表</p><ul><li>插入数据的流程</li></ul><p>页可以为空，也可以填充一半，也可以填充百分之百。每个页包含了2-N个数据（如果某一行数据过大，会行溢出），根据主键排列；</p><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221020172541968.png" alt="image-20221020172541968"></p><p>当主键乱序插入时，会发生页分裂</p><ul><li>当数据50插入时，应插在47后，但1号数据页已满，则会开辟一个新的3号数据页，将一号数据页的百分之50放到3号数据页中，将50存入3号数据页，再将1号数据页的链表指针指向3号，与3号形成双向链表，3号再指向2号</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221020172915664.png" alt="image-20221020172915664"></p><ul><li>页合并</li></ul><p>当对数据进行删除，该数据实际上并没有在页中被删除，只是被标识为被删除，并将它的空间声明允许被其他数据使用，</p><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221020173131277.png" alt="image-20221020173131277"></p><p>当一页记录被删除了百分之50后，InnoDB会自动寻找靠近的页是否有合并的可能性，以优化空间使用</p><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221020173252720.png" alt="image-20221020173252720"></p><p>MERGE_THRESHOLD:为默认页合并阈值，可以自行设置</p><ul><li>主键设计原则</li></ul><ol><li>尽量降低主键长度，当主键长度过长时，会使二级索引占用大量空间，浪费磁盘IO</li><li>插入数据时尽量主键顺序插入，选择使用AUTO_INCREMENT自增主键</li><li>尽量不要使用UUID做主键或者其他自然主键，如身份证号</li><li>业务操作时，避免对主键的修改</li></ol><h3 id="OrderBy优化"><a href="#OrderBy优化" class="headerlink" title="OrderBy优化"></a>OrderBy优化</h3><ol><li>Using FileSort：通过索引或者全表扫描读取到的数据，被放到排序缓冲区中，经过排序缓冲区排序后在输出，所有不是由索引直接返回排序的结果都叫 Using FileSort</li><li>Using Index：通过有序索引直接返回有序数据，这种叫做 Using Index，不需要额外排序，操作效率高</li></ol><ul><li><p>尽量给需要用OrderBy排序的字段建立一个索引，提高效率</p></li><li><p>当使用orderBy操作的字段违背了最左前缀法则，也会出现FileSort，效率低</p></li><li><p>创建索引时默认是升序排序，当排序的两个字段一个为升序，一个为降序，仍会出现FileSort，效率较低，若需要这种校验规则，<strong>则需要创建索引时指定字段的排序规则</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index idx_user_phone_age_ad on tb_user(phone asc,age desc );</span><br></pre></td></tr></table></figure><ul><li><strong>注意，所有OrderBy优化条件的前提是使用了覆盖索引，否则就会一直使用FileSort</strong></li><li>如果不可避免的出现FileSort，再大数据量排序时，可以将排序缓冲区(sort_buffer_size)的大小扩大(默认256K)，否则Mysql会在磁盘中进行排序，效率低</li></ul><h3 id="GroupBy优化"><a href="#GroupBy优化" class="headerlink" title="GroupBy优化"></a>GroupBy优化</h3><p>整体与其他大致相同，也要满足最左前缀法则</p><p><strong>但当where后出现了最左前缀，GroupBy后出现了另外的字段，则也满足最左前缀法则</strong></p><h3 id="Limit优化"><a href="#Limit优化" class="headerlink" title="Limit优化"></a>Limit优化</h3><p>越往后效率越低，当查到第5000多页后效率明显低下</p><p>优化方法：覆盖索引+子查询的方式</p><p>先分页查询查询对应的ID(覆盖查询)</p><p>将查到的对应ID的表作为查询的表条件，再消除笛卡尔积(子查询)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_sku s ,(select id from tb_sku limit 900000,10) a where s.id = a.id;</span><br></pre></td></tr></table></figure><h3 id="Count优化"><a href="#Count优化" class="headerlink" title="Count优化"></a>Count优化</h3><ul><li>MyISAM把一个表的总行数放到了磁盘中，count的时候会直接返回这个数，效率很高</li><li>InnoDB则需要把数据一行一行的从磁盘里取出来计数</li></ul><p>优化思路，自己计数</p><p>当我们执行插入数据时，把计数加一，删除数据时再减一，自己去维护这个计数</p><ul><li><p>Count的几种用法</p></li><li><p>count(*) 效率最高</p></li></ul><p>不取值，服务层直接按行累加（专门做过优化）</p><ul><li>count(主键) 效率中等</li></ul><p>遍历每一张表，把每一行的主键id值提取出来，返回给服务层，服务层拿到主键后进行累加</p><ul><li>count(字段)  ：只要count的数据不是NULL，就加一，效率最差</li></ul><p>有Not Null约束：遍历表，把每一行的字段值提取出来，返回给服务层，服务层拿到值后累加</p><p>没有Not NULL约束：同上，但会判断是否为Null，为Null则不累加</p><ul><li>count(1)：所查询的每一条记录都会放一个1进去，然后在后端进行累加，与count*差不多</li></ul><p>遍历整张表，不取值，服务层对于返回的每一行都会放一个1进去，然后进行累加</p><h3 id="Update优化"><a href="#Update优化" class="headerlink" title="Update优化"></a>Update优化</h3><p>避免行锁升级为表锁</p><p>一定要对where后面的字段建立索引，否则行锁会升级为表锁，阻止事物的并发</p><p>InnoDB中行锁是针对索引加的锁，不是针对记录加的锁，一定要保证索引不能失效，否则行锁会升级成表锁</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>创建语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create or replace view stu_v1 as select id,name from student where id&lt;=20 with cascaded check option;</span><br><span class="line">创建一个视图，以....select语句为表，with cascaded check option表示若增删改的数据不符合创建视图的select语句的范围，则会报错，因为插入数据后视图看不到该数据</span><br></pre></td></tr></table></figure><ul><li>删除视图</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Drop view 视图名称1,视图名称2....</span><br></pre></td></tr></table></figure><ul><li>修改视图与创建视图语法相同</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create or replace view stu_v1 as select id,name from student where id&lt;=10 with cascaded check option; </span><br></pre></td></tr></table></figure><ul><li><p>增删改查语法与表相同，视图可以看作一个虚拟的表</p></li><li><p>进行增删改时，也会在原表上进行增删改</p></li><li><p>当根据一个视图创建另一个子视图时，加上with cascaded check option ,会检查当前视图是否满足父视图的要求，并且会默认为父视图加上with cascaded check option级联关键字</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create or replace view stu_v2 as select id,name from stu_v1 where id &gt;= 10 with cascaded check option ;</span><br><span class="line">insert into stu_v2 values (7,&#x27;Tom&#x27;);</span><br><span class="line">insert into stu_v2 values (26,&#x27;Tom&#x27;);</span><br></pre></td></tr></table></figure><p>两条插入语句都会失败，虽然26大于10，但是26小于父表的20，所以不行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create or replace view stu_v3 as select id,name from stu_v2 where id &lt;= 15;</span><br><span class="line">insert into stu_v3 values (17,&#x27;Tom&#x27;);//可以插入</span><br><span class="line">insert into stu_v3 values (28,&#x27;Tom&#x27;);//报错</span><br></pre></td></tr></table></figure><ul><li><p>插入17时，因为V3没有加check option，所以不会检查v3视图，继续向上检查v2视图，满足条件，向上检查v1视图满足条件，可以插入</p></li><li><p>插入28时，同理，但不满足v1的条件，所以插入失败</p></li><li><p>with local check option 会对当前视图进行校验，<strong>在看他的依赖视图是否有检查选项，如果没有检查选项则不检查(与cascaded关键字的不同点)</strong></p></li></ul><p><strong>要使视图可更新，必须使视图的行与基础表的行为一对一的关系</strong></p><ul><li>视图的作用</li></ul><ol><li>操作简单，简化用户对于数据的理解</li><li>安全。数据库可以授权，但不能授权到特定的行或者列上。通过视图用户可以只查询和更改某些特定数据</li><li>数据独立。视图可以帮助用户屏蔽真实表结构带来的变化，若表的列名变化，只需要修改创建视图的语句即可</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create or replace view stu_v1 as select student.id,student.name,student.no,course.name as &#x27;课程名称&#x27; from student,course,student_course where student.id = student_course.studentid and course.id = student_course.courseid with cascaded check option;</span><br><span class="line"></span><br><span class="line">select * from stu_v1 where name = &#x27;黛绮丝&#x27;;</span><br></pre></td></tr></table></figure><p>通过视图简化多表查询作用以及屏蔽隐私字段</p><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>指事先经过编译，存储在数据库的一段sql指令集合，减少数据在数据库和应用服务器之间的传输，可以减少网络交互，提升效率</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create procedure p1() //创建过程</span><br><span class="line">begin</span><br><span class="line">    select count(*) from student;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">call p1();  //调用过程</span><br><span class="line"></span><br><span class="line">select * from information_schema.ROUTINES where ROUTINE_SCHEMA = &#x27;MysqlHigh&#x27;;//查看当前表中所有过程</span><br><span class="line"></span><br><span class="line">show create procedure p1; //查看p1的创建语法</span><br><span class="line"></span><br><span class="line">drop procedure p1;  //删除p1集合</span><br></pre></td></tr></table></figure><p>注意在命令行中执行，会认为p1方法体内的分号为结束符号，创建会报错，要自定义一个结束符号</p><p>delimiter  $$;</p><p>表示设置$$为结束命令符</p><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221021124019005.png" alt="image-20221021124019005"></p><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><p>是系统提供的，不是用户定义的，属于服务器层面，分为全局变量global和会话变量session</p><ul><li>全局变量：全局都有效</li><li>会话变量：仅在当前会话有效</li></ul><p>具体语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &#x27;Auto%&#x27;; //查看系统变量利用模糊匹配</span><br><span class="line"></span><br><span class="line">show global variables like &#x27;local_infile&#x27;; </span><br><span class="line"></span><br><span class="line">select @@local_infile; //根据准确系统变量名查看对应的值 select @@global/session.local_inifile</span><br><span class="line"></span><br><span class="line">set @@session/global.local_infile = 1;  //设置对应系统变量的值</span><br><span class="line"></span><br><span class="line">set session/global local_infile = 1 ;</span><br></pre></td></tr></table></figure><p>设置系统变量后，将mysql服务器重启，对应系统变量还是会重置成默认值</p><h3 id="用户自定义变量"><a href="#用户自定义变量" class="headerlink" title="用户自定义变量"></a>用户自定义变量</h3><p>用户变量不需要提前声明，设置时直接@变量名设置就可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set @My_Name = &#x27;MysqlHigh&#x27;;</span><br><span class="line"></span><br><span class="line">set @My_Age := &#x27;myage&#x27;;</span><br><span class="line"></span><br><span class="line">select @My_Gender := &#x27;男&#x27; ,@MyHobby := &#x27;Java&#x27;;</span><br><span class="line"></span><br><span class="line">select count(*) into @My_Count from student ; 将指定语句的查询结果赋值给变量</span><br><span class="line"></span><br><span class="line">select @My_Count;  查看对应变量</span><br></pre></td></tr></table></figure><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>需要提前声明，范围在其声明的 begin 和 end块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create procedure p2()</span><br><span class="line">begin</span><br><span class="line">    declare stu_count int default 0; //声明变量</span><br><span class="line"></span><br><span class="line">    set stu_count := 100; //赋值方法1</span><br><span class="line"></span><br><span class="line">    select count(*) into stu_count from student; //赋值方法2</span><br><span class="line"></span><br><span class="line">    select stu_count;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h3 id="存储过程的参数"><a href="#存储过程的参数" class="headerlink" title="存储过程的参数"></a>存储过程的参数</h3><p>（IN  , OUT , INOUT）</p><ul><li>IN代表输入参数，默认为in类型参数</li><li>OUT代表输出参数</li><li>INOUT表示当前传入的参数既可以当作输入参数，又可以当做输出参数</li><li>声明方法 :  <strong>IN&#x2F;OUT&#x2F;INOUT  变量名  变量类型</strong></li></ul><h3 id="If基本语法"><a href="#If基本语法" class="headerlink" title="If基本语法"></a>If基本语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">create procedure p3(In score int,OUT result varchar(5))</span><br><span class="line">begin</span><br><span class="line">    if Score &gt;= 85 then set   //开启if判断</span><br><span class="line">        Result := &#x27;优秀&#x27;;</span><br><span class="line">    elseif Score &gt;=60 and Score &lt;85 then set</span><br><span class="line">        Result := &#x27;及格&#x27;;</span><br><span class="line">    elseif Score &lt;60 then set</span><br><span class="line">        Result := &#x27;不及格&#x27;;</span><br><span class="line">    end if;                  //关闭if判断</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">call p3(85,@result);    //调用方法，将返回值赋给@result</span><br><span class="line">SELECT @result;  //输出自定义变量@result</span><br></pre></td></tr></table></figure><h3 id="Case语法"><a href="#Case语法" class="headerlink" title="Case语法"></a>Case语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create procedure p4(IN SESSION INT,OUT RESULT VARCHAR(5))</span><br><span class="line">BEGIN </span><br><span class="line">    case   //开启case</span><br><span class="line">        when SESSION&gt;=1 and SESSION &lt;=3 then set RESULT = &#x27;春天&#x27;;</span><br><span class="line">        when SESSION&gt;=4 and SESSION &lt;=6 then set RESULT = &#x27;夏天&#x27;;</span><br><span class="line">        when SESSION&gt;=7 and SESSION &lt;=9 then set RESULT = &#x27;秋天&#x27;;</span><br><span class="line">        when SESSION&gt;=10 and SESSION &lt;=12 then set RESULT = &#x27;冬天&#x27;;</span><br><span class="line">        ELSE SET RESULT = &#x27;月份有误&#x27;;</span><br><span class="line">        end case ;  //结束case</span><br><span class="line">end;</span><br><span class="line">call p4(10,@RESULT);</span><br><span class="line">select @RESULT;</span><br></pre></td></tr></table></figure><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><ul><li>WHILE循环：有条件的循环控制语句</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create procedure p5(in n int)</span><br><span class="line">begin</span><br><span class="line">    declare m int default 1;</span><br><span class="line">    while n do            //n不为0时继续循环</span><br><span class="line">        set m := m+m+1;</span><br><span class="line">        set n := n-1;</span><br><span class="line">        end while;</span><br><span class="line">    select m,n;</span><br><span class="line">end;</span><br><span class="line">call p5 (10);</span><br></pre></td></tr></table></figure><ul><li>Repeat循环：先执行一次再判断，类比DO WHILE</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create procedure p6(in n int)</span><br><span class="line">begin</span><br><span class="line">    declare m int default 1;</span><br><span class="line">    repeat</span><br><span class="line">        set m := m + m + 1;</span><br><span class="line">        set n := n-1;</span><br><span class="line">    until n = 0 end repeat;</span><br><span class="line">    select m;</span><br><span class="line">end;</span><br><span class="line">call p6(10);</span><br></pre></td></tr></table></figure><ul><li>loop循环</li></ul><ol><li>Leave  循环标签 ：配合循环使用，表明退出哪个循环</li><li>Iterate  循环标签 ：表示跳过当前循环剩下的语句，继续下一次循环</li></ol><p>不加任何退出循环条件，可以实现简单的死循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">create procedure p7(in n int)</span><br><span class="line">begin</span><br><span class="line">    declare m int default 1;</span><br><span class="line">    lable1 :loop   //为loop设置循环标签为lable1</span><br><span class="line">        set m := m+m+1;</span><br><span class="line">        set n := n-1;</span><br><span class="line">        if n = 0 then leave lable1 ;</span><br><span class="line">        end if;</span><br><span class="line">    end loop lable1;</span><br><span class="line">    select m;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">call p7(10);</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">create procedure p8(in n int)</span><br><span class="line">begin</span><br><span class="line">    declare m int default 0;</span><br><span class="line">    lable2 : loop</span><br><span class="line">        if n%2=1 then</span><br><span class="line">            set n = n-1;</span><br><span class="line">            iterate lable2;   //跳过lable2循环</span><br><span class="line">        end if;</span><br><span class="line">        set m := m + n;</span><br><span class="line">        set n = n - 1;</span><br><span class="line">        if n &lt;= 0 then leave lable2;</span><br><span class="line">        end if;</span><br><span class="line">    end loop lable2;</span><br><span class="line">    select m;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">call p8(10);</span><br></pre></td></tr></table></figure><h3 id="游标cursor"><a href="#游标cursor" class="headerlink" title="游标cursor"></a>游标cursor</h3><p>解决再存储过程中自定义变量只能存储一些int，varchar类型的问题，用来存储表</p><p>游标的使用包括</p><ol><li>游标的声明</li><li>游标的开启</li><li>游标对数据的获取</li><li>游标的关闭</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">create procedure p9(in uage int)</span><br><span class="line">begin</span><br><span class="line">    declare u_name varchar(10);</span><br><span class="line">    declare u_pro varchar(10);</span><br><span class="line">    declare table1 cursor for select name,profession from tb_user1 where age &lt; uage; </span><br><span class="line">    //游标一定要声明再局部变量之后</span><br><span class="line">    declare EXIT handler for SQLSTATE &#x27;02000&#x27; close table1; //条件处理程序</span><br><span class="line">    create table tb_user_pro(</span><br><span class="line">        id int primary key auto_increment ,</span><br><span class="line">        name varchar(10) ,</span><br><span class="line">        profession varchar(10)</span><br><span class="line">    );</span><br><span class="line">    open table1;   //打开游标</span><br><span class="line">    while true do</span><br><span class="line">        fetch table1 into u_name,u_pro;</span><br><span class="line">        insert into tb_user_pro(name , profession) values (u_name,u_pro);</span><br><span class="line">end while;</span><br><span class="line">end;</span><br><span class="line">call p9(40);</span><br></pre></td></tr></table></figure><p>条件处理程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare EXIT handler for SQLSTATE &#x27;02000&#x27; close table1;</span><br></pre></td></tr></table></figure><ul><li>负责解决再流程处理条件中遇到的问题</li><li>例子中EXIT为当捕捉到02000错误码时执行退出循环，并close table1，可以被更换为CONTINUE</li><li>后面的SQLSTATE表示要捕捉的状态码</li><li>可以换成</li><li>NOT FOUND  表示任何以02开头的状态码</li><li>SQL WARING  表示任何以01开头的状态码</li><li>SQLSTATE state_value :表示状态码等于后面的值  </li><li>SQLEXCEPTION ：任何除了01，02开头的状态码</li></ul><h3 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h3><p>存储函数是有返回值的函数，形参只能是IN类型的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create FUNCTION SUM1(n int) //表明传入参数名称，类型</span><br><span class="line">RETURNS int NO SQL  //指定返回的参数类型，characterstic特性</span><br><span class="line">BEGIN</span><br><span class="line">    declare m int default 0;</span><br><span class="line">    while n do</span><br><span class="line">    set m := m + n;</span><br><span class="line">    set n := n - 1;</span><br><span class="line">    end while ;</span><br><span class="line">    return m;    //返回m</span><br><span class="line">end;</span><br><span class="line">select SUM1(10);  //调用存储函数</span><br></pre></td></tr></table></figure><p><strong>Characteristic特性</strong></p><ul><li>NO SQL：返回的结果不包含sql语句</li><li>DETERMINISTIC：相同的输入参数 总是产生相同的结果</li><li>READ SQL DATE：包含读取数据的语句，不包含写入数据的语句</li></ul><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>指在增删改之前或者之后，触发，并执行触发器中指定的sql语句集合。根据这种特性，我们可以在数据库中完成数据库的数据保证，记录日志</p><p>触发器类型</p><ul><li>INSERT类型：NEW表示将要或者已经新增的数据</li><li>DELETE类型：OLD表示将要或者已经删除的数据</li><li>UPDATE类型：OLD表示修改之前的数据，NEW表示修改之后的数据</li></ul><p>都是行级触发器，指一条语句影响了5行数据，则触发器触发5次（MYSQL只支持此类触发器）</p><p>语句级触发器则不管一条语句影响了多少个数据，一条语句只触发一次触发器</p><p>创建语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create trigger tb_user1_insert_tri </span><br><span class="line">after/begin insert/update/delete on tb_user1 FOR EACH ROW</span><br><span class="line">    begin</span><br><span class="line">        insert into user_logs     values(null,&#x27;insert&#x27;,now(),new.id,concat(new.id,new.name,NEW.email,NEW.profession,NEW.age,NEW.gender,NEW.status,NEW.createtime));</span><br><span class="line">    end;</span><br><span class="line">    </span><br><span class="line">drop trigger tb_user1_insert_tri;  //删除触发器</span><br><span class="line"></span><br><span class="line">show triggers ;  //查看触发器</span><br></pre></td></tr></table></figure><p>内部有类似事务的原理，当触发器报错时，所执行的任何insert语句都不会成功执行</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h3><p>一般用于对数据库进行备份的环节，为数据库中的所有表上锁，只允许读操作，不允许写操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flush tables with read lock ; 加锁</span><br><span class="line">unlock tables; 解锁</span><br></pre></td></tr></table></figure><p>数据备份指令:要在CMD窗口上运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p1234 database_name &gt; 要保存的路径</span><br></pre></td></tr></table></figure><p>若要连接别的主机上的数据库，要加上-h 主机IP地址</p><ul><li>在从库当中进行备份，可以进行写操作，但是不能接受主库传来的二进制日志，会导致主从延迟</li></ul><h3 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h3><h4 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h4><ul><li><p>表共享读锁（读锁）：所有客户端都可以读，但是所有客户端都不能写</p></li><li><p>表独占写锁（写锁）：加锁的客户端既能读又能写，别的客户端不能读也不能写</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lock tables student read/write;</span><br></pre></td></tr></table></figure><p>解锁：unlock tables或断开连接</p><h4 id="元数据锁（MDL）"><a href="#元数据锁（MDL）" class="headerlink" title="元数据锁（MDL）"></a>元数据锁（MDL）</h4><p>是系统自动控制的，当我们访问一张表时，表会自动加锁，元数据可以看作是表结构，元数据锁存在的意义是维护表结构的一致性，当有活动事务存在时，是不允许对元数据进行操作。<strong>避免DDL,DML语句的冲突，保证读写的正确性</strong></p><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221021192940985.png" alt="image-20221021192940985"></p><p>增删改查之间的锁互相兼容，但与DDL语句的EXCLUSIVE排他锁互相排斥</p><p>兼容即，有共享读锁也可以进行增删改操作</p><h4 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h4><p>为了避免在执行DML语句时所加的行锁与表锁的冲突，加入了意向锁，使加表锁时不用检查每一行数据是否加了行锁</p><p>优化过程</p><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221021194537665.png" alt="image-20221021194537665"></p><p>左侧开启事务执行update语句加了行锁后，会加上一个意向锁，线程B在为表加锁时会直接检查意向锁以及意向锁的类型，如果兼容就加锁，互斥就变为阻塞状态，等左侧事务提交后再加锁</p><ul><li>意向共享锁IS；与表锁共享读锁兼容，与表锁独占写锁互斥</li></ul><p>由select……lock in share mode语句添加</p><ul><li>意向排他锁IX：与表锁共享读，表锁独占写锁都互斥</li></ul><p>由update ，insert ，delete ，select ……for update语句添加</p><h3 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h3><p>行锁时通过对索引上的索引项来加锁的，若执行语句时没有索引存在，则会变成表锁</p><ul><li>行锁：防止其他事务对其进行update，delete操作，再RC,RR隔离级别下都支持</li><li>间隙锁：锁定两个索引记录之间的间隙，防止其他事务进行insert操作，从而产生幻读现象，在RR级别下支持</li><li>临键锁：行锁和间隙锁的合成，同时锁住数据，以及数据前的间隙，在RR级别下支持</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221021200732033.png" alt="image-20221021200732033"></p><p>行锁的两种类型</p><ul><li>共享锁 S：允许一个事务去读一行，组织其他事务获得相同数据的排他锁</li></ul><p>概括：共享锁之间互相兼容，共享锁与排他锁不兼容</p><ul><li>排他锁 X：允许获取排他锁的事务更新数据，但阻止其他事务获取相同数据集的排他锁和共享锁</li></ul><p>概括：排他锁与其他排他锁，共享锁都不兼容，一种悲观锁</p><p>加共享锁的语句:select ….. lock in share mode</p><p>排他锁: update , delete , insert , select …. for update</p><p>注意：select语句本身不加任何锁，规律与意向锁相同</p><hr><p><strong>InnoDB默认事务隔离权限是RR，所以默认使用临建锁去遍历，将数据本身与数据之前的空隙全部上锁，防止幻读</strong></p><ul><li>针对唯一索引进行检索时，针对已存在的记录进行等值匹配时，会自动优化为行锁</li><li>针对索引进行等值检索时（唯一索引），针对不存在的记录加锁时，会变成一个间隙锁</li></ul><p><strong>锁的间隙是这个不存在的记录应该在的位置的间隙</strong></p><ul><li>针对索引进行等值检索时（普通索引），向右遍历时最后一个值不满足查询需求时，临键锁退化成间隙锁</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221021211436463.png" alt="image-20221021211436463"></p><ul><li>针对索引的范围查询（唯一索引），会一直遍历到第一个不属于范围的值为止，此时也会退化成间隙锁</li><li>遍历ID小于40的数据</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221021211636112.png" alt="image-20221021211636112"></p><p><strong>间隙锁的目的就是防止insert插入，造成幻读现象，多个事务的间隙锁可以锁住同一个间隙</strong></p><h2 id="InnoDB引擎底层"><a href="#InnoDB引擎底层" class="headerlink" title="InnoDB引擎底层"></a>InnoDB引擎底层</h2><h3 id="逻辑存储结构"><a href="#逻辑存储结构" class="headerlink" title="逻辑存储结构"></a>逻辑存储结构</h3><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221022143719234.png" alt="image-20221022143719234"></p><ul><li>表空间：一个mysql实例可以对应多个表空间:IBD文件</li><li>段：数据段：B+树的叶子节点集合，索引段：非叶子节点集合，回滚段</li><li>区：每个区大小为1M，最多可以存64个页</li><li>页：InnoDB存储引擎磁盘的最小单元，每个页为16kb，每个页都是一个B+树的结点</li><li>行：引擎存放的数据  </li><li>Trx_id:记录上次事务执行的id</li><li>Roll_Pointer：记录操作之前对应的数据</li></ul><h3 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h3><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221022131955079.png" alt="image-20221022131955079"></p><ul><li>Buffer Pool：缓冲池</li></ul><p>是主内存的一块区域，可以缓存磁盘经常操作的一些数据，进行增删改查操作时，会先操作这里的数据（没有数据则从磁盘加载数据），再以一定的频率将缓冲区的数据刷到磁盘中，减少磁盘IO，加快处理速度</p><p>缓冲池以页为单位，底层采用链表结构管理page单位</p><ol><li>freepage：申请了空间，但还没有数据</li><li>cleanpage：存入了数据，但还没被修改</li><li>dirty page:修改了数据，还没被刷到磁盘上，数据与磁盘上的不同</li></ol><ul><li>Change Buffer：更改缓冲区（针对非唯一 ，二级索引）</li></ul><p>在执行DML语句时，数据页在bufferpool中不存在的话，会将数据的变更存在change buffer中，等buffer pool读取到对应的数据，再将change buffer里的数据与buffer pool的数据合并，再刷到磁盘上</p><ul><li>Log Buffer</li></ul><p>用来保存要写到磁盘中的log日志文件（redo log，undo log），默认大小为16M，会定期的进行磁盘的刷新，如果需要批量的增删改操作，加大logbuffer的空间可以节省磁盘io</p><ul><li>Adaptive Hash Index(自适应哈希)</li></ul><p>用于优化buffer pool对数据的查询。如果系统发现hash索引可以提高速度，则会自动建立一个hash索引</p><h3 id="磁盘结构"><a href="#磁盘结构" class="headerlink" title="磁盘结构"></a>磁盘结构</h3><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221022132005729.png" alt="image-20221022132005729"></p><ul><li>System TableSpace</li></ul><p>是changebuffer的主要存放区域，也可能包含表和索引数据（独立系统表空间若没开启）</p><ul><li>File-Per-Table Tablespaces</li></ul><p>如果innodb_file_per_table &#x3D; on（默认开启） ， 则每个表的表空间文件包含索引和数据，存储在文件系统上的单个数据文件上</p><ul><li>General TableSpaces：通用表空间</li></ul><p>需要用create tablespace创建，在创建文件时指定存储什么表空间文件，或者再创建表时指定存储的通用表空间</p><ul><li>Undo TableSpaces：撤销表空间</li></ul><p>主要存储Undo log，有两个大小相同的表空间undo_001,undo_002</p><ul><li>Temporary TableSpaces：临时表空间</li></ul><p>存储临时表</p><ul><li>RedoLog：循环使用ib_logfile0,ib_logfile1，不会永久保存</li></ul><p>重做日志，用来保证事务的持久性，包含两个文件：重做日志缓冲redo log buffer，重做日志文件redo log file,前者在内存中，后者在磁盘中。当事务提交后会把所有信息都存放在redolog文件中，用于在刷新脏页到磁盘中，发生错误时，进行恢复</p><ul><li>DoubleWrite Buffer Files</li></ul><p>当BufferPool将数据刷到磁盘上时，会优先刷到双写缓冲区中，便于系统异常时恢复数据</p><h3 id="后台线程"><a href="#后台线程" class="headerlink" title="后台线程"></a>后台线程</h3><p>将innoDB存储引擎中的缓冲池的数据在合适的时机刷到磁盘中</p><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221022134053744.png" alt="image-20221022134053744"></p><ul><li>Master Thread：核心线程</li></ul><p>主要用于调度其他线程，还负责将缓冲池的数据异步刷新到磁盘当中，保证一致性，还包括脏页的刷新，合并插入缓存，undolog的回收</p><ul><li>IO Thread：IO线程</li></ul><p>采用的是AIO，异步非阻塞IO，可以极大的提升数据库的性能，该线程主要负责这些IO请求的回调</p><table><thead><tr><th>线程类型</th><th>默认个数</th><th align="center">职责</th></tr></thead><tbody><tr><td>Read Thread</td><td>4</td><td align="center">主要负责读操作</td></tr><tr><td>Write Thread</td><td>4</td><td align="center">主要负责写操作</td></tr><tr><td>Log Thread</td><td>1</td><td align="center">负责将日志文件刷新到磁盘</td></tr><tr><td>Insert buffer Thread</td><td>1</td><td align="center">负责将写缓冲区的内容刷新到磁盘</td></tr></tbody></table><ul><li>Purge Thread</li></ul><p>主要用于undo log 的回收</p><ul><li>Page Clear Thread</li></ul><p>协助master thread对脏页的刷新，减少线程的压力</p><h2 id="事务原理"><a href="#事务原理" class="headerlink" title="事务原理"></a>事务原理</h2><p>原子性，一致性，持久性主要由UndoLog，RedoLog来解决</p><p>隔离性由Mvcc来解决</p><ul><li>持久性保证流程：Redo Log（重做日志）</li></ul><p>当客户端请求事务时，会现在内存区中BufferPool寻找该数据，若不存在，后台线程则会从磁盘中寻找该数据，并加载到缓冲池中，加载到缓冲池后，就会对数据进行变更，此时redo log会记录数据页的物理变化，当事务要提交时，会先将redolog日志刷新到磁盘中的redolog中，再将脏页中的数据刷新到磁盘中，如果脏页数据刷新过程宕机，则会通过redolog日志文件恢复数据。</p><p><strong>事务进行操作时，都是随机的进行操作数据页的，脏页随机刷新磁盘数据，都是随机IO，效率很低，当事务提交时先刷新日志文件，就会使整个流程变成顺序IO，提升效率，这种流程成为WAL(优先刷新日志文件)。</strong></p><ul><li>原子性保证流程：Undo Log（撤销日志）</li></ul><p>UndoLog主要记录逻辑日志（每一步执行什么样的操作），RedoLog主要记录物理日志（更改的数据），undolog可以认为当执行了一条delete语句，里面就记录了一条insert语句，而redolog记录delete掉的数据内容，。执行RollBack时，就可以执行undolog里的语句进行事务的回滚</p><p>undoLog销毁：当事务提交时，不会立即销毁，会看Mvcc是否还需要这个undolog</p><p>undolog存储：undolog存放在段中的回滚段中</p><h2 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h2><ul><li>当前读</li></ul><p>读取的是当前记录的最新版本，即在读取时还要保证其他并发事务不能修改记录，需要对当前记录加锁，如：select … in share mode(共享锁S), update ,delete ,insert ,select….. for update(排他锁X)都是当前读</p><ul><li>当前读</li></ul><p>简单的select就是快照读，读取的是记录数据的可见版本，在不同隔离级别下读取到的不同</p><ol><li>RC：每次select都是一个快照读</li><li>RR：开启事务后第一个select是快照读</li><li>Serilizible：快照读会退化为当前读</li></ol><ul><li>Mvcc</li></ul><p>多版本并发控制，指的在InnoDB中维护数据的多个版本，使读写操作没有冲突，快照读为Mysql实现了一个非阻塞读功能。Mvcc具体实现还要依赖于数据库记录的3个隐式字段，Undo Log ， readView；</p><ul><li>记录当中的隐藏字段</li></ul><ol><li>DB_Trx_id;记录上一个事务执行的id</li><li>DB_roll_Pointer; 回滚指针，记录的是数据的上一个版本，配合undolog使用</li><li>DB_row_id;隐藏主键，如果表没有定义主键，则会生成一个隐藏主键</li></ol><ul><li>UndoLog日志</li></ul><ol><li>insert操作，产生的undolog日志在事务提交后可以立即删除</li><li>update，delete操作，产生的undolog日志不可以被立即删除，还要被快照读使用</li></ol><ul><li>undoLog版本链</li></ul><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221022154609639.png" alt="image-20221022154609639"></p><p>链表的头部是最新的记录版本，尾部是最旧的记录</p><ul><li>readView</li></ul><p>决定select语句选择undolog版本链中的版本</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>m_ids</td><td>当前所有活跃事务的id</td></tr><tr><td>min_trx_id</td><td>最小活跃事务的id</td></tr><tr><td>max_trx_id</td><td>预分配事务id（当前最大活跃事务id+1）</td></tr><tr><td>creator_ trx_id</td><td>创建当前readView事务的id</td></tr></tbody></table><p>版本数据链访问规则：</p><ul><li>如果trx_id&lt;min_trx_id：表明该事务已经提交，可以访问</li><li>如果trx_id&gt;max_trx_id：表明该事务在readview开启时还没有被创建，不可以被访问</li><li>如果trx_id &#x3D;&#x3D; creator_trx_id：表明该语句由该事务创建，可以被访问</li><li>如果trx_id在min_trx_id和max_trx_id之间：如果trx_id不在m_id中，表明数据已经提交，可以访问，如果trx_id在m_id中表明事务还没提交，不可以访问</li></ul><h2 id="Mysql管理"><a href="#Mysql管理" class="headerlink" title="Mysql管理"></a>Mysql管理</h2><h3 id="系统数据库"><a href="#系统数据库" class="headerlink" title="系统数据库"></a>系统数据库</h3><table><thead><tr><th>数据库</th><th>含义</th></tr></thead><tbody><tr><td>Mysql</td><td>存储mysql服务器正常运行所需要的各种信息（时区，主从，用户，权限）</td></tr><tr><td>information_schema</td><td>提供了访问数据库元数据的各种表和视图</td></tr><tr><td>performance_schema</td><td>包含各种锁，日志的信息</td></tr><tr><td>sys</td><td>方便dba和开发人员利用performancec_schema对数据库进行调优的视图</td></tr></tbody></table><h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><ul><li>mysql</li></ul><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-u  username</td><td>指定用户名</td></tr><tr><td>-h  hostname</td><td>指定ip地址</td></tr><tr><td>-p  password</td><td>指定密码</td></tr><tr><td>-P  portname</td><td>指定端口</td></tr><tr><td>-e  sql语句</td><td>执行指定sql语句并退出</td></tr></tbody></table><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221022163915238.png" alt="image-20221022163915238"></p><p>利用-e可以执行一些批处理脚本并且不用登陆</p><ul><li>mysqladmin是一个执行管理操作的客户端程序，可以检查服务器配置和当前状态，创建并删除数据库</li></ul><p>​mysqladmin –help可以查看所有可选的选项和指令</p><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221022164445987.png" alt="image-20221022164445987"></p><ul><li>mysqlbinlog</li></ul><p>由于服务器生成的二进制日志文件以二进制形式保存，借助这个工具查看文件</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-d</td><td>之查看某个数据库相关的操作</td></tr><tr><td>-o</td><td>忽略日志文件的前多少行</td></tr><tr><td>-r</td><td>将输出的文本格式输出到指定文件中</td></tr><tr><td>-s</td><td>展示简单格式</td></tr><tr><td>-v</td><td>将行事件转换为sql语句</td></tr><tr><td>-w</td><td>将行事件转换为sql语句并加入注释</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog -s binlong.000008</span><br></pre></td></tr></table></figure><ul><li>mysqlshow客户端查找工具</li></ul><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>–count</td><td>显示数据库及表的统计信息</td></tr><tr><td>-i</td><td>显示数据库或指定表的状态信息</td></tr></tbody></table><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221022165513387.png" alt="image-20221022165513387"></p><ul><li>mysqldump用来备份数据库或在不同数据库进行数据迁移</li></ul><table><thead><tr><th>输出选项</th><th>作用</th></tr></thead><tbody><tr><td>–add-drop-databse</td><td>每个数据库语句创建前加上drop database语句</td></tr><tr><td>–add-drop-table</td><td>每个数据库语句创建前加上drop table语句</td></tr><tr><td>-n</td><td>不包含数据库的创建语句</td></tr><tr><td>-t</td><td>不包含数据表的创建语句</td></tr><tr><td>-d</td><td>不包含数据</td></tr><tr><td>-T</td><td>自动生成两个文件，一个.sql文件，创建表结构的语句，一个.txt文件，数据文件</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p1234 -t MysqlHigh student &gt; MysqlHigh_student.sql</span><br><span class="line">mysqldump -uroot -p1234 -T /etc/lib/Mysql MysqlHigh student </span><br></pre></td></tr></table></figure><p>通过语句，来查看mysql信任的文件夹，以存放-T选项中的sql文件和TXT文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;%secure_file_priv%&#x27;</span><br></pre></td></tr></table></figure><ul><li>Mysqlimport&#x2F;source</li></ul><p>用于导入用-T导出的文件，import导入txt文件，source导入sql文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqlimport -uroot -p1234 MysqlHigh /etc/lib/Mysql/score.txt //在命令行中输入</span><br><span class="line">source /etc/lib/Mysql/score.sql  //这个是在mysql语句中写的</span><br></pre></td></tr></table></figure><h1 id="Mysql运维"><a href="#Mysql运维" class="headerlink" title="Mysql运维"></a>Mysql运维</h1><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h3><p>记录Mysql服务启动和停止及运行时所发生的严重错误，当服务器有问题建议优先查看服务器的错误日志，经过错误日志判定当前异常到底在哪</p><p>查看错误日志具体参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like&#x27;%log_error%&#x27;;</span><br></pre></td></tr></table></figure><p><strong>tail -f查看当前日志尾部实时输出的内容</strong></p><h3 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h3><p>记录了所有DDL语句和DML语句，不包括数据查询语句</p><p>作用：</p><ul><li>灾难时的数据恢复</li><li>Mysql的主从复制</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;%log_bin%&#x27;; //查看二进制日志相关参数</span><br></pre></td></tr></table></figure><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221022182120381.png" alt="image-20221022182120381"></p><ul><li>log_bin_basename ：logbin文件生成的位置</li><li>log_bin_index：日志的索引文件，记录当前数据库的二进制日志关联的文件由哪几个</li></ul><table><thead><tr><th>日志格式</th><th>记录内容</th></tr></thead><tbody><tr><td>statement</td><td>记录的是sql语句</td></tr><tr><td>row(默认)</td><td>记录的是针对于每一行数据的变更，即变更前的数据和变更后的数据</td></tr><tr><td>mixed</td><td>两种格式的混合，默认使用statement，很特殊情况下会使用row</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reset master;  //删除所有二进制日志文件</span><br><span class="line">show variables like &#x27;%binlog_expire%&#x27; //查看二进制日志过期时间，可以自行设置节省磁盘空间</span><br></pre></td></tr></table></figure><h3 id="查询日志"><a href="#查询日志" class="headerlink" title="查询日志"></a>查询日志</h3><p>包含了客户端的所有操作语句，默认是关闭的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;%general%&#x27;;</span><br></pre></td></tr></table></figure><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>将主库的binlog日志文件以二进制形式传输到服务器中，然后再从库上对这些日志进行重新执行</p><p>优点：</p><ul><li>主库出现问题，可以继续使用从库</li><li>实现读写分离，减轻主库的服务器压力</li><li>可以在从库中备份，以避免备份期间影响主库服务</li></ul><p>原理：</p><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221024145002611.png" alt="image-20221024145002611"></p><p>总体来说分为三部：</p><ul><li>主库将事务提交后，将具体内容写入二进制日志文件中</li><li>从库读取到主库的二进制日志文件中，写入到自己的r中继日志elay log日志文件中</li><li>从库读取自己relay log的日志文件，通过sqlthread改变自身的数据</li></ul><p>主库配置:</p><ul><li>在&#x2F;etc&#x2F;my.cnf中配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server-id = 1;  Mysql服务id，保证唯一</span><br><span class="line">read-only = 0;  设置为可以进行读写，1则为只读 ，只针对普通用户</span><br><span class="line">super-read-only = 0； 设置超级管理员的读写权限</span><br></pre></td></tr></table></figure><ul><li>主库创建一个用户，赋予主从复制的权限</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create user &#x27;itcast&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;Root@123456&#x27; //创建用户</span><br><span class="line"></span><br><span class="line">grant replication slave on *.* tp &#x27;itcast&#x27;@&#x27;%&#x27;;  //赋予主从复制权限</span><br></pre></td></tr></table></figure><ul><li>查看二进制日志文件坐标</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">show master stauts;</span><br><span class="line"></span><br><span class="line">//file:从哪个文件开始推送日志</span><br><span class="line">//positon：从该文件的第几行开始推送日志</span><br><span class="line">//Binlog_Do_DB: 指定需要同步的数据库</span><br><span class="line">//Binlog_Ignore_DB: 指定不需要同步的数据库</span><br></pre></td></tr></table></figure><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221026151527825.png" alt="image-20221026151527825"></p><p>从库配置：</p><p>修改从库配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server-id = 2;</span><br><span class="line">read_only = 1;</span><br></pre></td></tr></table></figure><p>修改从库的主库信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">change replication source to source_host = &#x27;xxx&#x27;  //主机地址</span><br><span class="line">change replication source to source_user = &#x27;xxx&#x27;  //主库对应的用户名</span><br><span class="line">change replication source to source_password = &#x27;xxx&#x27; //对应访问密码</span><br><span class="line">change replication source to source_log_file = &#x27;xxx&#x27; //对应推送的二进制日志文件</span><br><span class="line">change replication source to source_log_pos = &#x27;xxx&#x27;  //对应的日志文件位置</span><br></pre></td></tr></table></figure><p>开启同步操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start replica;</span><br><span class="line">show replica status; //查看主从复制状态</span><br></pre></td></tr></table></figure><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221026153217098.png" alt="image-20221026153217098"></p><p>IO_RUNNING:应为YES</p><p>SQL_RUNNING:应为YES</p><h2 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>单库导致的问题</p><ul><li>IO瓶颈；热点数据太多，数据库缓存不足，产生大量<strong>磁盘IO</strong>，效率较低。请求数据过多，<strong>网络IO</strong>瓶颈</li><li>CPU瓶颈；排序，分组，连接查询，聚合统计等会大量消耗cpu资源，请求过多，会出现cpu瓶颈</li></ul><p>分库分表核心：将数据分散到不同的数据库存储，提升数据库性能</p><p>拆分维度：</p><p>垂直拆分：</p><ul><li><p>垂直分库：以表为依据，根据业务，将不同业务的库分到不同的数据库中</p></li><li><p>特点：每个库结构不同，每个表结构不同，所有库的并集是全部数据</p></li><li><p>垂直分表：以字段为依据，对表结构进行拆分，根据字段的属性，将不同的字段分到不同的表中</p></li><li><p>特点：每个表结构不一样，每个表数据不一样，一般通过主键，外键关联，所有表的并集是全量数据</p></li></ul><p>水平拆分：</p><ul><li><p>水平分库</p></li><li><p>特点：每个数据库的表结构一样，但数据不一样，所有数据库并集为全量数据</p></li><li><p>水平分表</p></li><li><p>特点：每个表结构一样，但数据不一样，所有表并集为全量数据</p></li></ul><p>拆分力度</p><ul><li><p>分库</p></li><li><p>分表</p></li></ul><h3 id="实现技术"><a href="#实现技术" class="headerlink" title="实现技术"></a>实现技术</h3><p>Mycat：数据库分库分表的中间件，不用调整代码即可实现</p><p>概念介绍：</p><p><img src="/2022/09/28/JavaWeb/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221026183021629.png" alt="image-20221026183021629"></p><p>Mycat内部不存数据，只负责一些逻辑分片和存储操作，实际数据存储在物理结构中的主机中</p><h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/JavaWeb/">JavaWeb</category>
      
      
      <category domain="http://example.com/tags/JDBC%EF%BC%8C%E7%8A%B6%E6%80%81%E7%A0%81%EF%BC%8CMybatis/">JDBC，状态码，Mybatis</category>
      
      
    </item>
    
    <item>
      <title>JS入门</title>
      <link>http://example.com/2022/09/27/JavaScript/</link>
      <guid>http://example.com/2022/09/27/JavaScript/</guid>
      <pubDate>Tue, 27 Sep 2022 14:07:08 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h1&gt;&lt;h2 id=&quot;内部脚本&quot;&gt;&lt;a href=&quot;#内部脚本&quot; class=&quot;headerlink&quot; title=&quot;内部脚本&quot;&gt;&lt;/a&gt;内部脚本&lt;/h2&gt;&lt;p&gt;Script可以放置于任意地方，数量无限制，一般情况都会放到BODY标签底部，改善显示速度&lt;/p&gt;
&lt;h2 id=&quot;外部脚本&quot;&gt;&lt;a href=&quot;#外部脚本&quot; class=&quot;headerlink&quot; title=&quot;外部脚本&quot;&gt;&lt;/a&gt;外部脚本&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;../DemoJs/HelloJs.js&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt; //一定要外闭合&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;SRC为JS文件URL路径，&lt;/p&gt;
&lt;h2 id=&quot;书写语法&quot;&gt;&lt;a href=&quot;#书写语法&quot; class=&quot;headerlink&quot; title=&quot;书写语法&quot;&gt;&lt;/a&gt;书写语法&lt;/h2&gt;&lt;p&gt;每行结尾分号可有可无&lt;/p&gt;
&lt;h3 id=&quot;输出语句：&quot;&gt;&lt;a href=&quot;#输出语句：&quot; class=&quot;headerlink&quot; title=&quot;输出语句：&quot;&gt;&lt;/a&gt;输出语句：&lt;/h3&gt;&lt;p&gt;alert：写入警告框&lt;/p&gt;
&lt;p&gt;write：写入HTML&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;123333&amp;quot;&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;//弹出警告&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;HelloJs&amp;quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//写入HTML页面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Hello,JS2&amp;quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//写入浏览器控制台&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h3&gt;&lt;p&gt;弱类型的值，可以存放任意数据的值，仅需要使用var声明一下&lt;/p&gt;
&lt;p&gt;var text &amp;#x3D; 20；&lt;/p&gt;
&lt;p&gt;text&amp;#x3D; “张三”&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; test= &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;alert&lt;/span&gt;(test);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; test = &lt;span class=&quot;string&quot;&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;alert&lt;/span&gt;(test)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Var定义的变量相当于全局变量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;变量可以重复定义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let定义的变量相当于局部变量，且变量不可以重复定义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;console定义的变量相当于常量，定义后不能被改变&lt;/strong&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="内部脚本"><a href="#内部脚本" class="headerlink" title="内部脚本"></a>内部脚本</h2><p>Script可以放置于任意地方，数量无限制，一般情况都会放到BODY标签底部，改善显示速度</p><h2 id="外部脚本"><a href="#外部脚本" class="headerlink" title="外部脚本"></a>外部脚本</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../DemoJs/HelloJs.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> //一定要外闭合</span><br></pre></td></tr></table></figure><p>SRC为JS文件URL路径，</p><h2 id="书写语法"><a href="#书写语法" class="headerlink" title="书写语法"></a>书写语法</h2><p>每行结尾分号可有可无</p><h3 id="输出语句："><a href="#输出语句：" class="headerlink" title="输出语句："></a>输出语句：</h3><p>alert：写入警告框</p><p>write：写入HTML</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;123333&quot;</span>)  <span class="comment">//弹出警告</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;HelloJs&quot;</span>) <span class="comment">//写入HTML页面</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello,JS2&quot;</span>) <span class="comment">//写入浏览器控制台</span></span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>弱类型的值，可以存放任意数据的值，仅需要使用var声明一下</p><p>var text &#x3D; 20；</p><p>text&#x3D; “张三”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test= <span class="number">20</span>;</span><br><span class="line"><span class="title function_">alert</span>(test);</span><br><span class="line"><span class="keyword">var</span> test = <span class="string">&quot;张三&quot;</span></span><br><span class="line"><span class="title function_">alert</span>(test)</span><br></pre></td></tr></table></figure><p><strong>Var定义的变量相当于全局变量</strong></p><p><strong>变量可以重复定义</strong></p><p><strong>Let定义的变量相当于局部变量，且变量不可以重复定义</strong></p><p><strong>console定义的变量相当于常量，定义后不能被改变</strong></p><span id="more"></span><p>数据类型</p><p>5种原始类型，1种引用类型</p><p>原始类型：</p><p>number：注意NaN与任何数相加结果仍为NaN</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test= <span class="number">20</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> test);  <span class="comment">//结果为number</span></span><br></pre></td></tr></table></figure><p>string</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test= <span class="string">&quot;北京&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> test);  <span class="comment">//结果为string</span></span><br></pre></td></tr></table></figure><p>boolean</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test= <span class="literal">true</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> test);  <span class="comment">//结果为boolean</span></span><br></pre></td></tr></table></figure><p>null</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test= <span class="literal">null</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> test); <span class="comment">//结果为object，是一个javascript长期存在的错误</span></span><br></pre></td></tr></table></figure><p>undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> test); <span class="comment">//结果为undefined类型</span></span><br></pre></td></tr></table></figure><p><strong>在JS中，进行比较时，会先进行类型转换，再去比较对应的值</strong></p><p><strong>”&#x3D;&#x3D;&#x3D;“全等于不会进行类型转换</strong></p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>字符串转换为数字，若字面不是数值，则转换成NAN</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = +<span class="string">&quot;40&quot;</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> str)</span><br></pre></td></tr></table></figure><p>BOOLEAN类型转数字，TRUE转为1，False转为0</p><p>其他类型转BOOLEAN类型</p><p>NUMBER：0或NaN转换为false，其余数字转为true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;40&quot;</span></span><br><span class="line"><span class="keyword">if</span>(str)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;转换为true&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;转换为false&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>String：空字符串转换为false，其余的转换为true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="keyword">if</span>(str)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;转换为true&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;转换为false&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Null：转换为false</p><p>Undefined：转换为false</p><h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><p>Function 方法名（方法参数）{</p><p>}</p><p>JS中不需要定义返回参数类型，形参也不需要定义类型</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="基本对象"><a href="#基本对象" class="headerlink" title="基本对象"></a>基本对象</h3><p>Array：</p><p>Var 变量名 &#x3D; new Array（元素列表）；</p><p>Var 变量名 &#x3D; [ 元素列表 ]  注意为中括号</p><p>数组访问与JAVA一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="title function_">alert</span>(arr)</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="title function_">alert</span>(arr2)</span><br><span class="line"><span class="title function_">alert</span>(arr2[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>特殊点：JS中的数组是变长变类型的，即既可以存整数，也可以存字符串</p><p>增加元素 .Push</p><p>删除元素 .splice（Strat number，删除元素数量）</p><p>字符串</p><p>trim（）去除字符串两端空白字符</p><p><strong>自定义对象</strong></p><p>var 对象名称 &#x3D; {</p><p>属性名称：属性值，</p><p>属性名称：属性值，</p><p>函数名称：function（）{</p><p>}</p><p>}</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">23</span>,</span><br><span class="line">    <span class="attr">EAT</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;干饭&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(person.<span class="property">name</span>)</span><br><span class="line"><span class="title function_">alert</span>(person.<span class="property">age</span>)</span><br><span class="line">person.<span class="title function_">EAT</span>()</span><br></pre></td></tr></table></figure><h3 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h3><p><strong>Window对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;你是男的吗&quot;</span>)</span><br></pre></td></tr></table></figure><p>带有确认和取消的对话框，带有返回值，返回true或false</p><p><strong>定时器</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="title function_">alert</span>(<span class="string">&quot;干饭&quot;</span>)&#125;,<span class="number">2000</span>)</span><br><span class="line">               <span class="keyword">function</span>方法            时间以毫秒为单位</span><br></pre></td></tr></table></figure><p>setTimeOut不会循环执行</p><p><strong>History对象</strong></p><p>访问Window.history.方法();</p><p>BACK 后退</p><p>FORWARD  前进</p><p><strong>Location对象</strong></p><p>Window.location；</p><p>href获取或设置当前地址栏的URL</p><p>location.href &#x3D; …..</p><h3 id="Dom对象"><a href="#Dom对象" class="headerlink" title="Dom对象"></a>Dom对象</h3><p>获取Element对象</p><p>1.getElementById 返回一个Element对象</p><p>2.getElementByTagName 返回一个Element类型数组</p><p>3.getElementByName 返回一个Element类型数组</p><p>4.getElementByClassName 返回一个Element类型数组</p><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我提交所有内容&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">         <span class="title function_">alert</span>(<span class="string">&quot;表单已提交&quot;</span>)</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>事件绑定 </p><p>onblur  元素失去焦点</p><p>onfocus 元素获得焦点</p><p>onclick 点击事件</p><p>onkeydown 某个按键被按下</p><p>onmouserover鼠标移到某个元素</p><p>onmouseout鼠标移出某个元素</p><p><strong>onsubmit    submit按键被按下</strong></p><p> .onsubmit &#x3D; funciton (){</p><p>return false；表单不会被提交，return true 表单会被提交</p><p>}</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/JavaWeb/">JavaWeb</category>
      
      
      
    </item>
    
  </channel>
</rss>
